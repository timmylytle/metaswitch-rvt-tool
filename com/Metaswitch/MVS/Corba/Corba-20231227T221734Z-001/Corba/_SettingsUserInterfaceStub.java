package com.Metaswitch.MVS.Corba;


/**
* com/Metaswitch/MVS/Corba/_SettingsUserInterfaceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from SettingsUserInterface.idl
* Thursday, June 18, 2020 8:33:03 PM CDT
*/


/**
 * The SettingsUserInterface provides the client application with methods to:
 * enumerate fields; obtain detailed type information that describes each of
 * the fields including ranges, units and default values; get and set field
 * values; query lists of possible values for fields.
 */
public class _SettingsUserInterfaceStub extends org.omg.CORBA.portable.ObjectImpl implements com.Metaswitch.MVS.Corba.SettingsUserInterface
{


  /**
       * Returns a 32-bit integer representation of the field value. If the
       * field is a Switchable Default field, and the use-default flag is set,
       * then this returns the default value.  Otherwise this returns the specific
       * value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned Boolean out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A 32-bit integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown when fieldName could not be mapped to the
       *                   name of a field in the settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE  and
       *                   INT32_ARRAY field types.
       */
  public int getFieldAsIntByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFieldAsIntByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFieldAsIntByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getFieldAsIntByName


  /**
       * Returns a 32-bit integer representation of the field value. If the
       * field is a Switchable Default field, and the use-default flag is set,
       * then this returns the default value.  Otherwise this returns the specific
       * value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned Boolean out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A 32-bit integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown when fieldIndex could not be mapped to a
       *                   field in the settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE  and
       *                   INT32_ARRAY field types.
       */
  public int getFieldAsIntByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFieldAsIntByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFieldAsIntByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getFieldAsIntByIndex


  /**
       * Returns a 64-bit long integer representation of the field value.If the
       * field is a Switchable Default field, and the use-default flag is set,
       * then this returns the default value.  Otherwise this returns the specific
       * value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A long integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT64.
       */
  public long getFieldAsLongByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFieldAsLongByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                long $result = $in.read_longlong ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFieldAsLongByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getFieldAsLongByName


  /**
       * Returns a 64-bit long integer representation of the field value. If the
       * field is a Switchable Default field, and the use-default flag is set,
       * then this returns the default value.  Otherwise this returns the specific
       * value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A long integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT64.
       */
  public long getFieldAsLongByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFieldAsLongByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                long $result = $in.read_longlong ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFieldAsLongByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getFieldAsLongByIndex


  /**
       * Returns a String representation of the field value. If the field
       * is a Switchable Default field, and the use-default flag is set,
       * then this returns the default value.  Otherwise this returns the
       * specific value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A String representation of the field value. All field types
       *         can be represented as a String.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public String getFieldAsStringByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFieldAsStringByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFieldAsStringByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getFieldAsStringByName


  /**
       * Returns a String representation of the field value. If the field
       * is a Switchable Default field, and the use-default flag is set,
       * then this returns the default value.  Otherwise this returns the
       * specific value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A String representation of the field value. All field types
       *         can be represented as a String.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  public String getFieldAsStringByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFieldAsStringByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFieldAsStringByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getFieldAsStringByIndex


  /**
       * Returns a DualString representation of the field value. The _internal_
       * field contains the elementName. The _display_ field contains the
       * displayName as either NLS text or plain text depending on whether
       * setNLSLocale has been called on the ClientSessionInterface.
       * If the field is a Switchable Default field, and the use-default
       * flag is set, then this returns the default value.  Otherwise this
       * returns the specific value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A DualString representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException if the isReference method returns false.
       */
  public com.Metaswitch.MVS.Corba.DualString getFieldAsReferenceByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFieldAsReferenceByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.DualString $result = com.Metaswitch.MVS.Corba.DualStringHelper.read ($in);
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFieldAsReferenceByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getFieldAsReferenceByName


  /**
       * Returns a DualString representation of the field value. The _internal_
       * field contains the elementName. The _display_ field contains the
       * displayName as either NLS text or plain text depending on whether
       * setNLSLocale has been called on the ClientSessionInterface.
       * If the field is a Switchable Default field, and the use-default
       * flag is set, then this returns the default value.  Otherwise this
       * returns the specific value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A DualString representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException if the isReference method returns false.
       */
  public com.Metaswitch.MVS.Corba.DualString getFieldAsReferenceByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFieldAsReferenceByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.DualString $result = com.Metaswitch.MVS.Corba.DualStringHelper.read ($in);
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFieldAsReferenceByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getFieldAsReferenceByIndex


  /**
       * Returns a boolean representation of the field value. If the field is
       * a Switchable Default field, and the use-default flag is set, then this
       * returns the default value.  Otherwise this returns the specific value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A boolean representation of the field value. Valid for BOOLEAN
       *         and parseable STRING fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BOOLEAN & some parseable STRINGs.
       */
  public boolean getFieldAsBooleanByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFieldAsBooleanByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFieldAsBooleanByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getFieldAsBooleanByName


  /**
       * Returns a boolean representation of the field value. If the field is
       * a Switchable Default field, and the use-default flag is set, then this
       * returns the default value.  Otherwise this returns the specific value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A boolean representation of the field value. Valid for BOOLEAN
       *         and parseable STRING fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BOOLEAN & some parseable STRINGs.
       */
  public boolean getFieldAsBooleanByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFieldAsBooleanByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFieldAsBooleanByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getFieldAsBooleanByIndex


  /**
       * Returns a byte array representation of the field value. If the field is
       * a Switchable Default field, and the use-default flag is set, then this
       * returns the default value.  Otherwise this returns the specific value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return An octet array representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BYTE_ARRAY.
       */
  public byte[] getFieldAsByteArrayByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFieldAsByteArrayByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                byte $result[] = com.Metaswitch.MVS.Corba.SequenceOfOctetsHelper.read ($in);
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFieldAsByteArrayByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getFieldAsByteArrayByName


  /**
       * Returns a byte array representation of the field value. If the field is
       * a Switchable Default field, and the use-default flag is set, then this
       * returns the default value.  Otherwise this returns the specific value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return An octet array representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BYTE_ARRAY.
       */
  public byte[] getFieldAsByteArrayByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFieldAsByteArrayByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                byte $result[] = com.Metaswitch.MVS.Corba.SequenceOfOctetsHelper.read ($in);
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFieldAsByteArrayByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getFieldAsByteArrayByIndex


  /**
       * Returns a SequenceOfIntegers representation of the field value.
       * If the field is a Switchable Default field, and the use-default
       * flag is set, then this returns the default value.  Otherwise this
       * returns the specific value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A SequenceOfIntegers representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY.
       */
  public int[] getFieldAsIntArrayByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFieldAsIntArrayByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                int $result[] = com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.read ($in);
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFieldAsIntArrayByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getFieldAsIntArrayByName


  /**
       * Returns a SequenceOfIntegers representation of the field value.
       * If the field is a Switchable Default field, and the use-default
       * flag is set, then this returns the default value.  Otherwise this
       * returns the specific value.
       *
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A SequenceOfIntegers representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY.
       */
  public int[] getFieldAsIntArrayByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFieldAsIntArrayByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                int $result[] = com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.read ($in);
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFieldAsIntArrayByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getFieldAsIntArrayByIndex


  /**
       * Returns a 32-bit integer representation of the field value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned Boolean out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A 32-bit integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown when fieldName could not be mapped to the
       *                   name of a field in the settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE  and
       *                   INT32_ARRAY field types.
       */
  public int getSpecificValueAsIntByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSpecificValueAsIntByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSpecificValueAsIntByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getSpecificValueAsIntByName


  /**
       * Returns a 32-bit integer representation of the field value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned Boolean out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A 32-bit integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown when fieldIndex could not be mapped to a
       *                   field in the settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE  and
       *                   INT32_ARRAY field types.
       */
  public int getSpecificValueAsIntByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSpecificValueAsIntByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSpecificValueAsIntByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getSpecificValueAsIntByIndex


  /**
       * Returns a 64-bit long integer representation of the field value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A long integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT64.
       */
  public long getSpecificValueAsLongByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSpecificValueAsLongByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                long $result = $in.read_longlong ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSpecificValueAsLongByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getSpecificValueAsLongByName


  /**
       * Returns a 64-bit long integer representation of the field value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A long integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT64.
       */
  public long getSpecificValueAsLongByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSpecificValueAsLongByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                long $result = $in.read_longlong ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSpecificValueAsLongByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getSpecificValueAsLongByIndex


  /**
       * Returns a String representation of the field value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A String representation of the field value. All field types
       *         can be represented as a String.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public String getSpecificValueAsStringByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSpecificValueAsStringByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSpecificValueAsStringByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getSpecificValueAsStringByName


  /**
       * Returns a String representation of the field value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A String representation of the field value. All field types
       *         can be represented as a String.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  public String getSpecificValueAsStringByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSpecificValueAsStringByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSpecificValueAsStringByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getSpecificValueAsStringByIndex


  /**
       * Returns a DualString representation of the field value. The _internal_
       * field contains the elementName. The _display_ field contains the
       * displayName as either NLS text or plain text depending on whether
       * setNLSLocale has been called on the ClientSessionInterface.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A DualString representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException if the isReference method returns false.
       */
  public com.Metaswitch.MVS.Corba.DualString getSpecificValueAsReferenceByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSpecificValueAsReferenceByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.DualString $result = com.Metaswitch.MVS.Corba.DualStringHelper.read ($in);
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSpecificValueAsReferenceByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getSpecificValueAsReferenceByName


  /**
       * Returns a DualString representation of the field value. The _internal_
       * field contains the elementName. The _display_ field contains the
       * displayName as either NLS text or plain text depending on whether
       * setNLSLocale has been called on the ClientSessionInterface.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A DualString representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException if the isReference method returns false.
       */
  public com.Metaswitch.MVS.Corba.DualString getSpecificValueAsReferenceByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSpecificValueAsReferenceByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.DualString $result = com.Metaswitch.MVS.Corba.DualStringHelper.read ($in);
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSpecificValueAsReferenceByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getSpecificValueAsReferenceByIndex


  /**
       * Returns a boolean representation of the field value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A boolean representation of the field value. Valid for BOOLEAN
       *         and parseable STRING fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BOOLEAN & some parseable STRINGs.
       */
  public boolean getSpecificValueAsBooleanByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSpecificValueAsBooleanByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSpecificValueAsBooleanByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getSpecificValueAsBooleanByName


  /**
       * Returns a boolean representation of the field value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A boolean representation of the field value. Valid for BOOLEAN
       *         and parseable STRING fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BOOLEAN & some parseable STRINGs.
       */
  public boolean getSpecificValueAsBooleanByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSpecificValueAsBooleanByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSpecificValueAsBooleanByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getSpecificValueAsBooleanByIndex


  /**
       * Returns a byte array representation of the field value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return An octet array representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BYTE_ARRAY.
       */
  public byte[] getSpecificValueAsByteArrayByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSpecificValueAsByteArrayByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                byte $result[] = com.Metaswitch.MVS.Corba.SequenceOfOctetsHelper.read ($in);
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSpecificValueAsByteArrayByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getSpecificValueAsByteArrayByName


  /**
       * Returns a byte array representation of the field value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return An octet array representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BYTE_ARRAY.
       */
  public byte[] getSpecificValueAsByteArrayByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSpecificValueAsByteArrayByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                byte $result[] = com.Metaswitch.MVS.Corba.SequenceOfOctetsHelper.read ($in);
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSpecificValueAsByteArrayByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getSpecificValueAsByteArrayByIndex


  /**
       * Returns a SequenceOfIntegers representation of the field value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A SequenceOfIntegers representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY.
       */
  public int[] getSpecificValueAsIntArrayByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSpecificValueAsIntArrayByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                int $result[] = com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.read ($in);
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSpecificValueAsIntArrayByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getSpecificValueAsIntArrayByName


  /**
       * Returns a SequenceOfIntegers representation of the field value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A SequenceOfIntegers representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY.
       */
  public int[] getSpecificValueAsIntArrayByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSpecificValueAsIntArrayByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                int $result[] = com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.read ($in);
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSpecificValueAsIntArrayByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getSpecificValueAsIntArrayByIndex


  /**
       * Returns an 32-bit integer representation of the field default value.
       *
       * @param fieldName  String name of the field.
       * @param hasDefault BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A 32-bit integer representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE and
       *                   INT32_ARRAY.
       *
       */
  public int getDefaultAsIntByName (String fieldName, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDefaultAsIntByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                hasDefault.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDefaultAsIntByName (fieldName, hasDefault        );
            } finally {
                _releaseReply ($in);
            }
  } // getDefaultAsIntByName


  /**
       * Returns an 32-bit integer representation of the field default value.
       *
       * @param fieldIndex Integer index of the field.
       * @param hasDefault BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A 32-bit integer representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE and
       *                   INT32_ARRAY.
       *
       */
  public int getDefaultAsIntByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDefaultAsIntByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                hasDefault.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDefaultAsIntByIndex (fieldIndex, hasDefault        );
            } finally {
                _releaseReply ($in);
            }
  } // getDefaultAsIntByIndex


  /**
       * Returns a 64-bit long representation of the field default value.
       *
       * @param fieldName  String name of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored
       *
       * @return A 64-bit long integer representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT64.
       */
  public long getDefaultAsLongByName (String fieldName, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDefaultAsLongByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                long $result = $in.read_longlong ();
                hasDefault.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDefaultAsLongByName (fieldName, hasDefault        );
            } finally {
                _releaseReply ($in);
            }
  } // getDefaultAsLongByName


  /**
       * Returns a 64-bit long representation of the field default value.
       *
       * @param fieldIndex Integer index of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored
       *
       * @return A 64-bit long integer representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT64.
       */
  public long getDefaultAsLongByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDefaultAsLongByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                long $result = $in.read_longlong ();
                hasDefault.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDefaultAsLongByIndex (fieldIndex, hasDefault        );
            } finally {
                _releaseReply ($in);
            }
  } // getDefaultAsLongByIndex


  /**
       * Returns a String representation of the field default value.
       * All field types can be represented as a String.
       *
       * @param fieldName  String name of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A String representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public String getDefaultAsStringByName (String fieldName, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDefaultAsStringByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                hasDefault.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDefaultAsStringByName (fieldName, hasDefault        );
            } finally {
                _releaseReply ($in);
            }
  } // getDefaultAsStringByName


  /**
       * Returns a String representation of the field default value.
       * All field types can be represented as a String.
       *
       * @param fieldIndex Integer index of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A String representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  public String getDefaultAsStringByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDefaultAsStringByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                hasDefault.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDefaultAsStringByIndex (fieldIndex, hasDefault        );
            } finally {
                _releaseReply ($in);
            }
  } // getDefaultAsStringByIndex


  /**
       * Returns a DualString representation of the field default value. The
       * _internal_ field contains the elementName. The _display_ field contains
       * the displayName as either NLS text or plain text depending on whether
       * setNLSLocale has been called on the ClientSessionInterface.
       *
       * @param fieldName  String name of the field.
       * @param hasDefault BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has a default.
       *                   If false, the returned value should be ignored.
       *
       * @return A DualString representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException if the isReference method returns false.
       */
  public com.Metaswitch.MVS.Corba.DualString getDefaultAsReferenceByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDefaultAsReferenceByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.DualString $result = com.Metaswitch.MVS.Corba.DualStringHelper.read ($in);
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDefaultAsReferenceByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getDefaultAsReferenceByName


  /**
       * Returns a DualString representation of the field value. The _internal_
       * field contains the elementName. The _display_ field contains the
       * displayName as either NLS text or plain text depending on whether
       * setNLSLocale has been called on the ClientSessionInterface.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A DualString representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException if the isReference method returns false.
       */
  public com.Metaswitch.MVS.Corba.DualString getDefaultAsReferenceByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDefaultAsReferenceByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.DualString $result = com.Metaswitch.MVS.Corba.DualStringHelper.read ($in);
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDefaultAsReferenceByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getDefaultAsReferenceByIndex


  /**
       * Returns a boolean representation of the field default value.
       *
       * @param fieldName  String name of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A boolean representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BOOLEAN and parseable STRING fields.
       */
  public boolean getDefaultAsBooleanByName (String fieldName, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDefaultAsBooleanByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                hasDefault.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDefaultAsBooleanByName (fieldName, hasDefault        );
            } finally {
                _releaseReply ($in);
            }
  } // getDefaultAsBooleanByName


  /**
       * Returns a boolean representation of the field default value.
       *
       * @param fieldIndex Integer index of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A boolean representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BOOLEAN and parseable STRING fields.
       */
  public boolean getDefaultAsBooleanByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDefaultAsBooleanByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                hasDefault.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDefaultAsBooleanByIndex (fieldIndex, hasDefault        );
            } finally {
                _releaseReply ($in);
            }
  } // getDefaultAsBooleanByIndex


  /**
       * Returns a byte array representation of the field default value.
       *
       * @param fieldName  String name of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A byte array representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BYTE_ARRAY.
       */
  public byte[] getDefaultAsByteArrayByName (String fieldName, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDefaultAsByteArrayByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                byte $result[] = com.Metaswitch.MVS.Corba.SequenceOfOctetsHelper.read ($in);
                hasDefault.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDefaultAsByteArrayByName (fieldName, hasDefault        );
            } finally {
                _releaseReply ($in);
            }
  } // getDefaultAsByteArrayByName


  /**
       * Returns a byte array representation of the field default value.
       *
       * @param fieldIndex Integer index of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A byte array representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BYTE_ARRAY.
       */
  public byte[] getDefaultAsByteArrayByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDefaultAsByteArrayByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                byte $result[] = com.Metaswitch.MVS.Corba.SequenceOfOctetsHelper.read ($in);
                hasDefault.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDefaultAsByteArrayByIndex (fieldIndex, hasDefault        );
            } finally {
                _releaseReply ($in);
            }
  } // getDefaultAsByteArrayByIndex


  /**
       * Returns a SequenceOfIntegers representation of the field default value.
       *
       * @param fieldName  String name of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A SequenceOfIntegers representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY.
       */
  public int[] getDefaultAsIntArrayByName (String fieldName, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDefaultAsIntArrayByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                int $result[] = com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.read ($in);
                hasDefault.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDefaultAsIntArrayByName (fieldName, hasDefault        );
            } finally {
                _releaseReply ($in);
            }
  } // getDefaultAsIntArrayByName


  /**
       * Returns a SequenceOfIntegers representation of the field default value.
       *
       * @param fieldIndex Integer index of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A SequenceOfIntegers representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY.
       */
  public int[] getDefaultAsIntArrayByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDefaultAsIntArrayByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                int $result[] = com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.read ($in);
                hasDefault.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDefaultAsIntArrayByIndex (fieldIndex, hasDefault        );
            } finally {
                _releaseReply ($in);
            }
  } // getDefaultAsIntArrayByIndex


  /**
       * Returns true if the use-default flag is set for this field.  Otherwise
       * returns false.  If the use-default flag is set and this is a Switchable
       * Default field, then the default value will be set and returned by the
       * setFieldAs*() and getFieldAs*() methods.  Otherwise, the specific value
       * will be set and returned as normal.
       *
       * @param fieldName  String name of the field.
       *
       * @param isAssigned  BooleanHolder out parameter, indicating whether
       *                            the use default flag is assigned.  This will
       *                            always be returned false for non-switchable
       *                            default fields.  If false, the return value
       *                            should be ignored.
       *
       * @return boolean indicating whether or not the field is using
       * the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean getUseDefaultFlagByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getUseDefaultFlagByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getUseDefaultFlagByName (fieldName, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getUseDefaultFlagByName


  /**
       * Returns true if the use-default flag is set for this field.  Otherwise
       * returns false. If the use-default flag is set and this is a Switchable
       * Default field, then the default value will be set and returned by the
       * setFieldAs*() and getFieldAs*() methods.  Otherwise, the specific value
       * will be set and returned as normal.
       *
       * @param fieldIndex string field index
       *
       * @param isAssigned  BooleanHolder out parameter, indicating whether
       *                            the use default flag is assigned.  This will
       *                            always be returned false for non-switchable
       *                            default fields.  If false, the return value
       *                            should be ignored.
       *
       * @return boolean indicating whether or not the field is using
       * the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean getUseDefaultFlagByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getUseDefaultFlagByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                isAssigned.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getUseDefaultFlagByIndex (fieldIndex, isAssigned        );
            } finally {
                _releaseReply ($in);
            }
  } // getUseDefaultFlagByIndex


  /**
       * Returns true if the field is a start of clause field for which the
       * clause has been selected.  Otherwise returns false.
       *
       * If the clause is selected, then this and all consecutive fields upto and
       * including the end-of-clause field are valid.  If the clause is not
       * selected then these fields are not valid.
       *
       * See also isStartOfClauseByName(), isEndOfClauseByName and
       * setClauseIsSelectedByName().
       *
       * @param fieldName  String name of the field.
       *
       * @param isStartOfClause BooleanHolder out parameter, indicating whether
       *                            the field is a start of clause.  If false,
       *                            the return value should be ignored.
       *
       * @return boolean indicating whether or not the field has the clause selected.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean getClauseIsSelectedByName (String fieldName, org.omg.CORBA.BooleanHolder isStartOfClause) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getClauseIsSelectedByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                isStartOfClause.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getClauseIsSelectedByName (fieldName, isStartOfClause        );
            } finally {
                _releaseReply ($in);
            }
  } // getClauseIsSelectedByName


  /**
       * Returns true if the field is a start of clause field for which the
       * clause has been selected.  Otherwise returns false.
       *
       * If the clause is selected, then this and all consecutive fields upto and
       * including the end-of-clause field are valid.  If the clause is not
       * selected then these fields are not valid.
       *
       * See also isStartOfClauseByIndex(), isEndOfClauseByIndex and
       * setClauseIsSelectedByIndex().
       *
       * @param fieldIndex Integer index of the field.
       *
       * @param isStartOfClause BooleanHolder out parameter, indicating whether
       *                            the field is a start of clause.  If false,
       *                            the return value should be ignored.
       *
       * @return boolean indicating whether or not the field has the clause selected.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean getClauseIsSelectedByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isStartOfClause) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getClauseIsSelectedByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                isStartOfClause.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getClauseIsSelectedByIndex (fieldIndex, isStartOfClause        );
            } finally {
                _releaseReply ($in);
            }
  } // getClauseIsSelectedByIndex


  /**
       * Returns true if this field is the selected entry in an exclusive group.
       * Otherwise returns false.  If this field is also a lower range
       * field of a range pair, then the corresponding upper range field is
       * assumed to be selected and deselected at the same time as this field.
       *
       * See isExclusiveGroupEntryByName() for more details.
       *
       * @param fieldName  String name of the field.
       *
       * @param isExclusiveGroupEntry BooleanHolder out parameter, indicating whether
       *                            the field is in an exclusive group.  If false,
       *                            the return value should be ignored.
       *
       * @return boolean indicating whether or not the field is the selected entry
       *                            in an exclusive group.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean getGroupEntryIsSelectedByName (String fieldName, org.omg.CORBA.BooleanHolder isExclusiveGroupEntry) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getGroupEntryIsSelectedByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                isExclusiveGroupEntry.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getGroupEntryIsSelectedByName (fieldName, isExclusiveGroupEntry        );
            } finally {
                _releaseReply ($in);
            }
  } // getGroupEntryIsSelectedByName


  /**
       * Returns true if this field is the selected entry in an exclusive group.
       * Otherwise returns false.  If this field is also a lower range
       * field of a range pair, then the corresponding upper range field is
       * assumed to be selected and deselected at the same time as this field.
       *
       * See isExclusiveGroupEntryByIndex() for more details.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @param isExclusiveGroupEntry BooleanHolder out parameter, indicating whether
       *                            the field is in an exclusive group.  If false,
       *                            the return value should be ignored.
       *
       * @return boolean indicating whether or not the field is the selected entry
       *                            in an exclusive group.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean getGroupEntryIsSelectedByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isExclusiveGroupEntry) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getGroupEntryIsSelectedByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                isExclusiveGroupEntry.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getGroupEntryIsSelectedByIndex (fieldIndex, isExclusiveGroupEntry        );
            } finally {
                _releaseReply ($in);
            }
  } // getGroupEntryIsSelectedByIndex


  /**
       * Returns the field format specifier.  The format specifier indicates
       * the desired String format for field output and input.  See the
       * declaration of the field format constants above.
       *
       * @param fieldName  String name of the field.
       *
       * @return A 32-bit integer specifier of the field format.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public int getFormatByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFormatByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFormatByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // getFormatByName


  /**
       * Returns the field format specifier. The format specifier indicates
       * the desired String format for field output and input.  See the
       * declaration of the field format constants above.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return A 32-bit integer specifier of the field format.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  public int getFormatByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFormatByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFormatByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // getFormatByIndex


  /**
       * Returns true if this field is an array field with a fixed length.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if the field is of TYPE_BYTE_ARAY or TYPE_INT32_ARAY with a
       *         fixed array length; false if it can have any length.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY, BYTE_ARRAY.
       */
  public boolean isFixedLengthByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isFixedLengthByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isFixedLengthByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isFixedLengthByName


  /**
       * Returns true if this field is an array field with a fixed length.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return True if the field is of TYPE_BYTE_ARAY or TYPE_INT32_ARAY with a
       *         fixed array length; false if it can have any length.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY, BYTE_ARRAY.
       */
  public boolean isFixedLengthByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isFixedLengthByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isFixedLengthByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isFixedLengthByIndex


  /**
       * Returns true if the field is intended to contain an SE reference.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if the field is intended to contain an SE reference;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean isReferenceByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isReferenceByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isReferenceByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isReferenceByName


  /**
       * Returns true if the field is intended to contain an SE reference.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return True if the field is intended to contain an SE reference;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean isReferenceByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isReferenceByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isReferenceByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isReferenceByIndex


  /**
       * Applies to signed integer fields that represent counts. The value
       * may only be reset to zero.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if the field can only be set to the value 0;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean isResetOnlyByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isResetOnlyByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isResetOnlyByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isResetOnlyByName


  /**
       * Applies to signed integer fields that represent counts. The value
       * may only be reset to zero.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return True if the field can only be set to the value 0;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean isResetOnlyByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isResetOnlyByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isResetOnlyByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isResetOnlyByIndex


  /**
       * Care should be taken in exposing password fields as unmasked text to
       * users.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if the field contains a password;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean isPasswordByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isPasswordByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isPasswordByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isPasswordByName


  /**
       * Care should be taken in exposing password fields as unmasked text to
       * users.
       *
       * @param fieldIndex  Integer index of the field.
       *
       * @return True if the field contains a password;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean isPasswordByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isPasswordByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isPasswordByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isPasswordByIndex


  /**
       * All mandatory fields must be filled in before performing an APPLY action.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if the field is flagged as manadatory;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean isMandatoryByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isMandatoryByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isMandatoryByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isMandatoryByName


  /**
       * All mandatory fields must be filled in before performing an APPLY action.
       *
       * @param fieldIndex  Integer index of the field.
       *
       * @return True if the field is flagged as manadatory;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean isMandatoryByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isMandatoryByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isMandatoryByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isMandatoryByIndex


  /**
       * Returns true if any field value has been set since setModified was
       * last set to false; returns false if no field values have been set.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if any field has been modified since setModified was
       *         set to false; otherwise false.
       */
  public boolean isModified ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isModified", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isModified (        );
            } finally {
                _releaseReply ($in);
            }
  } // isModified


  /**
       * Indicates whether this is an index field.  If it is, then the value
       * is used in the construction of the SE's programmatic name.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if the field is an index field. False otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean isIndexByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isIndexByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isIndexByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isIndexByName


  /**
       * Indicates whether this is an index field.  If it is, then the value
       * is used in the construction of the SE's programmatic name.
       *
       * @param fieldIndex  Integer index of the field.
       *
       * @return True if the field is an index field. False otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  public boolean isIndexByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isIndexByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isIndexByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isIndexByIndex


  /**
       * Indicates whether this field is a reserved internal field.
       *
       * IMPORTANT: Users of the EMS CORBA API should not query or alter the
       * value of fields of this type in any way.  This is field
       * is reserved for internal system use only.
       *
       * @param fieldName  String name of this field.
       *
       * @return True if this is a reserved internal field; false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  public boolean isInternalByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isInternalByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isInternalByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isInternalByName


  /**
       * Indicates whether this field is a reserved internal field.
       *
       * IMPORTANT: Users of the EMS CORBA API should not query or alter the
       * value of fields of this type in any way.  This is field
       * is reserved for internal system use only.
       *
       * @param fieldIndex  Integer index of the field.
       *
       * @return True if this is a reserved internal field; false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  public boolean isInternalByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isInternalByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isInternalByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isInternalByIndex


  /**
       * Returns true if this field is a Switchable Default field.  Otherwise
       * returns false.  If the use-default flag is set and this is a
       * Switchable Default field, then the default value will be set and
       * returned by the setFieldAs*() and getFieldAs*() methods. Otherwise,
       * the specific value will be set and returned as normal.
       *
       * @param fieldName  String name of the field.
       *
       * @return boolean indicating whether or not the field is a Switchable
       *         Default.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean isSwitchableDefaultByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isSwitchableDefaultByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isSwitchableDefaultByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isSwitchableDefaultByName


  /**
       * Returns true if this field is a Switchable Default field.  Otherwise
       * returns false. If the use-default flag is set and this is a
       * Switchable Default field, then the default value will be set and
       * returned by the setFieldAs*() and getFieldAs*() methods. Otherwise,
       * the specific value will be set and returned as normal.
       *
       * @params fieldIndex Integer index of the field.
       *
       * @return boolean indicating whether or not the field is a Switchable
       *         Default.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean isSwitchableDefaultByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isSwitchableDefaultByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isSwitchableDefaultByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isSwitchableDefaultByIndex


  /**
       * Returns true if this field is the start of a clause.  Otherwise returns
       * false.
       *
       * A start-of-clause field and all consecutive fields up to the end-of-clause
       * field are only valid when the clause is actually selected.  The clause
       * selection is handled by the start-of-clause field.  See also
       * getClauseSelectedByName() and setClauseSelectedByName().
       *
       * Note that a field may be both the start-of-clause and end-of-clause.
       *
       * @param fieldName  String name of the field.
       *
       * @return boolean indicating whether or not the field is the start of a clause.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean isStartOfClauseByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isStartOfClauseByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isStartOfClauseByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isStartOfClauseByName


  /**
       * Returns true if this field is the start of a clause.  Otherwise returns
       * false.
       *
       * A start-of-clause field and all consecutive fields up to the end-of-clause
       * field are only valid when the clause is actually selected.  The clause
       * selection is handled by the start-of-clause field.  See also
       * getClauseSelectedByIndex() and setClauseSelectedByIndex().
       *
       * Note that a field may be both the start-of-clause and end-of-clause.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return boolean indicating whether or not the field is the start of a clause.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean isStartOfClauseByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isStartOfClauseByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isStartOfClauseByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isStartOfClauseByIndex


  /**
       * Returns true if this field is an assistant field.  Otherwise returns
       * false.
       *
       * Setting and adjusting an assistant field will result in fields being
       * set based on the assistant field. For example, on an Access Device
       * selecting and adjusting the "set fields from media gateway" assistant
       * field defaults the subsequent fields.
       *
       * @param fieldName  String name of the field.
       *
       * @return boolean indicating whether or not the field is an assistant field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean isAssistantFieldByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isAssistantFieldByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isAssistantFieldByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isAssistantFieldByName


  /**
       *
       * Returns true if this field is an assistant field.  Otherwise returns
       * false.
       *
       * Setting and adjusting an assistant field will result in fields being
       * set based on the assistant field. For example, on an Access Device
       * selecting and adjusting the "set fields from media gateway" assistant
       * field defaults the subsequent fields.
  
       * @param fieldIndex Integer index of the field.
       *
       * @return boolean indicating whether or not the field is an assistant field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean isAssistantFieldByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isAssistantFieldByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isAssistantFieldByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isAssistantFieldByIndex


  /**
       * Returns true if this field is the end of a clause.  Otherwise returns
       * false.
       *
       * An end-of-clause field and all previous, consecutive fields up to the
       * start-of-clause field are only valid when the clause is actually
       * selected.  The clause selection is handled by the start-of-clause field.
       * See also getClauseSelectedByName() and setClauseSelectedByName().
       *
       * Note that a field may be both the start-of-clause and end-of-clause.
       *
       * @param fieldName  String name of the field.
       *
       * @return boolean indicating whether or not the field is the end of a clause.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean isEndOfClauseByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isEndOfClauseByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isEndOfClauseByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isEndOfClauseByName


  /**
       * Returns true if this field is the end of a clause.  Otherwise returns
       * false.
       *
       * An end-of-clause field and all previous, consecutive fields up to the
       * start-of-clause field are only valid when the clause is actually
       * selected.  The clause selection is handled by the start-of-clause field.
       * See also getClauseSelectedByIndex() and setClauseSelectedByIndex().
       *
       * Note that a field may be both the start-of-clause and end-of-clause.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return boolean indicating whether or not the field is the end of a clause.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean isEndOfClauseByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isEndOfClauseByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isEndOfClauseByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isEndOfClauseByIndex


  /**
       * Returns true if this field is a member of an exclusive group.  Otherwise
       * returns false.
       *
       * An exclusive group is formed from the consecutive exclusive-group-entry
       * fields in the Settings, the only exception is for an upper-range-of-pair
       * field which does not need to mark itself as part of a group since that
       * is done by the corresponding lower-range-of-pair field.
       *
       * Only the selected group entry field is valid, and only one entry in each
       * group may be selected at any one time.  Setting a field as the selected
       * group entry will automatically deselect it from the other fields in the
       * group.  See also getGroupEntryIsSelectedByName() and
       * setGroupEntryIsSelectedByName().
       *
       * @param fieldName  String name of the field.
       *
       * @return boolean indicating whether or not the field is in an exclusive group.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean isExclusiveGroupEntryByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isExclusiveGroupEntryByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isExclusiveGroupEntryByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isExclusiveGroupEntryByName


  /**
       * Returns true if this field is a member of an exclusive group.  Otherwise
       * returns false.
       *
       * An exclusive group is formed from the consecutive exclusive-group-entry
       * fields in the Settings, the only exception is for an upper-range-of-pair
       * field which does not need to mark itself as part of a group since that
       * is done by the corresponding lower-range-of-pair field.
       *
       * Only the selected group entry field is valid, and only one entry in each
       * group may be selected at any one time.  Setting a field as the selected
       * group entry will automatically deselect it from the other fields in the
       * group.  See also getGroupEntryIsSelectedByIndex() and
       * setGroupEntryIsSelectedByIndex().
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return boolean indicating whether or not the field is in an exclusive group.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean isExclusiveGroupEntryByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isExclusiveGroupEntryByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isExclusiveGroupEntryByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isExclusiveGroupEntryByIndex


  /**
       * Returns true if this field is the lower-range of a pair of fields used
       * to configure a range of values.  Otherwise returns false.
       *
       * If this field is the lower-range of a pair, the next field in the
       * Settings will be the corresponding upper-range of pair.
       *
       * When a range field is also a member of an exclusive group, then both the
       * lower and upper range fields are bound together as a single group entry.
       * The selection of the group entry is handled by the lower range field and
       * not by the upper range field.
       *
       * @param fieldName  String name of the field.
       *
       * @return boolean indicating whether or not the field is the lower range
       *                 of a pair of range fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean isLowerRangeOfPairByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isLowerRangeOfPairByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isLowerRangeOfPairByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isLowerRangeOfPairByName


  /**
       * Returns true if this field is the lower-range of a pair of fields used
       * to configure a range of values.  Otherwise returns false.
       *
       * If this field is the lower-range of a pair, the next field in the
       * Settings will be the corresponding upper-range of pair.
       *
       * When a range field is also a member of an exclusive group, then both the
       * lower and upper range fields are bound together as a single group entry.
       * The selection of the group entry is handled by the lower range field and
       * not by the upper range field.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return boolean indicating whether or not the field is the lower range
       *                 of a pair of range fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean isLowerRangeOfPairByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isLowerRangeOfPairByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isLowerRangeOfPairByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isLowerRangeOfPairByIndex


  /**
       * Returns true if this field is the upper-range of a pair of fields used
       * to configure a range of values.  Otherwise returns false.
       *
       * If this field is the upper-range of a pair, the previous field in the
       * Settings will be the corresponding lower-range of pair.
       *
       * When a range field is also a member of an exclusive group, then both the
       * lower and upper range fields are bound together as a single group entry.
       * The selection of the group entry is handled by the lower range field and
       * not by the upper range field.
       *
       * @param fieldName  String name of the field.
       *
       * @return boolean indicating whether or not the field is the upper range
       *                 of a pair of range fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean isUpperRangeOfPairByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isUpperRangeOfPairByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isUpperRangeOfPairByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isUpperRangeOfPairByName


  /**
       * Returns true if this field is the upper-range of a pair of fields used
       * to configure a range of values.  Otherwise returns false.
       *
       * If this field is the upper-range of a pair, the previous field in the
       * Settings will be the corresponding lower-range of pair.
       *
       * When a range field is also a member of an exclusive group, then both the
       * lower and upper range fields are bound together as a single group entry.
       * The selection of the group entry is handled by the lower range field and
       * not by the upper range field.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return boolean indicating whether or not the field is the upper range
       *                 of a pair of range fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public boolean isUpperRangeOfPairByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isUpperRangeOfPairByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isUpperRangeOfPairByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isUpperRangeOfPairByIndex


  /**
       * Returns true if all index fields have been assigned a value.
       *
       * @param fieldName  If the return value is false, this out parameter
       *                   holds the name of the first unassigned
       *                   index field. Otherwise its value is null.
       *
       * @return True if all index fields have been assigned a value,
       *         or if no index fields have been registered.
       */
  public boolean checkIndexFieldsAssignedByName (org.omg.CORBA.StringHolder fieldName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("checkIndexFieldsAssignedByName", true);
                $out.write_string (fieldName.value);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                fieldName.value = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return checkIndexFieldsAssignedByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // checkIndexFieldsAssignedByName


  /**
       * Returns true if all index fields have been assigned a value.
       *
       * @param fieldIndex If the return value is false, this out parameter
       *                   holds the index of the first unassigned
       *                   index field. Otherwise its value is -1.
       *
       * @return True if all index fields have been assigned a value,
       *         or if no index fields have been registered.
       */
  public boolean checkIndexFieldsAssignedByIndex (org.omg.CORBA.IntHolder fieldIndex)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("checkIndexFieldsAssignedByIndex", true);
                $out.write_long (fieldIndex.value);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                fieldIndex.value = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return checkIndexFieldsAssignedByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // checkIndexFieldsAssignedByIndex


  /**
       * Returns true if all registered mandatory fields have been assigned
       *
       * @param  fieldName  If the return value is false, this out parameter
       *                    holds the field name of the first unassigned
       *                    index field. Otherwise its value is null.
       *
       * @return True if all registered mandatory fields have been assigned a
       *         value, or if no mandatory fields have been registered.
       */
  public boolean checkMandatoryFieldsAssignedByName (org.omg.CORBA.StringHolder fieldName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("checkMandatoryFieldsAssignedByName", true);
                $out.write_string (fieldName.value);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                fieldName.value = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return checkMandatoryFieldsAssignedByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // checkMandatoryFieldsAssignedByName


  /**
       * Returns true if all registered mandatory fields have been assigned
       *
       * @param  fieldIndex If the return value is false, this out parameter
       *                    holds the field index of the first unassigned
       *                    index field. Otherwise its value is -1.
       *
       * @return True if all registered mandatory fields have been assigned a
       *         value, or if no mandatory fields have been registered.
       */
  public boolean checkMandatoryFieldsAssignedByIndex (org.omg.CORBA.IntHolder fieldIndex)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("checkMandatoryFieldsAssignedByIndex", true);
                $out.write_long (fieldIndex.value);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                fieldIndex.value = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return checkMandatoryFieldsAssignedByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // checkMandatoryFieldsAssignedByIndex


  /**
       * Returns true if the named field has been modified since
       * setModified(false) was last invoked.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if the field has been modified; false otherwise
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean isFieldModifiedByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isFieldModifiedByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isFieldModifiedByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isFieldModifiedByName


  /**
       * Returns true if the indexed field has been modified since
       * setModified(false) was last invoked.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return True if the field has been modified; false otherwise
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  public boolean isFieldModifiedByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isFieldModifiedByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isFieldModifiedByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isFieldModifiedByIndex


  /**
       * Returns the minimum value of an integer range field.
       *
       * @param fieldName  String name of the field.
       *
       * @return The minimum (inclusive) value of an integer range field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  public int getMinRangeByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getMinRangeByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getMinRangeByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // getMinRangeByName


  /**
       * Returns the minimum value of an integer range field.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return The minimum (inclusive) value of an integer range field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  public int getMinRangeByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getMinRangeByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getMinRangeByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // getMinRangeByIndex


  /**
       * Returns the maximum value of an integer range field.
       *
       * @param fieldName  String name of the field.
       *
       * @return The maximum (inclusive) value of an integer range field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  public int getMaxRangeByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getMaxRangeByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getMaxRangeByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // getMaxRangeByName


  /**
       * Returns the maximum value of an integer range field.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return The maximum (inclusive) value of an integer range field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  public int getMaxRangeByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getMaxRangeByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getMaxRangeByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // getMaxRangeByIndex


  /**
       * Returns the minimum value of an integer range field as a String.
       *
       * @param fieldName  String name of the field.
       *
       * @return The minimum (inclusive) value of an integer range field as a
       *         String, taking into account the field format specifier.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  public String getMinRangeAsStringByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getMinRangeAsStringByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getMinRangeAsStringByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // getMinRangeAsStringByName


  /**
       * Returns the minimum value of an integer range field as a String.
       *
       * @param fieldIndex  Integer index of the field.
       *
       * @return The minimum (inclusive) value of an integer range field as a
       *         String, taking into account the field format specifier.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  public String getMinRangeAsStringByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getMinRangeAsStringByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getMinRangeAsStringByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // getMinRangeAsStringByIndex


  /**
       * Returns the maximum value of an integer range field as a String.
       *
       * @param fieldName  String name of the field.
       *
       * @return The maximum (inclusive) value of an integer range field as a
       *         String, taking into account the field format specifier.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  public String getMaxRangeAsStringByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getMaxRangeAsStringByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getMaxRangeAsStringByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // getMaxRangeAsStringByName


  /**
       * Returns the maximum value of an integer range field as a String.
       *
       * @param  fieldIndex  Integer index of the field.
       *
       * @return The maximum (inclusive) value of an integer range field as a
       *         String, taking into account the field format specifier.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  public String getMaxRangeAsStringByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getMaxRangeAsStringByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getMaxRangeAsStringByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // getMaxRangeAsStringByIndex


  /**
       * Returns the maximum length of a STRING or ARRAY field type.
       *
       * @param  fieldName String name of the field.
       *
       * @return The maximum character length of a STRING or ARRAY field type.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: STRING, INT32_ARRAY, BYTE_ARRAY.
       **/
  public int getMaxLengthByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getMaxLengthByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getMaxLengthByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // getMaxLengthByName


  /**
       * Returns the maximum length of a STRING or ARRAY field type.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return The maximum character length of a STRING or ARRAY field type.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field does not exist in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: STRING, INT32_ARRAY, BYTE_ARRAY.
       **/
  public int getMaxLengthByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getMaxLengthByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getMaxLengthByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // getMaxLengthByIndex


  /**
       * Returns the field type specifier.  See the declaration of the field type
       * constants above.
       *
       * @param  fieldName String name of the field.
       *
       * @return The field type specifier. One of the following: INT32, STRING,
       *         BOOLEAN, INT32_RANGE, INT32_MAP, INT_64, BYTE_ARRAY, BIT_MASK or
       *         INT32_ARRAY.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public int getTypeByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTypeByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTypeByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // getTypeByName


  /**
       * Returns the field type specifier.  See the declaration of the field type
       * constants above.
       *
       * @param  fieldIndex  Integer index of the field.
       *
       * @return The field type specifier. One of the following: TYPE_INT32,
       *         TYPE_INT64, TYPE_STRING, TYPE_BOOLEAN, TYPE_INT32_RANGE,
       *         TYPE_INT32_MAP, TYPE_BYTE_ARRAY, TYPE_BIT_MASK or
       *         TYPE_INT32_ARRAY
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public int getTypeByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTypeByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTypeByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // getTypeByIndex


  /**
       * Returns the state-dependent accessibility for a field.  See
       * getAccessFlagsByStateByIndex for more details.
       *
       * @param  fieldName String name of the field.
       *
       * @return Long containing state-dependent accessibility flags.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public int getAccessFlagsByStateByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAccessFlagsByStateByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAccessFlagsByStateByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // getAccessFlagsByStateByName


  /**
       * Returns the state-dependent accessibility for a field.  See the
       * "MetaSwitch Class 5 Softswitch: Integration and Customization manual"
       * for more details on security and access permissions.
       *
       * The value returned is a bit mask.  Each bit set indicates that the field
       * is readable or writeable.  The bits relating to each state are defined
       * by the STATE_ constants defined in the SEAccessInterface.  The bits
       * relating to read and write are defined by the ACCESS_READ_BITS and
       * ACCESS_WRITE_BITS constants respectively.
       *
       * So if the readability in the enabled state is required, perform a
       * logical and on the value returned by this method, the ACCESS_READ_BITS
       * and the STATE_ENABLED constants.  The resulting value is the most
       * inclusive possible access: the value should be logically and'd with the
       * access granted to the User Type.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return Long containing state-dependent accessibility information.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public int getAccessFlagsByStateByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAccessFlagsByStateByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAccessFlagsByStateByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // getAccessFlagsByStateByIndex


  /**
       * Describes the read/write privileges granted to each User Type.  See the
       * getAccessFlagsByGroupByIndex method for more details.
       *
       * @param fieldName   String name of the field.
       *
       * @return 64-bit     integer containing the accessFlags assigned to each
       *                    User group. See the MetaSwitch Class 5 Softswitch:
       *                    Integration and Customization manual for more
       *                    details.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                    Thrown if the specified field is not registered in
       *                    the Settings.
       */
  public long getAccessFlagsByGroupByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAccessFlagsByGroupByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                long $result = $in.read_longlong ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAccessFlagsByGroupByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // getAccessFlagsByGroupByName


  /**
       * Returns the User Type-dependent accessibility for a field.  See the
       * "MetaSwitch Class 5 Softswitch: Integration and Customization manual"
       * for more details on security and access permissions.
       *
       * The value returned is a bit mask.  Each bit set indicates that the field
       * is readable or writeable for that particular User Type.  The bits
       * relating to each User Type are defined by the USER_TYPE_ constants
       * defined in the SEAccessInterface.  The bits relating to read and write
       * are defined by the ACCESS_READ_BITS and ACCESS_WRITE_BITS constants
       * respectively.
       *
       * So if the readability for the Super User is required, perform a logical
       * and on the value returned by this method, the ACCESS_READ_BITS and the
       * USER_TYPE_SUPERUSER constants.  The resulting value is the most
       * inclusive possible access: the value should be logically and'd with the
       * access granted in each SE activation state.
       *
       * @param fieldIndex
       *                    Integer index of the field.
       *
       * @return 64-bit     integer containing the accessFlags assigned to each
       *                    User group. See the MetaSwitch Class 5 Softswitch:
       *                    Integration and Customization manual for more
       *                    details.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                    Thrown if the specified field is not registered in
       *                    the Settings.
       */
  public long getAccessFlagsByGroupByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAccessFlagsByGroupByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                long $result = $in.read_longlong ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAccessFlagsByGroupByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // getAccessFlagsByGroupByIndex


  /**
       * Returns the current field accessibility as determined by the SE's state
       * and the client session's permissions.  See getCurrentAccessByIndex for
       * more details.
       *
       * @param  fieldName String name of the field.
       *
       * @return Long detailing the current access permissions.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public int getCurrentAccessByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getCurrentAccessByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getCurrentAccessByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // getCurrentAccessByName


  /**
       * Returns the current field accessibility as determined by the SE's state
       * and the client session's permissions.  Field access is expressed by
       * three bits: a read bit (see IS_READABLE), a write bit (see IS_WRITEABLE)
       * and a visibility bit (see IS_VISIBLE).  If the respective bit is set
       * it indicates that the field is readable/writeable/visible.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return Long detailing the current access permissions.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public int getCurrentAccessByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getCurrentAccessByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getCurrentAccessByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // getCurrentAccessByIndex


  /**
       * Provides the current SE's activation state.  For more details see
       * the "MetaSwitch Class 5 Softswitch: Integration and Customization
       * manual".
       *
       * @return Long with the value of STATE_CREATING, STATE_ENABLED or
       *         STATE_DISABLED.
       */
  public int getState ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getState", true);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getState (        );
            } finally {
                _releaseReply ($in);
            }
  } // getState


  /**
       * Returns a boolean indicating field visibility.  See the
       * getCurrentAccessByIndex method and the declaration of IS_VISIBLE
       * for more details.
       *
       * @param  fieldName String name of the field.
       *
       * @return true if the field is currently visible to a user
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean isVisibleByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isVisibleByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isVisibleByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // isVisibleByName


  /**
       * Returns a boolean indicating field visibility.  See the
       * getCurrentAccessByIndex method and the declaration of IS_VISIBLE
       * for more details.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return true if the field is currently visible to a user
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean isVisibleByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isVisibleByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isVisibleByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // isVisibleByIndex


  /**
       * Returns the units of measurement for this field in the form of an NLSIID.
       *
       * @param  fieldName String name of the field.
       *
       * @return Integer representation of the field's units.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public int getUnitsByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getUnitsByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getUnitsByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // getUnitsByName


  /**
       * Returns the units of measurement for this field in the form of an NLSIID.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return String representation of the field's units.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public int getUnitsByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getUnitsByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getUnitsByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // getUnitsByIndex


  /**
       * Returns true if the field provides an array of possible values.
       *
       * @param  fieldName String name of the field.
       *
       * @return True if the field can return a string array of possible values
       *         from a call to getPossibleValuesAsStrings. False otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean hasPossibleValuesByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("hasPossibleValuesByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return hasPossibleValuesByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // hasPossibleValuesByName


  /**
       * Returns true if the field provides an array of possible values.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return True if the field can return a string array of possible values
       *         from a call to getPossibleValuesAsStrings. False otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean hasPossibleValuesByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("hasPossibleValuesByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return hasPossibleValuesByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // hasPossibleValuesByIndex


  /**
       * Returns true if the field has a registered AdjustmentProvider.
       *
       * @param  fieldName String name of the field.
       *
       * @return True if the field has a registered AdjustmentProvider.
       *         The implication of this being true is that changing the value
       *         of this field has a knock on effect on other fields.
       *         False otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean hasAdjustmentsByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("hasAdjustmentsByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return hasAdjustmentsByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // hasAdjustmentsByName


  /**
       * Returns true if the field has a registered AdjustmentProvider.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return True if the field has a registered AdjustmentProvider.
       *         The implication of this being true is that changing the value
       *         of this field has a knock on effect on other fields.
       *         False otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean hasAdjustmentsByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("hasAdjustmentsByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return hasAdjustmentsByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // hasAdjustmentsByIndex


  /**
       * Returns a String array containing the string values that map to
       * internal numerical values in mapping and bit-mask fields.
       *
       * @param  fieldName String name of the field.
       *
       * @return A string array of external values for BIT_MASK and INT32_MAP
       *         fields. These are the human-readable "keys" that map to internal
       *         programmatic values.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_MAP or BIT_MASK.
       */
  public String[] getExternalStringValuesByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getExternalStringValuesByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                String $result[] = com.Metaswitch.MVS.Corba.SequenceOfNamesHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getExternalStringValuesByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // getExternalStringValuesByName


  /**
       * Returns a String array containing the string values that map to
       * internal numerical values in mapping and bit-mask fields.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return A string array of external values for BIT_MASK and INT32_MAP
       *         fields. These are the human-readable "keys" that map to internal
       *         programmatic values.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_MAP or BIT_MASK.
       */
  public String[] getExternalStringValuesByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getExternalStringValuesByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                String $result[] = com.Metaswitch.MVS.Corba.SequenceOfNamesHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getExternalStringValuesByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // getExternalStringValuesByIndex


  /**
       * Returns a copy of the array of internal programmatic values for a
       * integer mapping field.
       *
       * @param  fieldName String name of the field.
       *
       * @return A SequenceOfIntegers of internal values for an INT32_MAP field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_MAP.
       */
  public int[] getInternalIntValuesByName (String name) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getInternalIntValuesByName", true);
                $out.write_string (name);
                $in = _invoke ($out);
                int $result[] = com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getInternalIntValuesByName (name        );
            } finally {
                _releaseReply ($in);
            }
  } // getInternalIntValuesByName


  /**
       * Returns a copy of the array of internal programmatic values for a
       * integer mapping field.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return A SequenceOfIntegers of internal values for an INT32_MAP field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_MAP.
       */
  public int[] getInternalIntValuesByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getInternalIntValuesByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                int $result[] = com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getInternalIntValuesByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // getInternalIntValuesByIndex


  /**
       * Returns a String array containing the possible values for a field.
       *
       * @param  fieldName String of the field name.
       * @param  filter    String representing a filter for selecting values.
       *                   The filter must have been returned from a previous
       *                   invocation of this method. Set to the empty string
       *                   to have this parameter ignored.
       * @param  maxValues Maximum number of possible values to return.
       * @param  moreValues  BooleanHolder out parameter that returns true if
       *                   there are more possible values to be displayed.
       *                   False otherwise.
       * @param  hasFilters  BooleanHolder out parameter that returns true if
       *                   the returned String array includes filter values.
       *                   False otherwise.
       * @param  numEntries  IntHolder out parameter that returns the actual
       *                   number of returned elements.
       * @param  whyNoValues  StringHolder out parameter that optionally returns
       *                   an NLS string indicating why there are no possible
       *                   values.  Only valid if numEntries is zero.  Note that
       *                   this may not be filled in even if numEntries is zero.
       *
       * @return A DualString array of possible values for this field. If
       *         hasFilters is false, the DualStrings contain possible
       *         values for the field. If hasFilters is true, the
       *         DualStrings contain filters (wildcards) representing a number of
       *         possible values.  To expand these filters, invoke this method
       *         again, supplying a filter as a parameter.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldNoRegisteredPVPException
       *                   Thrown if no possible values provider has been
       *                   registered for this field.
       * @throws ElementDeletedException
       *                   Thrown if the underlying element has been deleted.
       * @throws ElementOperationFailedException
       *                   Thrown if a non-specific failure occurs.
       * @throws LockTimeoutException
       *                   Thrown if this operation takes too long.
       * @throws InvalidFilterException
       *                   Thrown if the filter suppled is not valid. This is
       *                   not expected if the filter was returned on a previous
       *                   call to this method for the same field.
       * @throws InvalidNameException
       *                   See SEExceptions.idl.
       * @throws ElementUnavailableException
       *                   Thrown if the underlying element is not available;
       *                   usually due to a communications failure.
       * @throws ElementBrokenException
       *                   Thrown if the element is in an inconsistent state.
       */
  public com.Metaswitch.MVS.Corba.DualString[] getPossibleValuesAsStringsByName (String fieldName, String filter, int maxValues, org.omg.CORBA.BooleanHolder moreValues, org.omg.CORBA.BooleanHolder hasFilters, org.omg.CORBA.IntHolder numEntries, org.omg.CORBA.StringHolder whyNoValues) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldNoRegisteredPVPException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.LockTimeoutException, com.Metaswitch.MVS.Corba.InvalidFilterException, com.Metaswitch.MVS.Corba.InvalidNameException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPossibleValuesAsStringsByName", true);
                $out.write_string (fieldName);
                $out.write_string (filter);
                $out.write_long (maxValues);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.DualString $result[] = com.Metaswitch.MVS.Corba.SequenceOfDualStringsHelper.read ($in);
                moreValues.value = $in.read_boolean ();
                hasFilters.value = $in.read_boolean ();
                numEntries.value = $in.read_long ();
                whyNoValues.value = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldNoRegisteredPVPException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNoRegisteredPVPExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:LockTimeoutException:1.0"))
                    throw com.Metaswitch.MVS.Corba.LockTimeoutExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidFilterException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidFilterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidNameException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidNameExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementBrokenException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementBrokenExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPossibleValuesAsStringsByName (fieldName, filter, maxValues, moreValues, hasFilters, numEntries, whyNoValues        );
            } finally {
                _releaseReply ($in);
            }
  } // getPossibleValuesAsStringsByName


  /**
       * Returns a String array containing the possible values for a field.
       *
       * @param  fieldIndex Integer index of the field.
       * @param  filter    String representing a filter for selecting values.
       *                   The filter must have been returned from a previous
       *                   invocation of this method. Set to the empty string
       *                   to have this parameter ignored.
       * @param  maxValues Maximum number of possible values to return.
       * @param  moreValues  BooleanHolder out parameter that returns true if
       *                   there are more possible values to be displayed.
       *                   False otherwise.
       * @param  hasFilters  BooleanHolder out parameter that returns true if
       *                   the returned String array includes filter values.
       *                   False otherwise.
       * @param  numEntries  IntHolder out parameter that returns the actual
       *                   number of returned elements.
       * @param  whyNoValues  StringHolder out parameter that optionally returns
       *                   an NLS string indicating why there are no possible
       *                   values.  Only valid if numEntries is zero.  Note that
       *                   this may not be filled in even if numEntries is zero.
       *
       * @return A DualString array of possible values for this field. If
       *         hasFilters is false, the DualStrings contain possible
       *         values for the field. If hasFilters is true, the
       *         DualStrings contain filters (wildcards) representing a number of
       *         possible values.  To expand these filters, invoke this method
       *         again, supplying a filter as a parameter.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldNoRegisteredPVPException
       *                   Thrown if no possible values provider has been
       *                   registered for this field.
       * @throws ElementDeletedException
       *                   Thrown if the underlying element has been deleted.
       * @throws ElementOperationFailedException
       *                   Thrown if a non-specific failure occurs.
       * @throws LockTimeoutException
       *                   Thrown if this operation takes too long.
       * @throws InvalidFilterException
       *                   Thrown if the filter suppled is not valid. This is
       *                   not expected if the filter was returned on a previous
       *                   call to this method for the same field.
       * @throws InvalidNameException
       *                   See SEExceptions.idl.
       * @throws ElementUnavailableException
       *                   Thrown if the underlying element is not available;
       *                   usually due to a communications failure.
       * @throws ElementBrokenException
       *                   Thrown if the element is in an inconsistent state.
       */
  public com.Metaswitch.MVS.Corba.DualString[] getPossibleValuesAsStringsByIndex (int fieldIndex, String filter, int maxValues, org.omg.CORBA.BooleanHolder moreValues, org.omg.CORBA.BooleanHolder hasFilters, org.omg.CORBA.IntHolder numEntries, org.omg.CORBA.StringHolder whyNoValues) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldNoRegisteredPVPException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.LockTimeoutException, com.Metaswitch.MVS.Corba.InvalidFilterException, com.Metaswitch.MVS.Corba.InvalidNameException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPossibleValuesAsStringsByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_string (filter);
                $out.write_long (maxValues);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.DualString $result[] = com.Metaswitch.MVS.Corba.SequenceOfDualStringsHelper.read ($in);
                moreValues.value = $in.read_boolean ();
                hasFilters.value = $in.read_boolean ();
                numEntries.value = $in.read_long ();
                whyNoValues.value = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldNoRegisteredPVPException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNoRegisteredPVPExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:LockTimeoutException:1.0"))
                    throw com.Metaswitch.MVS.Corba.LockTimeoutExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidFilterException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidFilterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidNameException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidNameExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementBrokenException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementBrokenExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPossibleValuesAsStringsByIndex (fieldIndex, filter, maxValues, moreValues, hasFilters, numEntries, whyNoValues        );
            } finally {
                _releaseReply ($in);
            }
  } // getPossibleValuesAsStringsByIndex


  /**
       * Called after a previous call to getPossibleValuesAsStrings, this
       * returns the next "batch" of possible values for this field.
       *
       * @param  fieldName String of the field name.
       * @param  lastValue The last value in the sequence returned from a
       *                   previous invocation of getPossibleValuesAsStrings() or
       *                   getNextPossibleValuesAsStrings() which
       *                   indicated that there were more values to be returned.
       * @param  filter    String representing the filter used to select values,
       *                   returned from a previous invocation of this method.
       *                   Set to the empty string to have this parameter
       *                   ignored.
       * @param  maxValues Maximum number of possible values to return.
       * @param  moreValues  BooleanHolder out parameter that returns true if
       *                   there are more possible values to be displayed.
       * @param  hasFilters  BooleanHolder out parameter that returns true if
       *                   the returned String array includes filter values.
       * @param  numEntries  IntHolder out parameter, indicating the number of
       *                   possible values returned.
       * @param  whyNoValues  StringHolder out parameter that optionally returns
       *                   an NLS string indicating why there are no possible
       *                   values.  Only valid if numEntries is zero.  Note that
       *                   this may not be filled in even if numEntries is zero.
       *
       * @return A DualString array of possible values for this field. If
       *         hasFilters is false, the DualStrings contain possible
       *         values for the field. If hasFilters is true, the
       *         DualStrings contain filters (wildcards) representing a number of
       *         possible values.  To expand these filters, invoke this method
       *         again, supplying a filter as a parameter.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldNoRegisteredPVPException
       *                   Thrown if no possible values provider has been
       *                   registered for this field.
       * @throws ElementDeletedException
       *                   Thrown if the underlying element has been deleted.
       * @throws ElementOperationFailedException
       *                   Thrown if a non-specific failure occurs.
       * @throws LockTimeoutException
       *                   Thrown if this operation takes too long.
       * @throws InvalidFilterException
       *                   Thrown if the filter suppled is not valid. This is
       *                   not expected if the filter was returned on a previous
       *                   call to this method for the same field.
       * @throws InvalidNameException
       *                   See SEExceptions.idl.
       * @throws ElementUnavailableException
       *                   Thrown if the underlying element is not available;
       *                   usually due to a communications failure.
       * @throws ElementBrokenException
       *                   Thrown if the element is in an inconsistent state.
       */
  public com.Metaswitch.MVS.Corba.DualString[] getNextPossibleValuesAsStringsByName (String fieldName, String lastValue, String filter, int maxValues, org.omg.CORBA.BooleanHolder moreValues, org.omg.CORBA.BooleanHolder hasFilters, org.omg.CORBA.IntHolder numEntries, org.omg.CORBA.StringHolder whyNoValues) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldNoRegisteredPVPException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.LockTimeoutException, com.Metaswitch.MVS.Corba.InvalidFilterException, com.Metaswitch.MVS.Corba.InvalidNameException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getNextPossibleValuesAsStringsByName", true);
                $out.write_string (fieldName);
                $out.write_string (lastValue);
                $out.write_string (filter);
                $out.write_long (maxValues);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.DualString $result[] = com.Metaswitch.MVS.Corba.SequenceOfDualStringsHelper.read ($in);
                moreValues.value = $in.read_boolean ();
                hasFilters.value = $in.read_boolean ();
                numEntries.value = $in.read_long ();
                whyNoValues.value = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldNoRegisteredPVPException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNoRegisteredPVPExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:LockTimeoutException:1.0"))
                    throw com.Metaswitch.MVS.Corba.LockTimeoutExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidFilterException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidFilterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidNameException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidNameExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementBrokenException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementBrokenExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getNextPossibleValuesAsStringsByName (fieldName, lastValue, filter, maxValues, moreValues, hasFilters, numEntries, whyNoValues        );
            } finally {
                _releaseReply ($in);
            }
  } // getNextPossibleValuesAsStringsByName


  /**
       * Called after a previous call to getPossibleValuesAsStrings, this
       * returns the next "batch" of possible values for this field.
       *
       * @param  fieldIndex Integer index of the field.
       * @param  lastValue The last value in the sequence returned from a
       *                   previous invocation of getPossibleValuesAsStrings() or
       *                   getNextPossibleValuesAsStrings() which
       *                   indicated that there were more values to be returned.
       * @param  filter    String representing the filter used to select values,
       *                   returned from a previous invocation of this method.
       *                   Set to the empty string to have this parameter
       *                   ignored.
       * @param  maxValues Maximum number of possible values to return.
       * @param  moreValues  BooleanHolder out parameter that returns true if
       *                   there are more possible values to be displayed.
       * @param  hasFilters  BooleanHolder out parameter that returns true if
       *                   the returned String array includes filter values.
       * @param  numEntries  IntHolder out parameter, indicating the number of
       *                   possible values returned.
       * @param  whyNoValues  StringHolder out parameter that optionally returns
       *                   an NLS string indicating why there are no possible
       *                   values.  Only valid if numEntries is zero.  Note that
       *                   this may not be filled in even if numEntries is zero.
       *
       * @return A DualString array of possible values for this field. If
       *         hasFilters is false, the DualStrings contain possible
       *         values for the field. If hasFilters is true, the
       *         DualStrings contain filters (wildcards) representing a number of
       *         possible values.  To expand these filters, invoke this method
       *         again, supplying a filter as a parameter.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldNoRegisteredPVPException
       *                   Thrown if no possible values provider has been
       *                   registered for this field.
       * @throws ElementDeletedException
       *                   Thrown if the underlying element has been deleted.
       * @throws ElementOperationFailedException
       *                   Thrown if a non-specific failure occurs.
       * @throws LockTimeoutException
       *                   Thrown if this operation takes too long.
       * @throws InvalidFilterException
       *                   Thrown if the filter suppled is not valid. This is
       *                   not expected if the filter was returned on a previous
       *                   call to this method for the same field.
       * @throws InvalidNameException
       *                   See SEExceptions.idl.
       * @throws ElementUnavailableException
       *                   Thrown if the underlying element is not available;
       *                   usually due to a communications failure.
       * @throws ElementBrokenException
       *                   Thrown if the element is in an inconsistent state.
       */
  public com.Metaswitch.MVS.Corba.DualString[] getNextPossibleValuesAsStringsByIndex (int fieldIndex, String lastValue, String filter, int maxValues, org.omg.CORBA.BooleanHolder moreValues, org.omg.CORBA.BooleanHolder hasFilters, org.omg.CORBA.IntHolder numEntries, org.omg.CORBA.StringHolder whyNoValues) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldNoRegisteredPVPException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.LockTimeoutException, com.Metaswitch.MVS.Corba.InvalidFilterException, com.Metaswitch.MVS.Corba.InvalidNameException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getNextPossibleValuesAsStringsByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_string (lastValue);
                $out.write_string (filter);
                $out.write_long (maxValues);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.DualString $result[] = com.Metaswitch.MVS.Corba.SequenceOfDualStringsHelper.read ($in);
                moreValues.value = $in.read_boolean ();
                hasFilters.value = $in.read_boolean ();
                numEntries.value = $in.read_long ();
                whyNoValues.value = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldNoRegisteredPVPException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNoRegisteredPVPExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:LockTimeoutException:1.0"))
                    throw com.Metaswitch.MVS.Corba.LockTimeoutExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidFilterException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidFilterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidNameException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidNameExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementBrokenException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementBrokenExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getNextPossibleValuesAsStringsByIndex (fieldIndex, lastValue, filter, maxValues, moreValues, hasFilters, numEntries, whyNoValues        );
            } finally {
                _releaseReply ($in);
            }
  } // getNextPossibleValuesAsStringsByIndex


  /**
       * Prompt the Settings object to make adjustments to it's
       * fields, as dictated by any AdjustmentProvider registered
       * with the named field.
       *
       * @param  fieldName String name of the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean getAdjustmentsByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldNoRegisteredAPException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.LockTimeoutException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAdjustmentsByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldNoRegisteredAPException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNoRegisteredAPExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:LockTimeoutException:1.0"))
                    throw com.Metaswitch.MVS.Corba.LockTimeoutExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementBrokenException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementBrokenExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAdjustmentsByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // getAdjustmentsByName


  /**
       * Prompt the Settings object to make adjustments to it's
       * fields, as dictated by any AdjustmentProvider registered
       * with the named field.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public boolean getAdjustmentsByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldNoRegisteredAPException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.LockTimeoutException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAdjustmentsByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldNoRegisteredAPException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNoRegisteredAPExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:LockTimeoutException:1.0"))
                    throw com.Metaswitch.MVS.Corba.LockTimeoutExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementBrokenException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementBrokenExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAdjustmentsByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // getAdjustmentsByIndex


  /**
       * Returns a string array of field names registered with this
       * Settings object.
       *
       * @param  length IntHolder out parameter, indicating the number of
       *                elements in the return array.
       *
       * @return A string array of registered field names.
       */
  public String[] fieldNames (org.omg.CORBA.IntHolder length)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("fieldNames", true);
                $in = _invoke ($out);
                String $result[] = com.Metaswitch.MVS.Corba.SequenceOfNamesHelper.read ($in);
                length.value = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return fieldNames (length        );
            } finally {
                _releaseReply ($in);
            }
  } // fieldNames


  /**
       * Returns the number of fields registered with this Settings object.
       *
       * @return 32-bit integer containing the number of fields registered.
       */
  public int countFields ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("countFields", true);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return countFields (        );
            } finally {
                _releaseReply ($in);
            }
  } // countFields


  /**
       * Returns the display name of the field.
       *
       * @param  fieldName String name of the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public String getDisplayNameByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDisplayNameByName", true);
                $out.write_string (fieldName);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDisplayNameByName (fieldName        );
            } finally {
                _releaseReply ($in);
            }
  } // getDisplayNameByName


  /**
       * Returns the display name of the field.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public String getDisplayNameByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDisplayNameByIndex", true);
                $out.write_long (fieldIndex);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDisplayNameByIndex (fieldIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // getDisplayNameByIndex


  /**
       * Writes the Settings object to an octet array.
       *
       * @return  An octet array representation of the Settings object. The
       *          read() method can then be used to recreate the object.
       *
       * @throws  ReadWriteSettingsException
       *                   Thrown if an error occured writing the
       *                   object to a octet array
       */
  public byte[] write () throws com.Metaswitch.MVS.Corba.ReadWriteSettingsException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("write", true);
                $in = _invoke ($out);
                byte $result[] = com.Metaswitch.MVS.Corba.SequenceOfOctetsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ReadWriteSettingsException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ReadWriteSettingsExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return write (        );
            } finally {
                _releaseReply ($in);
            }
  } // write


  /**
       * Sets the field value using an integer argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then this
       * sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldName  String name of the field.
       * @params newValue   32-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32, INT32_MAP or INT32_RANGE.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setFieldAsIntByName (String fieldName, int newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldAsIntByName", true);
                $out.write_string (fieldName);
                $out.write_long (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldAsIntByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldAsIntByName


  /**
       * Sets the field value using an integer argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then this
       * sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   32-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32, INT32_MAP or INT32_RANGE.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setFieldAsIntByIndex (int fieldIndex, int newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldAsIntByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_long (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldAsIntByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldAsIntByIndex


  /**
       * Sets the named field value using a 64-bit integer argument. If
       * the field is a Switchable Default field, and the use-default
       * flag is set, then this sets the default value.  Otherwise it
       * sets the specific value.
       *
       * @params fieldName  String name of the field.
       * @params newValue   64-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT64.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setFieldAsLongByName (String fieldName, long newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldAsLongByName", true);
                $out.write_string (fieldName);
                $out.write_longlong (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldAsLongByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldAsLongByName


  /**
       * Sets the named field value using a 64-bit integer argument. If
       * the field is a Switchable Default field, and the use-default
       * flag is set, then this sets the default value.  Otherwise it
       * sets the specific value.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   64-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT64.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setFieldAsLongByIndex (int fieldIndex, long newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldAsLongByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_longlong (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldAsLongByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldAsLongByIndex


  /**
       * Sets the field value using a string argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldName String name of the field.
       * @params newValue  String containing the new value for the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadValueException
       *                   Thrown if the string cannot be parsed to
       *                   a valid value for this field.
       */
  public void setFieldAsStringByName (String fieldName, String newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldAsStringByName", true);
                $out.write_string (fieldName);
                $out.write_string (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldAsStringByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldAsStringByName


  /**
       * Sets the field value using a string argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue  String containing the new value for the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadValueException
       *                   Thrown if the string cannot be parsed to
       *                   a valid value for this field.
       */
  public void setFieldAsStringByIndex (int fieldIndex, String newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldAsStringByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_string (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldAsStringByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldAsStringByIndex


  /**
       * Set the field using a DualString argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @param fieldName  String name of the field.
       * @params newValue  DualString containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the isReference method returns false.
       * @throws FieldBadValueException
       *                   Thrown if the _internal_ string cannot be parsed to
       *                   a valid value for this field.
       */
  public void setFieldAsReferenceByName (String fieldName, com.Metaswitch.MVS.Corba.DualString newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldAsReferenceByName", true);
                $out.write_string (fieldName);
                com.Metaswitch.MVS.Corba.DualStringHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldAsReferenceByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldAsReferenceByName


  /**
       * Set the field using a DualString argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @param fieldIndex Integer index of the field.
       * @params newValue  DualString containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the isReference method returns false.
       * @throws FieldBadValueException
       *                   Thrown if the _internal_ string cannot be parsed to
       *                   a valid value for this field.
       */
  public void setFieldAsReferenceByIndex (int fieldIndex, com.Metaswitch.MVS.Corba.DualString newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldAsReferenceByIndex", true);
                $out.write_long (fieldIndex);
                com.Metaswitch.MVS.Corba.DualStringHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldAsReferenceByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldAsReferenceByIndex


  /**
       * Sets the field value using a boolean argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldName  String name of the field.
       * @params newValue   boolean used to set field value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BOOLEAN.
       */
  public void setFieldAsBooleanByName (String fieldName, boolean newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldAsBooleanByName", true);
                $out.write_string (fieldName);
                $out.write_boolean (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldAsBooleanByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldAsBooleanByName


  /**
       * Sets the field value using a boolean argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   boolean used to set field value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BOOLEAN.
       */
  public void setFieldAsBooleanByIndex (int fieldIndex, boolean newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldAsBooleanByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_boolean (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldAsBooleanByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldAsBooleanByIndex


  /**
       * Sets the field value using a byte array argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldName  String name of the field.
       * @params newValue   Byte array used to set the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BYTE_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the byte array does not contain
       *                   a valid value for this field.
       */
  public void setFieldAsByteArrayByName (String fieldName, byte[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldAsByteArrayByName", true);
                $out.write_string (fieldName);
                com.Metaswitch.MVS.Corba.SequenceOfOctetsHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldAsByteArrayByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldAsByteArrayByName


  /**
       * Sets the field value using a byte array argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   Byte array used to set the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BYTE_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the byte array does not contain
       *                   a valid value for this field.
       */
  public void setFieldAsByteArrayByIndex (int fieldIndex, byte[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldAsByteArrayByIndex", true);
                $out.write_long (fieldIndex);
                com.Metaswitch.MVS.Corba.SequenceOfOctetsHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldAsByteArrayByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldAsByteArrayByIndex


  /**
       * Sets the field value using a SequenceOfIntegers argument. If the
       * field is a Switchable Default field, and the use-default flag is
       * set, then this sets the default value.  Otherwise it sets the
       * specific value.
       *
       * @params fieldName  String name of the field.
       * @params newValue   A SequenceOfIntegers (array of 32-bit integers)
       *                    used to set field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the integer array does not contain
       *                   a valid value for this field.
       */
  public void setFieldAsIntArrayByName (String fieldName, int[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldAsIntArrayByName", true);
                $out.write_string (fieldName);
                com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldAsIntArrayByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldAsIntArrayByName


  /**
       * Sets the field value using a SequenceOfIntegers argument. If the
       * field is a Switchable Default field, and the use-default flag is
       * set, then this sets the default value.  Otherwise it sets the
       * specific value.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   A SequenceOfIntegers (array of 32-bit integers)
       *                    used to set field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the integer array does not contain
       *                   a valid value for this field.
       */
  public void setFieldAsIntArrayByIndex (int fieldIndex, int[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldAsIntArrayByIndex", true);
                $out.write_long (fieldIndex);
                com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldAsIntArrayByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldAsIntArrayByIndex


  /**
       * Sets the field value using an integer argument.
       *
       * @params fieldName  String name of the field.
       * @params newValue   32-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32, INT32_MAP or INT32_RANGE.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setSpecificValueAsIntByName (String fieldName, int newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSpecificValueAsIntByName", true);
                $out.write_string (fieldName);
                $out.write_long (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSpecificValueAsIntByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setSpecificValueAsIntByName


  /**
       * Sets the field value using an integer argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   32-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32, INT32_MAP or INT32_RANGE.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setSpecificValueAsIntByIndex (int fieldIndex, int newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSpecificValueAsIntByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_long (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSpecificValueAsIntByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setSpecificValueAsIntByIndex


  /**
       * Sets the named field value using a 64-bit integer argument.
       *
       * @params fieldName  String name of the field.
       * @params newValue   64-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT64.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setSpecificValueAsLongByName (String fieldName, long newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSpecificValueAsLongByName", true);
                $out.write_string (fieldName);
                $out.write_longlong (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSpecificValueAsLongByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setSpecificValueAsLongByName


  /**
       * Sets the named field value using a 64-bit integer argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   64-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT64.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setSpecificValueAsLongByIndex (int fieldIndex, long newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSpecificValueAsLongByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_longlong (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSpecificValueAsLongByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setSpecificValueAsLongByIndex


  /**
       * Sets the field value using a string argument.
       *
       * @params fieldName String name of the field.
       * @params newValue  String containing the new value for the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadValueException
       *                   Thrown if the string cannot be parsed to
       *                   a valid value for this field.
       */
  public void setSpecificValueAsStringByName (String fieldName, String newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSpecificValueAsStringByName", true);
                $out.write_string (fieldName);
                $out.write_string (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSpecificValueAsStringByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setSpecificValueAsStringByName


  /**
       * Sets the field value using a string argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue  String containing the new value for the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadValueException
       *                   Thrown if the string cannot be parsed to
       *                   a valid value for this field.
       */
  public void setSpecificValueAsStringByIndex (int fieldIndex, String newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSpecificValueAsStringByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_string (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSpecificValueAsStringByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setSpecificValueAsStringByIndex


  /**
       * Set the field using a DualString argument.
       *
       * @param fieldName  String name of the field.
       * @params newValue  DualString containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the isReference method returns false.
       * @throws FieldBadValueException
       *                   Thrown if the _internal_ string cannot be parsed to
       *                   a valid value for this field.
       */
  public void setSpecificValueAsReferenceByName (String fieldName, com.Metaswitch.MVS.Corba.DualString newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSpecificValueAsReferenceByName", true);
                $out.write_string (fieldName);
                com.Metaswitch.MVS.Corba.DualStringHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSpecificValueAsReferenceByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setSpecificValueAsReferenceByName


  /**
       * Set the field using a DualString argument.
       *
       * @param fieldIndex Integer index of the field.
       * @params newValue  DualString containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the isReference method returns false.
       * @throws FieldBadValueException
       *                   Thrown if the _internal_ string cannot be parsed to
       *                   a valid value for this field.
       */
  public void setSpecificValueAsReferenceByIndex (int fieldIndex, com.Metaswitch.MVS.Corba.DualString newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSpecificValueAsReferenceByIndex", true);
                $out.write_long (fieldIndex);
                com.Metaswitch.MVS.Corba.DualStringHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSpecificValueAsReferenceByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setSpecificValueAsReferenceByIndex


  /**
       * Sets the field value using a boolean argument.
       *
       * @params fieldName  String name of the field.
       * @params newValue   boolean used to set field value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BOOLEAN.
       */
  public void setSpecificValueAsBooleanByName (String fieldName, boolean newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSpecificValueAsBooleanByName", true);
                $out.write_string (fieldName);
                $out.write_boolean (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSpecificValueAsBooleanByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setSpecificValueAsBooleanByName


  /**
       * Sets the field value using a boolean argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   boolean used to set field value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BOOLEAN.
       */
  public void setSpecificValueAsBooleanByIndex (int fieldIndex, boolean newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSpecificValueAsBooleanByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_boolean (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSpecificValueAsBooleanByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setSpecificValueAsBooleanByIndex


  /**
       * Sets the field value using a byte array argument.
       *
       * @params fieldName  String name of the field.
       * @params newValue   Byte array used to set the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BYTE_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the byte array does not contain
       *                   a valid value for this field.
       */
  public void setSpecificValueAsByteArrayByName (String fieldName, byte[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSpecificValueAsByteArrayByName", true);
                $out.write_string (fieldName);
                com.Metaswitch.MVS.Corba.SequenceOfOctetsHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSpecificValueAsByteArrayByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setSpecificValueAsByteArrayByName


  /**
       * Sets the field value using a byte array argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   Byte array used to set the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BYTE_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the byte array does not contain
       *                   a valid value for this field.
       */
  public void setSpecificValueAsByteArrayByIndex (int fieldIndex, byte[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSpecificValueAsByteArrayByIndex", true);
                $out.write_long (fieldIndex);
                com.Metaswitch.MVS.Corba.SequenceOfOctetsHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSpecificValueAsByteArrayByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setSpecificValueAsByteArrayByIndex


  /**
       * Sets the field value using a SequenceOfIntegers argument.
       *
       * @params fieldName  String name of the field.
       * @params newValue   A SequenceOfIntegers (array of 32-bit integers)
       *                    used to set field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the integer array does not contain
       *                   a valid value for this field.
       */
  public void setSpecificValueAsIntArrayByName (String fieldName, int[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSpecificValueAsIntArrayByName", true);
                $out.write_string (fieldName);
                com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSpecificValueAsIntArrayByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setSpecificValueAsIntArrayByName


  /**
       * Sets the field value using a SequenceOfIntegers argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   A SequenceOfIntegers (array of 32-bit integers)
       *                    used to set field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the integer array does not contain
       *                   a valid value for this field.
       */
  public void setSpecificValueAsIntArrayByIndex (int fieldIndex, int[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSpecificValueAsIntArrayByIndex", true);
                $out.write_long (fieldIndex);
                com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSpecificValueAsIntArrayByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setSpecificValueAsIntArrayByIndex


  /**
       * Sets the field's default value using an 32-bit integer argument.
       *
       * @params fieldName  String name of the field.
       * @params newValue   32-bit integer used to set the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setDefaultAsIntByName (String fieldName, int newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDefaultAsIntByName", true);
                $out.write_string (fieldName);
                $out.write_long (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDefaultAsIntByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setDefaultAsIntByName


  /**
       * Sets the field's default value using an 32-bit integer argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   32-bit integer used to set the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setDefaultAsIntByIndex (int fieldIndex, int newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDefaultAsIntByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_long (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDefaultAsIntByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setDefaultAsIntByIndex


  /**
       * Sets the field's default value using a 64-bit integer argument.
       *
       * @params fieldName  String name of the field.
       * @params newValue   64-bit integer used to set the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT64.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setDefaultAsLongByName (String fieldName, long newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDefaultAsLongByName", true);
                $out.write_string (fieldName);
                $out.write_longlong (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDefaultAsLongByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setDefaultAsLongByName


  /**
       * Sets the field's default value using a 64-bit integer argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   64-bit integer used to set the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT64.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setDefaultAsLongByIndex (int fieldIndex, long newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDefaultAsLongByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_longlong (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDefaultAsLongByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setDefaultAsLongByIndex


  /**
       * Sets the field's default value using a string argument.
       *
       * @params fieldName String name of the field.
       * @params newValue  String containing the new value for the default
       *                   value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadValueException
       *                   Thrown if the string cannot be parsed to
       *                   a valid value for this field.
       */
  public void setDefaultAsStringByName (String fieldName, String newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDefaultAsStringByName", true);
                $out.write_string (fieldName);
                $out.write_string (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDefaultAsStringByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setDefaultAsStringByName


  /**
       * Sets the field's default value using a string argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue  String containing the new value for the default
       *                   value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadValueException
       *                   Thrown if the string cannot be parsed to
       *                   a valid value for this field.
       */
  public void setDefaultAsStringByIndex (int fieldIndex, String newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDefaultAsStringByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_string (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDefaultAsStringByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setDefaultAsStringByIndex


  /**
       * Set the field's default value using a DualString argument.
       *
       * @param fieldName  String name of the field.
       * @params newValue  DualString containing the field's default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the isReference method returns false.
       * @throws FieldBadValueException
       *                   Thrown if the _internal_ string cannot be parsed to
       *                   a valid value for this field.
       */
  public void setDefaultAsReferenceByName (String fieldName, com.Metaswitch.MVS.Corba.DualString newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDefaultAsReferenceByName", true);
                $out.write_string (fieldName);
                com.Metaswitch.MVS.Corba.DualStringHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDefaultAsReferenceByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setDefaultAsReferenceByName


  /**
       * Set the field's default value using a DualString argument.
       *
       * @param fieldIndex Integer index of the field.
       * @params newValue  DualString containing the field's default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the isReference method returns false.
       * @throws FieldBadValueException
       *                   Thrown if the _internal_ string cannot be parsed to
       *                   a valid value for this field.
       */
  public void setDefaultAsReferenceByIndex (int fieldIndex, com.Metaswitch.MVS.Corba.DualString newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDefaultAsReferenceByIndex", true);
                $out.write_long (fieldIndex);
                com.Metaswitch.MVS.Corba.DualStringHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDefaultAsReferenceByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setDefaultAsReferenceByIndex


  /**
       * Sets the field's default value using a boolean argument.
       *
       * @params fieldName String name of the field.
       * @params newValue  Boolean used to set the field's default value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BOOLEAN.
       */
  public void setDefaultAsBooleanByName (String fieldName, boolean newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDefaultAsBooleanByName", true);
                $out.write_string (fieldName);
                $out.write_boolean (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDefaultAsBooleanByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setDefaultAsBooleanByName


  /**
       * Sets the field's default value using a boolean argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue  Boolean used to set the field's default value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BOOLEAN.
       */
  public void setDefaultAsBooleanByIndex (int fieldIndex, boolean newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDefaultAsBooleanByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_boolean (newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDefaultAsBooleanByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setDefaultAsBooleanByIndex


  /**
       * Sets the field's default value using a byte array argument.
       *
       * @params fieldName String name of the field.
       * @params newValue  Byte array used to set the field's default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BYTE_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setDefaultAsByteArrayByName (String fieldName, byte[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDefaultAsByteArrayByName", true);
                $out.write_string (fieldName);
                com.Metaswitch.MVS.Corba.SequenceOfOctetsHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDefaultAsByteArrayByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setDefaultAsByteArrayByName


  /**
       * Sets the field's default value using a byte array argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue  Byte array used to set the field's default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BYTE_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setDefaultAsByteArrayByIndex (int fieldIndex, byte[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDefaultAsByteArrayByIndex", true);
                $out.write_long (fieldIndex);
                com.Metaswitch.MVS.Corba.SequenceOfOctetsHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDefaultAsByteArrayByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setDefaultAsByteArrayByIndex


  /**
       * Sets the field's default value using a SequenceOfIntegers argument.
       *
       * @params fieldName String name of the field.
       * @params newValue  Byte array used to set the field's default value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setDefaultAsIntArrayByName (String fieldName, int[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDefaultAsIntArrayByName", true);
                $out.write_string (fieldName);
                com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDefaultAsIntArrayByName (fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setDefaultAsIntArrayByName


  /**
       * Sets the field's default value using a SequenceOfIntegers argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue  Byte array used to set the field's default value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  public void setDefaultAsIntArrayByIndex (int fieldIndex, int[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDefaultAsIntArrayByIndex", true);
                $out.write_long (fieldIndex);
                com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.write ($out, newValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDefaultAsIntArrayByIndex (fieldIndex, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // setDefaultAsIntArrayByIndex


  /**
       * Sets the modification flag for all registered fields to the state
       * provided.  When any field mutator method is successfully invoked the
       * isModified flag is set to true.
       *
       * @param state      Boolean state for all field's isModified flag.
       *                   Settings this to false means all fields will return
       *                   false from the isModified method.
       */
  public void setModified (boolean state)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setModified", true);
                $out.write_boolean (state);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setModified (state        );
            } finally {
                _releaseReply ($in);
            }
  } // setModified


  /**
       * Sets the modification flag for an individual field.  When this field's
       * value is set the modification flag is set to true.
       *
       * @param fieldName  String name of the field.
       * @param state      Boolean state for the field's isModified flag.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public void setFieldModifiedByName (String fieldName, boolean state) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldModifiedByName", true);
                $out.write_string (fieldName);
                $out.write_boolean (state);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldModifiedByName (fieldName, state        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldModifiedByName


  /**
       * Sets the modification flag for an individual field.  When this field's
       * value is set the modification flag is set to true.
       *
       * @param fieldIndex Integer index of the field.
       * @param state      Boolean state for the field's isModified flag.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  public void setFieldModifiedByIndex (int fieldIndex, boolean state) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFieldModifiedByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_boolean (state);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFieldModifiedByIndex (fieldIndex, state        );
            } finally {
                _releaseReply ($in);
            }
  } // setFieldModifiedByIndex


  /**
       * Sets the use-default flag for this field.  If the use-default flag
       * is set and this is a Switchable Default field, then the default value
       * will be set and returned by the setFieldAs*() and getFieldAs*() methods.
       * Otherwise, the specific value will be set and returned as normal.
       *
       * @param fieldName  String name of the field.
       *
       * @param useDefault If true, then the use-default flag is set
       *                   otherwise it is unset.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public void setUseDefaultFlagByName (String fieldName, boolean useDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setUseDefaultFlagByName", true);
                $out.write_string (fieldName);
                $out.write_boolean (useDefault);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setUseDefaultFlagByName (fieldName, useDefault        );
            } finally {
                _releaseReply ($in);
            }
  } // setUseDefaultFlagByName


  /**
       * Sets the use-default flag for this field.  If the use-default flag
       * is set and this is a Switchable Default field, then the default value
       * will be set and returned by the setFieldAs*() and getFieldAs*() methods.
       * Otherwise, the specific value will be set and returned as normal.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @param useDefault If true, then the use-default FLAG is set
       *                   otherwise it is unset.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public void setUseDefaultFlagByIndex (int fieldIndex, boolean useDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setUseDefaultFlagByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_boolean (useDefault);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setUseDefaultFlagByIndex (fieldIndex, useDefault        );
            } finally {
                _releaseReply ($in);
            }
  } // setUseDefaultFlagByIndex


  /**
       * Sets the clause selection for this field.  If this field is a start-of-
       * clause field and the clauseIsSelected parameter is set to true, then
       * this and all fields up to the end-of-clause field are valid (unless
       * restrictions apply).
       *
       * See also isStartOfClauseByName(), isEndOfClauseByName and
       * getClauseIsSelectedByName().
       *
       * @param fieldName  String name of the field.
       *
       * @param clauseIsSelected Boolean state for the fields clause-selected flag.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public void setClauseIsSelectedByName (String fieldName, boolean clauseIsSelected) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setClauseIsSelectedByName", true);
                $out.write_string (fieldName);
                $out.write_boolean (clauseIsSelected);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setClauseIsSelectedByName (fieldName, clauseIsSelected        );
            } finally {
                _releaseReply ($in);
            }
  } // setClauseIsSelectedByName


  /**
       * Sets the clause selection for this field.  If this field is a start-of-
       * clause field and the clauseIsSelected parameter is set to true, then
       * this and all fields up to the end-of-clause field are valid (unless
       * restrictions apply).
       *
       * See also isStartOfClauseByIndex(), isEndOfClauseByIndex and
       * getClauseIsSelectedByIndex().
       *
       * @param fieldIndex Integer index of the field.
       *
       * @param clauseIsSelected Boolean state for the fields clause-selected flag.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public void setClauseIsSelectedByIndex (int fieldIndex, boolean clauseIsSelected) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setClauseIsSelectedByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_boolean (clauseIsSelected);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setClauseIsSelectedByIndex (fieldIndex, clauseIsSelected        );
            } finally {
                _releaseReply ($in);
            }
  } // setClauseIsSelectedByIndex


  /**
       * Sets the group entry selection for this field.  If this field is an
       * exclusive group entry and the entryIsSelected parameter is set to true,
       * then this field becomes the selected entry in the group and all other
       * entries in the group will be automatically deselected.  If this field is
       * an exclusive group entry and the entryIsSelected parameter is set to
       * false, then this field will be deselected.
       *
       * Only the selected member of an exclusive group is valid at any one time.
       *
       * See also isExclusiveGroupEntryByName() and
       * getGroupEntryIsSelectedByName().
       *
       * @param fieldName  String name of the field.
       *
       * @param entryIsSelected Boolean state for the fields
       *                        group-entry-selected flag.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public void setGroupEntryIsSelectedByName (String fieldName, boolean entryIsSelected) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setGroupEntryIsSelectedByName", true);
                $out.write_string (fieldName);
                $out.write_boolean (entryIsSelected);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setGroupEntryIsSelectedByName (fieldName, entryIsSelected        );
            } finally {
                _releaseReply ($in);
            }
  } // setGroupEntryIsSelectedByName


  /**
       * Sets the group entry selection for this field.  If this field is an
       * exclusive group entry and the entryIsSelected parameter is set to true,
       * then this field becomes the selected entry in the group and all other
       * entries in the group will be automatically deselected.  If this field is
       * an exclusive group entry and the entryIsSelected parameter is set to
       * false, then this field will be deselected.
       *
       * Only the selected member of an exclusive group is valid at any one time.
       *
       * See also isExclusiveGroupEntryByIndex() and
       * getGroupEntryIsSelectedByIndex().
       *
       * @param fieldIndex Integer index of the field.
       *
       * @param entryIsSelected Boolean state for the fields
       *                        group-entry-selected flag.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  public void setGroupEntryIsSelectedByIndex (int fieldIndex, boolean entryIsSelected) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setGroupEntryIsSelectedByIndex", true);
                $out.write_long (fieldIndex);
                $out.write_boolean (entryIsSelected);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setGroupEntryIsSelectedByIndex (fieldIndex, entryIsSelected        );
            } finally {
                _releaseReply ($in);
            }
  } // setGroupEntryIsSelectedByIndex


  /**
       * Reads field configuration information from a byte array.
       *
       * @param  buffer    An octet array representation of the Settings object,
       *                   as produced by the write() method.
       *
       * @throws ReadWriteSettingsException
       *                   Thrown if an error occured reading the
       *                   object from an octet array.
       */
  public void read (byte[] buffer) throws com.Metaswitch.MVS.Corba.ReadWriteSettingsException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("read", true);
                com.Metaswitch.MVS.Corba.SequenceOfOctetsHelper.write ($out, buffer);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ReadWriteSettingsException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ReadWriteSettingsExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                read (buffer        );
            } finally {
                _releaseReply ($in);
            }
  } // read

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:SettingsUserInterface:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _SettingsUserInterfaceStub
