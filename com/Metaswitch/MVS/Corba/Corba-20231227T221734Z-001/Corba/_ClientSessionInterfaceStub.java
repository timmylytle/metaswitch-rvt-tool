package com.Metaswitch.MVS.Corba;


/**
* com/Metaswitch/MVS/Corba/_ClientSessionInterfaceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ClientSessionInterface.idl
* Thursday, June 18, 2020 8:33:04 PM CDT
*/


/**
 * The ClientSessionInterface provides methods for managing the client's
 * session.  The session is terminated when one of the following occurs:
 * - the client application invokes the logout method;
 * - a fixed timeout period expires;
 * - another EMS user changes the details of the EMS user account associated
 * with this client session.
 */
public class _ClientSessionInterfaceStub extends org.omg.CORBA.portable.ObjectImpl implements com.Metaswitch.MVS.Corba.ClientSessionInterface
{


  /**
     * Queries the client's privileges on the EMS Server.  See the "MetaSwitch
     * Class 5 Softswitch: Operations Manual" for more details on User security
     * and privileges.
     *
     * @return The client's privileges.
     **/
  public long getPrivileges ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPrivileges", true);
                $in = _invoke ($out);
                long $result = $in.read_longlong ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPrivileges (        );
            } finally {
                _releaseReply ($in);
            }
  } // getPrivileges


  /**
     * Provides a string that identifies this client session.  The string is
     * unique on this EMS Server and will not be repeated until the server is
     * restarted.
     *
     * @return  String identifier of this client session.
     **/
  public String getSessionID ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSessionID", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSessionID (        );
            } finally {
                _releaseReply ($in);
            }
  } // getSessionID


  /**
     * Terminates this client session.  This interface, and all interfaces
     * returned by it, are no longer valid and will throw exceptions if
     * methods are invoked on them.
     **/
  public void logout ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("logout", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                logout (        );
            } finally {
                _releaseReply ($in);
            }
  } // logout


  /**
     * Client sessions expire after a fixed timeout period (returned by
     * getTimeoutPeriod).  This method resets the timer associated with this
     * session.
     *
     * @throws ElementOperationFailedException  If this method is called after
     * the client session has expired.
     **/
  public void keepAlive () throws com.Metaswitch.MVS.Corba.ElementOperationFailedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("keepAlive", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                keepAlive (        );
            } finally {
                _releaseReply ($in);
            }
  } // keepAlive


  /**
     * Client sessions expire a fixed timeout period after the last call to the
     * keepAlive method.  This method returns the length of that timeout period.
     *
     * @return The timeout period in milliseconds.
     **/
  public long getTimeoutPeriod ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTimeoutPeriod", true);
                $in = _invoke ($out);
                long $result = $in.read_longlong ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTimeoutPeriod (        );
            } finally {
                _releaseReply ($in);
            }
  } // getTimeoutPeriod


  /**
     * Obtains a reference to an SEAccessFactoryInterface that can be used to
     * obtain SEAccessInterface objects.
     *
     * @return  SEAccessFactoryInterface object reference.
     **/
  public com.Metaswitch.MVS.Corba.SEAccessFactoryInterface getSEAccessFactory ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSEAccessFactory", true);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.SEAccessFactoryInterface $result = com.Metaswitch.MVS.Corba.SEAccessFactoryInterfaceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSEAccessFactory (        );
            } finally {
                _releaseReply ($in);
            }
  } // getSEAccessFactory


  /**
     * Attempts to set the password of the EMS User account associated with
     * this client session.  This method can only be called if this client
     * session was returned from a userLogin; it cannot be called after an
     * applicationLogin.
     *
     * @param  String containing the new password. The password must be 6, 7,
     *         or 8 characters in length.
     *
     * @throws ElementUnavailableException      See SEExceptions.idl.
     * @throws ElementOperationFailedException  See SEExceptions.idl.
     * @throws FieldBadValueException  Thrown if the new password is not a
     *         valid string of 6, 7 or 8 characters in length.
     **/
  public void setPassword (String newPassword) throws com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setPassword", true);
                $out.write_string (newPassword);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setPassword (newPassword        );
            } finally {
                _releaseReply ($in);
            }
  } // setPassword


  /**
     * Associates this client session with a specific National Language Specific
     * locale.  If successful, all display strings are returned as human-readable
     * NLS-interpreted strings rather than non-readable NLS-enabled string.
     *
     * This method must be called before getSEAccessFactory.  This method should
     * not be called more than once.
     *
     * @param  The language parameter is a valid ISO Language Code. These codes
     *         are the lower-case two-letter codes as defined by ISO-639.
     * @param  The country parameter is a valid ISO Country Code. These codes are
     *         the upper-case two-letter codes as defined by ISO-3166.
     *
     * @throws FieldBadValueException  If the language or country parameters is
     *         not a recognized code.
     **/
  public void setNLSLocale (String language, String country) throws com.Metaswitch.MVS.Corba.FieldBadValueException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setNLSLocale", true);
                $out.write_string (language);
                $out.write_string (country);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FieldBadValueException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadValueExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setNLSLocale (language, country        );
            } finally {
                _releaseReply ($in);
            }
  } // setNLSLocale


  /**
     * Indicates which specific National Language Specific locale is
     * associated with this client session.
     *
     * @param language  String holder that is returned with the ISO Language Code
     *                  of the set locale.  If setNLSLocale has not previously
     *                  been called, a zero-length string will be returned.
     * @param country  String holder that is returned with the ISO Country Code
     *                  of the set locale.  If setNLSLocale has not previously
     *                  been called, a zero-length string will be returned.
     **/
  public void getNLSLocale (org.omg.CORBA.StringHolder language, org.omg.CORBA.StringHolder country)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getNLSLocale", true);
                $in = _invoke ($out);
                language.value = $in.read_string ();
                country.value = $in.read_string ();
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getNLSLocale (language, country        );
            } finally {
                _releaseReply ($in);
            }
  } // getNLSLocale


  /**
     * Each invocation of createsSEAccess returns an identical, generic
     * SEAccessInterface instance; this instance only becomes associated with a
     * specific SE as a result of subsequent method invocations on the
     * SEAccessInterface.  The client application is obliged to call the destroy
     * method on the SEAccessInterface when it has finished using it.
     *
     * @return SEAccessInterface instance.
     *
     * @throws ElementOperationFailedException  If the request failed for any
     *   reason, for example if the EMS Server does not have enough memory to
     *   complete the request.  See SEExceptions.idl.
     */
  public com.Metaswitch.MVS.Corba.SEAccessInterface createSEAccess () throws com.Metaswitch.MVS.Corba.ElementOperationFailedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createSEAccess", true);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.SEAccessInterface $result = com.Metaswitch.MVS.Corba.SEAccessInterfaceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return createSEAccess (        );
            } finally {
                _releaseReply ($in);
            }
  } // createSEAccess


  /**
     * Returns the time of the last successful login in UTC.
     *
     * This method is only valid on ClientSessions returned by userLogin or
     * userLoginWithNewPassword.  For ClientSessions returned by
     * applicationLogin, this method returns 0.
     *
     * @returns the time of last login in UTC
     */
  public int getLastLogin ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getLastLogin", true);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getLastLogin (        );
            } finally {
                _releaseReply ($in);
            }
  } // getLastLogin


  /**
     * Returns information about the password, e.g. whether it expires or not.
     *
     * This method is only valid on ClientSessions returned by userLogin or
     * userLoginWithNewPassword.  For ClientSessions returned by
     * applicationLogin, this method returns PASSWORD_FLAG_NEVER_EXPRIES.
     *
     * @returns flags about the password.
     */
  public int getPasswordFlags ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPasswordFlags", true);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPasswordFlags (        );
            } finally {
                _releaseReply ($in);
            }
  } // getPasswordFlags


  /**
     * If the password expires (see getPasswordFlags), returns the number of days
     * until the password expires.
     *
     * This method is only valid on ClientSessions returned by userLogin or
     * userLoginWithNewPassword.  For ClientSessions returned by
     * applicationLogin, this method returns 0.
     *
     * @returns days until the password expires
     */
  public int getDaysToPasswordExpiry ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDaysToPasswordExpiry", true);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDaysToPasswordExpiry (        );
            } finally {
                _releaseReply ($in);
            }
  } // getDaysToPasswordExpiry


  /**
     * The number of failed logins since the last successful login.
     *
     * This method is only valid on ClientSessions returned by userLogin or
     * userLoginWithNewPassword.  For ClientSessions returned by
     * applicationLogin, this method returns 0.
     *
     * @returns the number of failed logins since the last successful login.
     */
  public int getFailedLogins ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFailedLogins", true);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFailedLogins (        );
            } finally {
                _releaseReply ($in);
            }
  } // getFailedLogins


  /**
     * Any message associated with the login.  For instance, this may be a
     * message passed back from a RADIUS server, if that is configured.
     *
     * This method is only valid on ClientSessions returned by userLogin or
     * userLoginWithNewPassword.  For ClientSessions returned by
     * applicationLogin, this method returns 0.
     *
     * @returns a message to display to the user.
     */
  public String getLoginMessage ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getLoginMessage", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getLoginMessage (        );
            } finally {
                _releaseReply ($in);
            }
  } // getLoginMessage


  /**
     * Gets log information for a specific log from the EMS.  If the log
     * is not found, then a LogNotFoundException is thrown.  If the log is
     * found, text is returned as human-readable NLS-interpreted strings
     * rather than non-readable NLS-enabled string.
     *
     * @return   A LogInformation structure containing the log information
     *           requested.
     *
     * @param  metaSwitchUID  The unique identifier for the MetaSwitch on which
     *                        the log was raised.  The value to use is the
     *                        - "MetaSwitch unique identifier" in the MetaSwitch
     *                          element, for elements on the MetaSwitch
     *                        - "EMS unique identifier" in the EMS element, for
     *                          elements on the EMS.
     * @param  logCorrelator  The log correlator, which identifies the log on the
     *                        specified MetaSwitch.
     * @param  timeToWaitForLog
     *                        How long (in seconds) to wait for the log to be
     *                        found, if it is not instantly available.  May be
     *                        zero.
     *
     * @throws LogNotFoundException
     *                        If the log could not be found.
     */
  public com.Metaswitch.MVS.Corba.LogInformation getLogInformation (String metaSwitchUID, long logCorrelator, int timeToWaitForLog) throws com.Metaswitch.MVS.Corba.LogNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getLogInformation", true);
                $out.write_string (metaSwitchUID);
                $out.write_longlong (logCorrelator);
                $out.write_long (timeToWaitForLog);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.LogInformation $result = com.Metaswitch.MVS.Corba.LogInformationHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:LogNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.LogNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getLogInformation (metaSwitchUID, logCorrelator, timeToWaitForLog        );
            } finally {
                _releaseReply ($in);
            }
  } // getLogInformation


  /**
     * Tells the log collector to get all logs from all log sources that have
     * been raised.  This method is used to obtain logs that the user knows have
     * been raised (e.g.  because there is a correlator value in an alarm log
     * correlator field) but have not yet been 'collected' as the timer that
     * governs this collection has not yet popped to indicate that log collection
     * should happen.  This method invokes the collection asynchronously so the
     * logs may still not be available immediately it returns but should be
     * shortly afterwards.
     *
     * @throws ElementOperationFailedException
     */
  public void getLogs () throws com.Metaswitch.MVS.Corba.ElementOperationFailedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getLogs", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getLogs (        );
            } finally {
                _releaseReply ($in);
            }
  } // getLogs


  /**
     * Get the details of the Cluster Site which has the Leader in it.
     *
     * @param ipAddress String holder that is returned with the IP address of
     *                  the leader site.
     *
     * @param siteName String holder that is returned with the name of the leader
     *                 site.
     *
     * @param siteID The ID of the leader site.
     */
  public void getLeaderSiteMVS (org.omg.CORBA.StringHolder ipAddress, org.omg.CORBA.StringHolder siteName, org.omg.CORBA.IntHolder siteID) throws com.Metaswitch.MVS.Corba.ElementOperationFailedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getLeaderSiteMVS", true);
                $in = _invoke ($out);
                ipAddress.value = $in.read_string ();
                siteName.value = $in.read_string ();
                siteID.value = $in.read_long ();
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getLeaderSiteMVS (ipAddress, siteName, siteID        );
            } finally {
                _releaseReply ($in);
            }
  } // getLeaderSiteMVS


  /**
    * Checks to see Session Controller (Perimeta) Management is enabled.
    *
    * @return Whether Session Controller (Perimeta) Management is enabled.
    */
  public boolean isSessionControllerManagementEnabled ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isSessionControllerManagementEnabled", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isSessionControllerManagementEnabled (        );
            } finally {
                _releaseReply ($in);
            }
  } // isSessionControllerManagementEnabled

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ClientSessionInterface:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _ClientSessionInterfaceStub
