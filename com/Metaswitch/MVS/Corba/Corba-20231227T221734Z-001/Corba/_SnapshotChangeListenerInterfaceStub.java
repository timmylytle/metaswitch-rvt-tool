package com.Metaswitch.MVS.Corba;


/**
* com/Metaswitch/MVS/Corba/_SnapshotChangeListenerInterfaceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from SnapshotChangeListenerInterface.idl
* Thursday, June 18, 2020 8:33:05 PM CDT
*/

public class _SnapshotChangeListenerInterfaceStub extends org.omg.CORBA.portable.ObjectImpl implements com.Metaswitch.MVS.Corba.SnapshotChangeListenerInterface
{


  /**
     * Called by the SEAccess to notify the implementing object of a change in
     * the SE's state.
     *
     * @param source     SEAccessInterface with which this
     *                   SnapshotChangeListenerInterface was registered.
     * @param fundamental  If true, any outstanding changes to the
     *                   SettingsUserInterface object currently held by the
     *                   SEAccessInterface user, will be rejected with
     *                   ElementChangedException if an action is performed.
     *                   This is because another user has significantly changed
     *                   the SE's state.  If false, actions may be performed
     *                   without an calling getSnapshot.
     **/
  public void newSnapshotAvailable (com.Metaswitch.MVS.Corba.SEAccessInterface source, boolean fundamental)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("newSnapshotAvailable", true);
                com.Metaswitch.MVS.Corba.SEAccessInterfaceHelper.write ($out, source);
                $out.write_boolean (fundamental);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                newSnapshotAvailable (source, fundamental        );
            } finally {
                _releaseReply ($in);
            }
  } // newSnapshotAvailable

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:SnapshotChangeListenerInterface:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _SnapshotChangeListenerInterfaceStub
