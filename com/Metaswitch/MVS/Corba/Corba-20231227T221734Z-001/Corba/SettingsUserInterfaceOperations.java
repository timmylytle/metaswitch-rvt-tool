package com.Metaswitch.MVS.Corba;


/**
* com/Metaswitch/MVS/Corba/SettingsUserInterfaceOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from SettingsUserInterface.idl
* Thursday, June 18, 2020 8:33:03 PM CDT
*/


/**
 * The SettingsUserInterface provides the client application with methods to:
 * enumerate fields; obtain detailed type information that describes each of
 * the fields including ranges, units and default values; get and set field
 * values; query lists of possible values for fields.
 */
public interface SettingsUserInterfaceOperations 
{

  /**
       * Returns a 32-bit integer representation of the field value. If the
       * field is a Switchable Default field, and the use-default flag is set,
       * then this returns the default value.  Otherwise this returns the specific
       * value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned Boolean out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A 32-bit integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown when fieldName could not be mapped to the
       *                   name of a field in the settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE  and
       *                   INT32_ARRAY field types.
       */
  int getFieldAsIntByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a 32-bit integer representation of the field value. If the
       * field is a Switchable Default field, and the use-default flag is set,
       * then this returns the default value.  Otherwise this returns the specific
       * value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned Boolean out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A 32-bit integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown when fieldIndex could not be mapped to a
       *                   field in the settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE  and
       *                   INT32_ARRAY field types.
       */
  int getFieldAsIntByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a 64-bit long integer representation of the field value.If the
       * field is a Switchable Default field, and the use-default flag is set,
       * then this returns the default value.  Otherwise this returns the specific
       * value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A long integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT64.
       */
  long getFieldAsLongByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a 64-bit long integer representation of the field value. If the
       * field is a Switchable Default field, and the use-default flag is set,
       * then this returns the default value.  Otherwise this returns the specific
       * value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A long integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT64.
       */
  long getFieldAsLongByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a String representation of the field value. If the field
       * is a Switchable Default field, and the use-default flag is set,
       * then this returns the default value.  Otherwise this returns the
       * specific value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A String representation of the field value. All field types
       *         can be represented as a String.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  String getFieldAsStringByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns a String representation of the field value. If the field
       * is a Switchable Default field, and the use-default flag is set,
       * then this returns the default value.  Otherwise this returns the
       * specific value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A String representation of the field value. All field types
       *         can be represented as a String.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  String getFieldAsStringByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns a DualString representation of the field value. The _internal_
       * field contains the elementName. The _display_ field contains the
       * displayName as either NLS text or plain text depending on whether
       * setNLSLocale has been called on the ClientSessionInterface.
       * If the field is a Switchable Default field, and the use-default
       * flag is set, then this returns the default value.  Otherwise this
       * returns the specific value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A DualString representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException if the isReference method returns false.
       */
  com.Metaswitch.MVS.Corba.DualString getFieldAsReferenceByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a DualString representation of the field value. The _internal_
       * field contains the elementName. The _display_ field contains the
       * displayName as either NLS text or plain text depending on whether
       * setNLSLocale has been called on the ClientSessionInterface.
       * If the field is a Switchable Default field, and the use-default
       * flag is set, then this returns the default value.  Otherwise this
       * returns the specific value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A DualString representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException if the isReference method returns false.
       */
  com.Metaswitch.MVS.Corba.DualString getFieldAsReferenceByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a boolean representation of the field value. If the field is
       * a Switchable Default field, and the use-default flag is set, then this
       * returns the default value.  Otherwise this returns the specific value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A boolean representation of the field value. Valid for BOOLEAN
       *         and parseable STRING fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BOOLEAN & some parseable STRINGs.
       */
  boolean getFieldAsBooleanByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a boolean representation of the field value. If the field is
       * a Switchable Default field, and the use-default flag is set, then this
       * returns the default value.  Otherwise this returns the specific value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A boolean representation of the field value. Valid for BOOLEAN
       *         and parseable STRING fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BOOLEAN & some parseable STRINGs.
       */
  boolean getFieldAsBooleanByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a byte array representation of the field value. If the field is
       * a Switchable Default field, and the use-default flag is set, then this
       * returns the default value.  Otherwise this returns the specific value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return An octet array representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BYTE_ARRAY.
       */
  byte[] getFieldAsByteArrayByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a byte array representation of the field value. If the field is
       * a Switchable Default field, and the use-default flag is set, then this
       * returns the default value.  Otherwise this returns the specific value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return An octet array representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BYTE_ARRAY.
       */
  byte[] getFieldAsByteArrayByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a SequenceOfIntegers representation of the field value.
       * If the field is a Switchable Default field, and the use-default
       * flag is set, then this returns the default value.  Otherwise this
       * returns the specific value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A SequenceOfIntegers representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY.
       */
  int[] getFieldAsIntArrayByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a SequenceOfIntegers representation of the field value.
       * If the field is a Switchable Default field, and the use-default
       * flag is set, then this returns the default value.  Otherwise this
       * returns the specific value.
       *
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   Returns false if the field is a Switchable default
       *                   with the use-default flag is not assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A SequenceOfIntegers representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY.
       */
  int[] getFieldAsIntArrayByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a 32-bit integer representation of the field value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned Boolean out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A 32-bit integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown when fieldName could not be mapped to the
       *                   name of a field in the settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE  and
       *                   INT32_ARRAY field types.
       */
  int getSpecificValueAsIntByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a 32-bit integer representation of the field value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned Boolean out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A 32-bit integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown when fieldIndex could not be mapped to a
       *                   field in the settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE  and
       *                   INT32_ARRAY field types.
       */
  int getSpecificValueAsIntByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a 64-bit long integer representation of the field value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A long integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT64.
       */
  long getSpecificValueAsLongByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a 64-bit long integer representation of the field value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A long integer representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT64.
       */
  long getSpecificValueAsLongByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a String representation of the field value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A String representation of the field value. All field types
       *         can be represented as a String.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  String getSpecificValueAsStringByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns a String representation of the field value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A String representation of the field value. All field types
       *         can be represented as a String.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  String getSpecificValueAsStringByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns a DualString representation of the field value. The _internal_
       * field contains the elementName. The _display_ field contains the
       * displayName as either NLS text or plain text depending on whether
       * setNLSLocale has been called on the ClientSessionInterface.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A DualString representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException if the isReference method returns false.
       */
  com.Metaswitch.MVS.Corba.DualString getSpecificValueAsReferenceByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a DualString representation of the field value. The _internal_
       * field contains the elementName. The _display_ field contains the
       * displayName as either NLS text or plain text depending on whether
       * setNLSLocale has been called on the ClientSessionInterface.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A DualString representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException if the isReference method returns false.
       */
  com.Metaswitch.MVS.Corba.DualString getSpecificValueAsReferenceByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a boolean representation of the field value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A boolean representation of the field value. Valid for BOOLEAN
       *         and parseable STRING fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BOOLEAN & some parseable STRINGs.
       */
  boolean getSpecificValueAsBooleanByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a boolean representation of the field value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A boolean representation of the field value. Valid for BOOLEAN
       *         and parseable STRING fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BOOLEAN & some parseable STRINGs.
       */
  boolean getSpecificValueAsBooleanByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a byte array representation of the field value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return An octet array representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BYTE_ARRAY.
       */
  byte[] getSpecificValueAsByteArrayByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a byte array representation of the field value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return An octet array representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BYTE_ARRAY.
       */
  byte[] getSpecificValueAsByteArrayByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a SequenceOfIntegers representation of the field value.
       *
       * @param fieldName  String name of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A SequenceOfIntegers representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY.
       */
  int[] getSpecificValueAsIntArrayByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a SequenceOfIntegers representation of the field value.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A SequenceOfIntegers representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY.
       */
  int[] getSpecificValueAsIntArrayByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns an 32-bit integer representation of the field default value.
       *
       * @param fieldName  String name of the field.
       * @param hasDefault BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A 32-bit integer representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE and
       *                   INT32_ARRAY.
       *
       */
  int getDefaultAsIntByName (String fieldName, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns an 32-bit integer representation of the field default value.
       *
       * @param fieldIndex Integer index of the field.
       * @param hasDefault BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A 32-bit integer representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE and
       *                   INT32_ARRAY.
       *
       */
  int getDefaultAsIntByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a 64-bit long representation of the field default value.
       *
       * @param fieldName  String name of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored
       *
       * @return A 64-bit long integer representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT64.
       */
  long getDefaultAsLongByName (String fieldName, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a 64-bit long representation of the field default value.
       *
       * @param fieldIndex Integer index of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored
       *
       * @return A 64-bit long integer representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT64.
       */
  long getDefaultAsLongByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a String representation of the field default value.
       * All field types can be represented as a String.
       *
       * @param fieldName  String name of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A String representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  String getDefaultAsStringByName (String fieldName, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns a String representation of the field default value.
       * All field types can be represented as a String.
       *
       * @param fieldIndex Integer index of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A String representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  String getDefaultAsStringByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns a DualString representation of the field default value. The
       * _internal_ field contains the elementName. The _display_ field contains
       * the displayName as either NLS text or plain text depending on whether
       * setNLSLocale has been called on the ClientSessionInterface.
       *
       * @param fieldName  String name of the field.
       * @param hasDefault BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has a default.
       *                   If false, the returned value should be ignored.
       *
       * @return A DualString representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException if the isReference method returns false.
       */
  com.Metaswitch.MVS.Corba.DualString getDefaultAsReferenceByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a DualString representation of the field value. The _internal_
       * field contains the elementName. The _display_ field contains the
       * displayName as either NLS text or plain text depending on whether
       * setNLSLocale has been called on the ClientSessionInterface.
       *
       * @param fieldIndex Integer index of the field.
       * @param isAssigned BooleanHolder out parameter, indicating whether
       *                   or not the value of the field has been assigned.
       *                   If false, the returned value should be ignored.
       *
       * @return A DualString representation of the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException if the isReference method returns false.
       */
  com.Metaswitch.MVS.Corba.DualString getDefaultAsReferenceByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a boolean representation of the field default value.
       *
       * @param fieldName  String name of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A boolean representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BOOLEAN and parseable STRING fields.
       */
  boolean getDefaultAsBooleanByName (String fieldName, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a boolean representation of the field default value.
       *
       * @param fieldIndex Integer index of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A boolean representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BOOLEAN and parseable STRING fields.
       */
  boolean getDefaultAsBooleanByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a byte array representation of the field default value.
       *
       * @param fieldName  String name of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A byte array representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BYTE_ARRAY.
       */
  byte[] getDefaultAsByteArrayByName (String fieldName, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a byte array representation of the field default value.
       *
       * @param fieldIndex Integer index of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A byte array representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: BYTE_ARRAY.
       */
  byte[] getDefaultAsByteArrayByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a SequenceOfIntegers representation of the field default value.
       *
       * @param fieldName  String name of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A SequenceOfIntegers representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY.
       */
  int[] getDefaultAsIntArrayByName (String fieldName, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a SequenceOfIntegers representation of the field default value.
       *
       * @param fieldIndex Integer index of the field.
       * @param hasDefault BooleanHolder in/out parameter, indicating whether
       *                   or not the field has a valid default value. If false,
       *                   the return value should be ignored.
       *
       * @return A SequenceOfIntegers representation of the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY.
       */
  int[] getDefaultAsIntArrayByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder hasDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns true if the use-default flag is set for this field.  Otherwise
       * returns false.  If the use-default flag is set and this is a Switchable
       * Default field, then the default value will be set and returned by the
       * setFieldAs*() and getFieldAs*() methods.  Otherwise, the specific value
       * will be set and returned as normal.
       *
       * @param fieldName  String name of the field.
       *
       * @param isAssigned  BooleanHolder out parameter, indicating whether
       *                            the use default flag is assigned.  This will
       *                            always be returned false for non-switchable
       *                            default fields.  If false, the return value
       *                            should be ignored.
       *
       * @return boolean indicating whether or not the field is using
       * the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean getUseDefaultFlagByName (String fieldName, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if the use-default flag is set for this field.  Otherwise
       * returns false. If the use-default flag is set and this is a Switchable
       * Default field, then the default value will be set and returned by the
       * setFieldAs*() and getFieldAs*() methods.  Otherwise, the specific value
       * will be set and returned as normal.
       *
       * @param fieldIndex string field index
       *
       * @param isAssigned  BooleanHolder out parameter, indicating whether
       *                            the use default flag is assigned.  This will
       *                            always be returned false for non-switchable
       *                            default fields.  If false, the return value
       *                            should be ignored.
       *
       * @return boolean indicating whether or not the field is using
       * the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean getUseDefaultFlagByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isAssigned) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if the field is a start of clause field for which the
       * clause has been selected.  Otherwise returns false.
       *
       * If the clause is selected, then this and all consecutive fields upto and
       * including the end-of-clause field are valid.  If the clause is not
       * selected then these fields are not valid.
       *
       * See also isStartOfClauseByName(), isEndOfClauseByName and
       * setClauseIsSelectedByName().
       *
       * @param fieldName  String name of the field.
       *
       * @param isStartOfClause BooleanHolder out parameter, indicating whether
       *                            the field is a start of clause.  If false,
       *                            the return value should be ignored.
       *
       * @return boolean indicating whether or not the field has the clause selected.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean getClauseIsSelectedByName (String fieldName, org.omg.CORBA.BooleanHolder isStartOfClause) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if the field is a start of clause field for which the
       * clause has been selected.  Otherwise returns false.
       *
       * If the clause is selected, then this and all consecutive fields upto and
       * including the end-of-clause field are valid.  If the clause is not
       * selected then these fields are not valid.
       *
       * See also isStartOfClauseByIndex(), isEndOfClauseByIndex and
       * setClauseIsSelectedByIndex().
       *
       * @param fieldIndex Integer index of the field.
       *
       * @param isStartOfClause BooleanHolder out parameter, indicating whether
       *                            the field is a start of clause.  If false,
       *                            the return value should be ignored.
       *
       * @return boolean indicating whether or not the field has the clause selected.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean getClauseIsSelectedByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isStartOfClause) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is the selected entry in an exclusive group.
       * Otherwise returns false.  If this field is also a lower range
       * field of a range pair, then the corresponding upper range field is
       * assumed to be selected and deselected at the same time as this field.
       *
       * See isExclusiveGroupEntryByName() for more details.
       *
       * @param fieldName  String name of the field.
       *
       * @param isExclusiveGroupEntry BooleanHolder out parameter, indicating whether
       *                            the field is in an exclusive group.  If false,
       *                            the return value should be ignored.
       *
       * @return boolean indicating whether or not the field is the selected entry
       *                            in an exclusive group.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean getGroupEntryIsSelectedByName (String fieldName, org.omg.CORBA.BooleanHolder isExclusiveGroupEntry) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is the selected entry in an exclusive group.
       * Otherwise returns false.  If this field is also a lower range
       * field of a range pair, then the corresponding upper range field is
       * assumed to be selected and deselected at the same time as this field.
       *
       * See isExclusiveGroupEntryByIndex() for more details.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @param isExclusiveGroupEntry BooleanHolder out parameter, indicating whether
       *                            the field is in an exclusive group.  If false,
       *                            the return value should be ignored.
       *
       * @return boolean indicating whether or not the field is the selected entry
       *                            in an exclusive group.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean getGroupEntryIsSelectedByIndex (int fieldIndex, org.omg.CORBA.BooleanHolder isExclusiveGroupEntry) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns the field format specifier.  The format specifier indicates
       * the desired String format for field output and input.  See the
       * declaration of the field format constants above.
       *
       * @param fieldName  String name of the field.
       *
       * @return A 32-bit integer specifier of the field format.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  int getFormatByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns the field format specifier. The format specifier indicates
       * the desired String format for field output and input.  See the
       * declaration of the field format constants above.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return A 32-bit integer specifier of the field format.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  int getFormatByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is an array field with a fixed length.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if the field is of TYPE_BYTE_ARAY or TYPE_INT32_ARAY with a
       *         fixed array length; false if it can have any length.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY, BYTE_ARRAY.
       */
  boolean isFixedLengthByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns true if this field is an array field with a fixed length.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return True if the field is of TYPE_BYTE_ARAY or TYPE_INT32_ARAY with a
       *         fixed array length; false if it can have any length.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_ARRAY, BYTE_ARRAY.
       */
  boolean isFixedLengthByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns true if the field is intended to contain an SE reference.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if the field is intended to contain an SE reference;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean isReferenceByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if the field is intended to contain an SE reference.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return True if the field is intended to contain an SE reference;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean isReferenceByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Applies to signed integer fields that represent counts. The value
       * may only be reset to zero.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if the field can only be set to the value 0;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean isResetOnlyByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Applies to signed integer fields that represent counts. The value
       * may only be reset to zero.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return True if the field can only be set to the value 0;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean isResetOnlyByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Care should be taken in exposing password fields as unmasked text to
       * users.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if the field contains a password;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean isPasswordByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Care should be taken in exposing password fields as unmasked text to
       * users.
       *
       * @param fieldIndex  Integer index of the field.
       *
       * @return True if the field contains a password;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean isPasswordByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * All mandatory fields must be filled in before performing an APPLY action.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if the field is flagged as manadatory;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean isMandatoryByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * All mandatory fields must be filled in before performing an APPLY action.
       *
       * @param fieldIndex  Integer index of the field.
       *
       * @return True if the field is flagged as manadatory;
       *         false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean isMandatoryByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if any field value has been set since setModified was
       * last set to false; returns false if no field values have been set.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if any field has been modified since setModified was
       *         set to false; otherwise false.
       */
  boolean isModified ();

  /**
       * Indicates whether this is an index field.  If it is, then the value
       * is used in the construction of the SE's programmatic name.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if the field is an index field. False otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean isIndexByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Indicates whether this is an index field.  If it is, then the value
       * is used in the construction of the SE's programmatic name.
       *
       * @param fieldIndex  Integer index of the field.
       *
       * @return True if the field is an index field. False otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  boolean isIndexByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Indicates whether this field is a reserved internal field.
       *
       * IMPORTANT: Users of the EMS CORBA API should not query or alter the
       * value of fields of this type in any way.  This is field
       * is reserved for internal system use only.
       *
       * @param fieldName  String name of this field.
       *
       * @return True if this is a reserved internal field; false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  boolean isInternalByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Indicates whether this field is a reserved internal field.
       *
       * IMPORTANT: Users of the EMS CORBA API should not query or alter the
       * value of fields of this type in any way.  This is field
       * is reserved for internal system use only.
       *
       * @param fieldIndex  Integer index of the field.
       *
       * @return True if this is a reserved internal field; false otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  boolean isInternalByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is a Switchable Default field.  Otherwise
       * returns false.  If the use-default flag is set and this is a
       * Switchable Default field, then the default value will be set and
       * returned by the setFieldAs*() and getFieldAs*() methods. Otherwise,
       * the specific value will be set and returned as normal.
       *
       * @param fieldName  String name of the field.
       *
       * @return boolean indicating whether or not the field is a Switchable
       *         Default.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean isSwitchableDefaultByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is a Switchable Default field.  Otherwise
       * returns false. If the use-default flag is set and this is a
       * Switchable Default field, then the default value will be set and
       * returned by the setFieldAs*() and getFieldAs*() methods. Otherwise,
       * the specific value will be set and returned as normal.
       *
       * @params fieldIndex Integer index of the field.
       *
       * @return boolean indicating whether or not the field is a Switchable
       *         Default.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean isSwitchableDefaultByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is the start of a clause.  Otherwise returns
       * false.
       *
       * A start-of-clause field and all consecutive fields up to the end-of-clause
       * field are only valid when the clause is actually selected.  The clause
       * selection is handled by the start-of-clause field.  See also
       * getClauseSelectedByName() and setClauseSelectedByName().
       *
       * Note that a field may be both the start-of-clause and end-of-clause.
       *
       * @param fieldName  String name of the field.
       *
       * @return boolean indicating whether or not the field is the start of a clause.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean isStartOfClauseByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is the start of a clause.  Otherwise returns
       * false.
       *
       * A start-of-clause field and all consecutive fields up to the end-of-clause
       * field are only valid when the clause is actually selected.  The clause
       * selection is handled by the start-of-clause field.  See also
       * getClauseSelectedByIndex() and setClauseSelectedByIndex().
       *
       * Note that a field may be both the start-of-clause and end-of-clause.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return boolean indicating whether or not the field is the start of a clause.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean isStartOfClauseByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is an assistant field.  Otherwise returns
       * false.
       *
       * Setting and adjusting an assistant field will result in fields being
       * set based on the assistant field. For example, on an Access Device
       * selecting and adjusting the "set fields from media gateway" assistant
       * field defaults the subsequent fields.
       *
       * @param fieldName  String name of the field.
       *
       * @return boolean indicating whether or not the field is an assistant field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean isAssistantFieldByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       *
       * Returns true if this field is an assistant field.  Otherwise returns
       * false.
       *
       * Setting and adjusting an assistant field will result in fields being
       * set based on the assistant field. For example, on an Access Device
       * selecting and adjusting the "set fields from media gateway" assistant
       * field defaults the subsequent fields.
  
       * @param fieldIndex Integer index of the field.
       *
       * @return boolean indicating whether or not the field is an assistant field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean isAssistantFieldByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is the end of a clause.  Otherwise returns
       * false.
       *
       * An end-of-clause field and all previous, consecutive fields up to the
       * start-of-clause field are only valid when the clause is actually
       * selected.  The clause selection is handled by the start-of-clause field.
       * See also getClauseSelectedByName() and setClauseSelectedByName().
       *
       * Note that a field may be both the start-of-clause and end-of-clause.
       *
       * @param fieldName  String name of the field.
       *
       * @return boolean indicating whether or not the field is the end of a clause.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean isEndOfClauseByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is the end of a clause.  Otherwise returns
       * false.
       *
       * An end-of-clause field and all previous, consecutive fields up to the
       * start-of-clause field are only valid when the clause is actually
       * selected.  The clause selection is handled by the start-of-clause field.
       * See also getClauseSelectedByIndex() and setClauseSelectedByIndex().
       *
       * Note that a field may be both the start-of-clause and end-of-clause.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return boolean indicating whether or not the field is the end of a clause.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean isEndOfClauseByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is a member of an exclusive group.  Otherwise
       * returns false.
       *
       * An exclusive group is formed from the consecutive exclusive-group-entry
       * fields in the Settings, the only exception is for an upper-range-of-pair
       * field which does not need to mark itself as part of a group since that
       * is done by the corresponding lower-range-of-pair field.
       *
       * Only the selected group entry field is valid, and only one entry in each
       * group may be selected at any one time.  Setting a field as the selected
       * group entry will automatically deselect it from the other fields in the
       * group.  See also getGroupEntryIsSelectedByName() and
       * setGroupEntryIsSelectedByName().
       *
       * @param fieldName  String name of the field.
       *
       * @return boolean indicating whether or not the field is in an exclusive group.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean isExclusiveGroupEntryByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is a member of an exclusive group.  Otherwise
       * returns false.
       *
       * An exclusive group is formed from the consecutive exclusive-group-entry
       * fields in the Settings, the only exception is for an upper-range-of-pair
       * field which does not need to mark itself as part of a group since that
       * is done by the corresponding lower-range-of-pair field.
       *
       * Only the selected group entry field is valid, and only one entry in each
       * group may be selected at any one time.  Setting a field as the selected
       * group entry will automatically deselect it from the other fields in the
       * group.  See also getGroupEntryIsSelectedByIndex() and
       * setGroupEntryIsSelectedByIndex().
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return boolean indicating whether or not the field is in an exclusive group.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean isExclusiveGroupEntryByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is the lower-range of a pair of fields used
       * to configure a range of values.  Otherwise returns false.
       *
       * If this field is the lower-range of a pair, the next field in the
       * Settings will be the corresponding upper-range of pair.
       *
       * When a range field is also a member of an exclusive group, then both the
       * lower and upper range fields are bound together as a single group entry.
       * The selection of the group entry is handled by the lower range field and
       * not by the upper range field.
       *
       * @param fieldName  String name of the field.
       *
       * @return boolean indicating whether or not the field is the lower range
       *                 of a pair of range fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean isLowerRangeOfPairByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is the lower-range of a pair of fields used
       * to configure a range of values.  Otherwise returns false.
       *
       * If this field is the lower-range of a pair, the next field in the
       * Settings will be the corresponding upper-range of pair.
       *
       * When a range field is also a member of an exclusive group, then both the
       * lower and upper range fields are bound together as a single group entry.
       * The selection of the group entry is handled by the lower range field and
       * not by the upper range field.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return boolean indicating whether or not the field is the lower range
       *                 of a pair of range fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean isLowerRangeOfPairByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is the upper-range of a pair of fields used
       * to configure a range of values.  Otherwise returns false.
       *
       * If this field is the upper-range of a pair, the previous field in the
       * Settings will be the corresponding lower-range of pair.
       *
       * When a range field is also a member of an exclusive group, then both the
       * lower and upper range fields are bound together as a single group entry.
       * The selection of the group entry is handled by the lower range field and
       * not by the upper range field.
       *
       * @param fieldName  String name of the field.
       *
       * @return boolean indicating whether or not the field is the upper range
       *                 of a pair of range fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean isUpperRangeOfPairByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if this field is the upper-range of a pair of fields used
       * to configure a range of values.  Otherwise returns false.
       *
       * If this field is the upper-range of a pair, the previous field in the
       * Settings will be the corresponding lower-range of pair.
       *
       * When a range field is also a member of an exclusive group, then both the
       * lower and upper range fields are bound together as a single group entry.
       * The selection of the group entry is handled by the lower range field and
       * not by the upper range field.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return boolean indicating whether or not the field is the upper range
       *                 of a pair of range fields.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  boolean isUpperRangeOfPairByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if all index fields have been assigned a value.
       *
       * @param fieldName  If the return value is false, this out parameter
       *                   holds the name of the first unassigned
       *                   index field. Otherwise its value is null.
       *
       * @return True if all index fields have been assigned a value,
       *         or if no index fields have been registered.
       */
  boolean checkIndexFieldsAssignedByName (org.omg.CORBA.StringHolder fieldName);

  /**
       * Returns true if all index fields have been assigned a value.
       *
       * @param fieldIndex If the return value is false, this out parameter
       *                   holds the index of the first unassigned
       *                   index field. Otherwise its value is -1.
       *
       * @return True if all index fields have been assigned a value,
       *         or if no index fields have been registered.
       */
  boolean checkIndexFieldsAssignedByIndex (org.omg.CORBA.IntHolder fieldIndex);

  /**
       * Returns true if all registered mandatory fields have been assigned
       *
       * @param  fieldName  If the return value is false, this out parameter
       *                    holds the field name of the first unassigned
       *                    index field. Otherwise its value is null.
       *
       * @return True if all registered mandatory fields have been assigned a
       *         value, or if no mandatory fields have been registered.
       */
  boolean checkMandatoryFieldsAssignedByName (org.omg.CORBA.StringHolder fieldName);

  /**
       * Returns true if all registered mandatory fields have been assigned
       *
       * @param  fieldIndex If the return value is false, this out parameter
       *                    holds the field index of the first unassigned
       *                    index field. Otherwise its value is -1.
       *
       * @return True if all registered mandatory fields have been assigned a
       *         value, or if no mandatory fields have been registered.
       */
  boolean checkMandatoryFieldsAssignedByIndex (org.omg.CORBA.IntHolder fieldIndex);

  /**
       * Returns true if the named field has been modified since
       * setModified(false) was last invoked.
       *
       * @param fieldName  String name of the field.
       *
       * @return True if the field has been modified; false otherwise
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean isFieldModifiedByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if the indexed field has been modified since
       * setModified(false) was last invoked.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return True if the field has been modified; false otherwise
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       */
  boolean isFieldModifiedByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns the minimum value of an integer range field.
       *
       * @param fieldName  String name of the field.
       *
       * @return The minimum (inclusive) value of an integer range field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  int getMinRangeByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns the minimum value of an integer range field.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return The minimum (inclusive) value of an integer range field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  int getMinRangeByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns the maximum value of an integer range field.
       *
       * @param fieldName  String name of the field.
       *
       * @return The maximum (inclusive) value of an integer range field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  int getMaxRangeByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns the maximum value of an integer range field.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @return The maximum (inclusive) value of an integer range field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  int getMaxRangeByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns the minimum value of an integer range field as a String.
       *
       * @param fieldName  String name of the field.
       *
       * @return The minimum (inclusive) value of an integer range field as a
       *         String, taking into account the field format specifier.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  String getMinRangeAsStringByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns the minimum value of an integer range field as a String.
       *
       * @param fieldIndex  Integer index of the field.
       *
       * @return The minimum (inclusive) value of an integer range field as a
       *         String, taking into account the field format specifier.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  String getMinRangeAsStringByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns the maximum value of an integer range field as a String.
       *
       * @param fieldName  String name of the field.
       *
       * @return The maximum (inclusive) value of an integer range field as a
       *         String, taking into account the field format specifier.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  String getMaxRangeAsStringByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns the maximum value of an integer range field as a String.
       *
       * @param  fieldIndex  Integer index of the field.
       *
       * @return The maximum (inclusive) value of an integer range field as a
       *         String, taking into account the field format specifier.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_RANGE.
       */
  String getMaxRangeAsStringByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns the maximum length of a STRING or ARRAY field type.
       *
       * @param  fieldName String name of the field.
       *
       * @return The maximum character length of a STRING or ARRAY field type.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: STRING, INT32_ARRAY, BYTE_ARRAY.
       **/
  int getMaxLengthByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns the maximum length of a STRING or ARRAY field type.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return The maximum character length of a STRING or ARRAY field type.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field does not exist in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: STRING, INT32_ARRAY, BYTE_ARRAY.
       **/
  int getMaxLengthByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns the field type specifier.  See the declaration of the field type
       * constants above.
       *
       * @param  fieldName String name of the field.
       *
       * @return The field type specifier. One of the following: INT32, STRING,
       *         BOOLEAN, INT32_RANGE, INT32_MAP, INT_64, BYTE_ARRAY, BIT_MASK or
       *         INT32_ARRAY.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  int getTypeByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns the field type specifier.  See the declaration of the field type
       * constants above.
       *
       * @param  fieldIndex  Integer index of the field.
       *
       * @return The field type specifier. One of the following: TYPE_INT32,
       *         TYPE_INT64, TYPE_STRING, TYPE_BOOLEAN, TYPE_INT32_RANGE,
       *         TYPE_INT32_MAP, TYPE_BYTE_ARRAY, TYPE_BIT_MASK or
       *         TYPE_INT32_ARRAY
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  int getTypeByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns the state-dependent accessibility for a field.  See
       * getAccessFlagsByStateByIndex for more details.
       *
       * @param  fieldName String name of the field.
       *
       * @return Long containing state-dependent accessibility flags.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  int getAccessFlagsByStateByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns the state-dependent accessibility for a field.  See the
       * "MetaSwitch Class 5 Softswitch: Integration and Customization manual"
       * for more details on security and access permissions.
       *
       * The value returned is a bit mask.  Each bit set indicates that the field
       * is readable or writeable.  The bits relating to each state are defined
       * by the STATE_ constants defined in the SEAccessInterface.  The bits
       * relating to read and write are defined by the ACCESS_READ_BITS and
       * ACCESS_WRITE_BITS constants respectively.
       *
       * So if the readability in the enabled state is required, perform a
       * logical and on the value returned by this method, the ACCESS_READ_BITS
       * and the STATE_ENABLED constants.  The resulting value is the most
       * inclusive possible access: the value should be logically and'd with the
       * access granted to the User Type.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return Long containing state-dependent accessibility information.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  int getAccessFlagsByStateByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Describes the read/write privileges granted to each User Type.  See the
       * getAccessFlagsByGroupByIndex method for more details.
       *
       * @param fieldName   String name of the field.
       *
       * @return 64-bit     integer containing the accessFlags assigned to each
       *                    User group. See the MetaSwitch Class 5 Softswitch:
       *                    Integration and Customization manual for more
       *                    details.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                    Thrown if the specified field is not registered in
       *                    the Settings.
       */
  long getAccessFlagsByGroupByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns the User Type-dependent accessibility for a field.  See the
       * "MetaSwitch Class 5 Softswitch: Integration and Customization manual"
       * for more details on security and access permissions.
       *
       * The value returned is a bit mask.  Each bit set indicates that the field
       * is readable or writeable for that particular User Type.  The bits
       * relating to each User Type are defined by the USER_TYPE_ constants
       * defined in the SEAccessInterface.  The bits relating to read and write
       * are defined by the ACCESS_READ_BITS and ACCESS_WRITE_BITS constants
       * respectively.
       *
       * So if the readability for the Super User is required, perform a logical
       * and on the value returned by this method, the ACCESS_READ_BITS and the
       * USER_TYPE_SUPERUSER constants.  The resulting value is the most
       * inclusive possible access: the value should be logically and'd with the
       * access granted in each SE activation state.
       *
       * @param fieldIndex
       *                    Integer index of the field.
       *
       * @return 64-bit     integer containing the accessFlags assigned to each
       *                    User group. See the MetaSwitch Class 5 Softswitch:
       *                    Integration and Customization manual for more
       *                    details.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                    Thrown if the specified field is not registered in
       *                    the Settings.
       */
  long getAccessFlagsByGroupByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns the current field accessibility as determined by the SE's state
       * and the client session's permissions.  See getCurrentAccessByIndex for
       * more details.
       *
       * @param  fieldName String name of the field.
       *
       * @return Long detailing the current access permissions.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  int getCurrentAccessByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns the current field accessibility as determined by the SE's state
       * and the client session's permissions.  Field access is expressed by
       * three bits: a read bit (see IS_READABLE), a write bit (see IS_WRITEABLE)
       * and a visibility bit (see IS_VISIBLE).  If the respective bit is set
       * it indicates that the field is readable/writeable/visible.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return Long detailing the current access permissions.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  int getCurrentAccessByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Provides the current SE's activation state.  For more details see
       * the "MetaSwitch Class 5 Softswitch: Integration and Customization
       * manual".
       *
       * @return Long with the value of STATE_CREATING, STATE_ENABLED or
       *         STATE_DISABLED.
       */
  int getState ();

  /**
       * Returns a boolean indicating field visibility.  See the
       * getCurrentAccessByIndex method and the declaration of IS_VISIBLE
       * for more details.
       *
       * @param  fieldName String name of the field.
       *
       * @return true if the field is currently visible to a user
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean isVisibleByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns a boolean indicating field visibility.  See the
       * getCurrentAccessByIndex method and the declaration of IS_VISIBLE
       * for more details.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return true if the field is currently visible to a user
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean isVisibleByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns the units of measurement for this field in the form of an NLSIID.
       *
       * @param  fieldName String name of the field.
       *
       * @return Integer representation of the field's units.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  int getUnitsByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns the units of measurement for this field in the form of an NLSIID.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return String representation of the field's units.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  int getUnitsByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if the field provides an array of possible values.
       *
       * @param  fieldName String name of the field.
       *
       * @return True if the field can return a string array of possible values
       *         from a call to getPossibleValuesAsStrings. False otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean hasPossibleValuesByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if the field provides an array of possible values.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return True if the field can return a string array of possible values
       *         from a call to getPossibleValuesAsStrings. False otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean hasPossibleValuesByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if the field has a registered AdjustmentProvider.
       *
       * @param  fieldName String name of the field.
       *
       * @return True if the field has a registered AdjustmentProvider.
       *         The implication of this being true is that changing the value
       *         of this field has a knock on effect on other fields.
       *         False otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean hasAdjustmentsByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns true if the field has a registered AdjustmentProvider.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return True if the field has a registered AdjustmentProvider.
       *         The implication of this being true is that changing the value
       *         of this field has a knock on effect on other fields.
       *         False otherwise.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean hasAdjustmentsByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns a String array containing the string values that map to
       * internal numerical values in mapping and bit-mask fields.
       *
       * @param  fieldName String name of the field.
       *
       * @return A string array of external values for BIT_MASK and INT32_MAP
       *         fields. These are the human-readable "keys" that map to internal
       *         programmatic values.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_MAP or BIT_MASK.
       */
  String[] getExternalStringValuesByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a String array containing the string values that map to
       * internal numerical values in mapping and bit-mask fields.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return A string array of external values for BIT_MASK and INT32_MAP
       *         fields. These are the human-readable "keys" that map to internal
       *         programmatic values.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_MAP or BIT_MASK.
       */
  String[] getExternalStringValuesByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a copy of the array of internal programmatic values for a
       * integer mapping field.
       *
       * @param  fieldName String name of the field.
       *
       * @return A SequenceOfIntegers of internal values for an INT32_MAP field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_MAP.
       */
  int[] getInternalIntValuesByName (String name) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a copy of the array of internal programmatic values for a
       * integer mapping field.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @return A SequenceOfIntegers of internal values for an INT32_MAP field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown when the field is not of one of the
       *                   following types: INT32_MAP.
       */
  int[] getInternalIntValuesByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Returns a String array containing the possible values for a field.
       *
       * @param  fieldName String of the field name.
       * @param  filter    String representing a filter for selecting values.
       *                   The filter must have been returned from a previous
       *                   invocation of this method. Set to the empty string
       *                   to have this parameter ignored.
       * @param  maxValues Maximum number of possible values to return.
       * @param  moreValues  BooleanHolder out parameter that returns true if
       *                   there are more possible values to be displayed.
       *                   False otherwise.
       * @param  hasFilters  BooleanHolder out parameter that returns true if
       *                   the returned String array includes filter values.
       *                   False otherwise.
       * @param  numEntries  IntHolder out parameter that returns the actual
       *                   number of returned elements.
       * @param  whyNoValues  StringHolder out parameter that optionally returns
       *                   an NLS string indicating why there are no possible
       *                   values.  Only valid if numEntries is zero.  Note that
       *                   this may not be filled in even if numEntries is zero.
       *
       * @return A DualString array of possible values for this field. If
       *         hasFilters is false, the DualStrings contain possible
       *         values for the field. If hasFilters is true, the
       *         DualStrings contain filters (wildcards) representing a number of
       *         possible values.  To expand these filters, invoke this method
       *         again, supplying a filter as a parameter.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldNoRegisteredPVPException
       *                   Thrown if no possible values provider has been
       *                   registered for this field.
       * @throws ElementDeletedException
       *                   Thrown if the underlying element has been deleted.
       * @throws ElementOperationFailedException
       *                   Thrown if a non-specific failure occurs.
       * @throws LockTimeoutException
       *                   Thrown if this operation takes too long.
       * @throws InvalidFilterException
       *                   Thrown if the filter suppled is not valid. This is
       *                   not expected if the filter was returned on a previous
       *                   call to this method for the same field.
       * @throws InvalidNameException
       *                   See SEExceptions.idl.
       * @throws ElementUnavailableException
       *                   Thrown if the underlying element is not available;
       *                   usually due to a communications failure.
       * @throws ElementBrokenException
       *                   Thrown if the element is in an inconsistent state.
       */
  com.Metaswitch.MVS.Corba.DualString[] getPossibleValuesAsStringsByName (String fieldName, String filter, int maxValues, org.omg.CORBA.BooleanHolder moreValues, org.omg.CORBA.BooleanHolder hasFilters, org.omg.CORBA.IntHolder numEntries, org.omg.CORBA.StringHolder whyNoValues) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldNoRegisteredPVPException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.LockTimeoutException, com.Metaswitch.MVS.Corba.InvalidFilterException, com.Metaswitch.MVS.Corba.InvalidNameException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException;

  /**
       * Returns a String array containing the possible values for a field.
       *
       * @param  fieldIndex Integer index of the field.
       * @param  filter    String representing a filter for selecting values.
       *                   The filter must have been returned from a previous
       *                   invocation of this method. Set to the empty string
       *                   to have this parameter ignored.
       * @param  maxValues Maximum number of possible values to return.
       * @param  moreValues  BooleanHolder out parameter that returns true if
       *                   there are more possible values to be displayed.
       *                   False otherwise.
       * @param  hasFilters  BooleanHolder out parameter that returns true if
       *                   the returned String array includes filter values.
       *                   False otherwise.
       * @param  numEntries  IntHolder out parameter that returns the actual
       *                   number of returned elements.
       * @param  whyNoValues  StringHolder out parameter that optionally returns
       *                   an NLS string indicating why there are no possible
       *                   values.  Only valid if numEntries is zero.  Note that
       *                   this may not be filled in even if numEntries is zero.
       *
       * @return A DualString array of possible values for this field. If
       *         hasFilters is false, the DualStrings contain possible
       *         values for the field. If hasFilters is true, the
       *         DualStrings contain filters (wildcards) representing a number of
       *         possible values.  To expand these filters, invoke this method
       *         again, supplying a filter as a parameter.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldNoRegisteredPVPException
       *                   Thrown if no possible values provider has been
       *                   registered for this field.
       * @throws ElementDeletedException
       *                   Thrown if the underlying element has been deleted.
       * @throws ElementOperationFailedException
       *                   Thrown if a non-specific failure occurs.
       * @throws LockTimeoutException
       *                   Thrown if this operation takes too long.
       * @throws InvalidFilterException
       *                   Thrown if the filter suppled is not valid. This is
       *                   not expected if the filter was returned on a previous
       *                   call to this method for the same field.
       * @throws InvalidNameException
       *                   See SEExceptions.idl.
       * @throws ElementUnavailableException
       *                   Thrown if the underlying element is not available;
       *                   usually due to a communications failure.
       * @throws ElementBrokenException
       *                   Thrown if the element is in an inconsistent state.
       */
  com.Metaswitch.MVS.Corba.DualString[] getPossibleValuesAsStringsByIndex (int fieldIndex, String filter, int maxValues, org.omg.CORBA.BooleanHolder moreValues, org.omg.CORBA.BooleanHolder hasFilters, org.omg.CORBA.IntHolder numEntries, org.omg.CORBA.StringHolder whyNoValues) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldNoRegisteredPVPException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.LockTimeoutException, com.Metaswitch.MVS.Corba.InvalidFilterException, com.Metaswitch.MVS.Corba.InvalidNameException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException;

  /**
       * Called after a previous call to getPossibleValuesAsStrings, this
       * returns the next "batch" of possible values for this field.
       *
       * @param  fieldName String of the field name.
       * @param  lastValue The last value in the sequence returned from a
       *                   previous invocation of getPossibleValuesAsStrings() or
       *                   getNextPossibleValuesAsStrings() which
       *                   indicated that there were more values to be returned.
       * @param  filter    String representing the filter used to select values,
       *                   returned from a previous invocation of this method.
       *                   Set to the empty string to have this parameter
       *                   ignored.
       * @param  maxValues Maximum number of possible values to return.
       * @param  moreValues  BooleanHolder out parameter that returns true if
       *                   there are more possible values to be displayed.
       * @param  hasFilters  BooleanHolder out parameter that returns true if
       *                   the returned String array includes filter values.
       * @param  numEntries  IntHolder out parameter, indicating the number of
       *                   possible values returned.
       * @param  whyNoValues  StringHolder out parameter that optionally returns
       *                   an NLS string indicating why there are no possible
       *                   values.  Only valid if numEntries is zero.  Note that
       *                   this may not be filled in even if numEntries is zero.
       *
       * @return A DualString array of possible values for this field. If
       *         hasFilters is false, the DualStrings contain possible
       *         values for the field. If hasFilters is true, the
       *         DualStrings contain filters (wildcards) representing a number of
       *         possible values.  To expand these filters, invoke this method
       *         again, supplying a filter as a parameter.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldNoRegisteredPVPException
       *                   Thrown if no possible values provider has been
       *                   registered for this field.
       * @throws ElementDeletedException
       *                   Thrown if the underlying element has been deleted.
       * @throws ElementOperationFailedException
       *                   Thrown if a non-specific failure occurs.
       * @throws LockTimeoutException
       *                   Thrown if this operation takes too long.
       * @throws InvalidFilterException
       *                   Thrown if the filter suppled is not valid. This is
       *                   not expected if the filter was returned on a previous
       *                   call to this method for the same field.
       * @throws InvalidNameException
       *                   See SEExceptions.idl.
       * @throws ElementUnavailableException
       *                   Thrown if the underlying element is not available;
       *                   usually due to a communications failure.
       * @throws ElementBrokenException
       *                   Thrown if the element is in an inconsistent state.
       */
  com.Metaswitch.MVS.Corba.DualString[] getNextPossibleValuesAsStringsByName (String fieldName, String lastValue, String filter, int maxValues, org.omg.CORBA.BooleanHolder moreValues, org.omg.CORBA.BooleanHolder hasFilters, org.omg.CORBA.IntHolder numEntries, org.omg.CORBA.StringHolder whyNoValues) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldNoRegisteredPVPException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.LockTimeoutException, com.Metaswitch.MVS.Corba.InvalidFilterException, com.Metaswitch.MVS.Corba.InvalidNameException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException;

  /**
       * Called after a previous call to getPossibleValuesAsStrings, this
       * returns the next "batch" of possible values for this field.
       *
       * @param  fieldIndex Integer index of the field.
       * @param  lastValue The last value in the sequence returned from a
       *                   previous invocation of getPossibleValuesAsStrings() or
       *                   getNextPossibleValuesAsStrings() which
       *                   indicated that there were more values to be returned.
       * @param  filter    String representing the filter used to select values,
       *                   returned from a previous invocation of this method.
       *                   Set to the empty string to have this parameter
       *                   ignored.
       * @param  maxValues Maximum number of possible values to return.
       * @param  moreValues  BooleanHolder out parameter that returns true if
       *                   there are more possible values to be displayed.
       * @param  hasFilters  BooleanHolder out parameter that returns true if
       *                   the returned String array includes filter values.
       * @param  numEntries  IntHolder out parameter, indicating the number of
       *                   possible values returned.
       * @param  whyNoValues  StringHolder out parameter that optionally returns
       *                   an NLS string indicating why there are no possible
       *                   values.  Only valid if numEntries is zero.  Note that
       *                   this may not be filled in even if numEntries is zero.
       *
       * @return A DualString array of possible values for this field. If
       *         hasFilters is false, the DualStrings contain possible
       *         values for the field. If hasFilters is true, the
       *         DualStrings contain filters (wildcards) representing a number of
       *         possible values.  To expand these filters, invoke this method
       *         again, supplying a filter as a parameter.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldNoRegisteredPVPException
       *                   Thrown if no possible values provider has been
       *                   registered for this field.
       * @throws ElementDeletedException
       *                   Thrown if the underlying element has been deleted.
       * @throws ElementOperationFailedException
       *                   Thrown if a non-specific failure occurs.
       * @throws LockTimeoutException
       *                   Thrown if this operation takes too long.
       * @throws InvalidFilterException
       *                   Thrown if the filter suppled is not valid. This is
       *                   not expected if the filter was returned on a previous
       *                   call to this method for the same field.
       * @throws InvalidNameException
       *                   See SEExceptions.idl.
       * @throws ElementUnavailableException
       *                   Thrown if the underlying element is not available;
       *                   usually due to a communications failure.
       * @throws ElementBrokenException
       *                   Thrown if the element is in an inconsistent state.
       */
  com.Metaswitch.MVS.Corba.DualString[] getNextPossibleValuesAsStringsByIndex (int fieldIndex, String lastValue, String filter, int maxValues, org.omg.CORBA.BooleanHolder moreValues, org.omg.CORBA.BooleanHolder hasFilters, org.omg.CORBA.IntHolder numEntries, org.omg.CORBA.StringHolder whyNoValues) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldNoRegisteredPVPException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.LockTimeoutException, com.Metaswitch.MVS.Corba.InvalidFilterException, com.Metaswitch.MVS.Corba.InvalidNameException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException;

  /**
       * Prompt the Settings object to make adjustments to it's
       * fields, as dictated by any AdjustmentProvider registered
       * with the named field.
       *
       * @param  fieldName String name of the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean getAdjustmentsByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldNoRegisteredAPException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.LockTimeoutException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException;

  /**
       * Prompt the Settings object to make adjustments to it's
       * fields, as dictated by any AdjustmentProvider registered
       * with the named field.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  boolean getAdjustmentsByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldNoRegisteredAPException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.LockTimeoutException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException;

  /**
       * Returns a string array of field names registered with this
       * Settings object.
       *
       * @param  length IntHolder out parameter, indicating the number of
       *                elements in the return array.
       *
       * @return A string array of registered field names.
       */
  String[] fieldNames (org.omg.CORBA.IntHolder length);

  /**
       * Returns the number of fields registered with this Settings object.
       *
       * @return 32-bit integer containing the number of fields registered.
       */
  int countFields ();

  /**
       * Returns the display name of the field.
       *
       * @param  fieldName String name of the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  String getDisplayNameByName (String fieldName) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Returns the display name of the field.
       *
       * @param  fieldIndex Integer index of the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  String getDisplayNameByIndex (int fieldIndex) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Writes the Settings object to an octet array.
       *
       * @return  An octet array representation of the Settings object. The
       *          read() method can then be used to recreate the object.
       *
       * @throws  ReadWriteSettingsException
       *                   Thrown if an error occured writing the
       *                   object to a octet array
       */
  byte[] write () throws com.Metaswitch.MVS.Corba.ReadWriteSettingsException;

  /**
       * Sets the field value using an integer argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then this
       * sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldName  String name of the field.
       * @params newValue   32-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32, INT32_MAP or INT32_RANGE.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setFieldAsIntByName (String fieldName, int newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Sets the field value using an integer argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then this
       * sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   32-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32, INT32_MAP or INT32_RANGE.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setFieldAsIntByIndex (int fieldIndex, int newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Sets the named field value using a 64-bit integer argument. If
       * the field is a Switchable Default field, and the use-default
       * flag is set, then this sets the default value.  Otherwise it
       * sets the specific value.
       *
       * @params fieldName  String name of the field.
       * @params newValue   64-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT64.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setFieldAsLongByName (String fieldName, long newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Sets the named field value using a 64-bit integer argument. If
       * the field is a Switchable Default field, and the use-default
       * flag is set, then this sets the default value.  Otherwise it
       * sets the specific value.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   64-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT64.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setFieldAsLongByIndex (int fieldIndex, long newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Sets the field value using a string argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldName String name of the field.
       * @params newValue  String containing the new value for the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadValueException
       *                   Thrown if the string cannot be parsed to
       *                   a valid value for this field.
       */
  void setFieldAsStringByName (String fieldName, String newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Sets the field value using a string argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue  String containing the new value for the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadValueException
       *                   Thrown if the string cannot be parsed to
       *                   a valid value for this field.
       */
  void setFieldAsStringByIndex (int fieldIndex, String newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Set the field using a DualString argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @param fieldName  String name of the field.
       * @params newValue  DualString containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the isReference method returns false.
       * @throws FieldBadValueException
       *                   Thrown if the _internal_ string cannot be parsed to
       *                   a valid value for this field.
       */
  void setFieldAsReferenceByName (String fieldName, com.Metaswitch.MVS.Corba.DualString newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Set the field using a DualString argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @param fieldIndex Integer index of the field.
       * @params newValue  DualString containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the isReference method returns false.
       * @throws FieldBadValueException
       *                   Thrown if the _internal_ string cannot be parsed to
       *                   a valid value for this field.
       */
  void setFieldAsReferenceByIndex (int fieldIndex, com.Metaswitch.MVS.Corba.DualString newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field value using a boolean argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldName  String name of the field.
       * @params newValue   boolean used to set field value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BOOLEAN.
       */
  void setFieldAsBooleanByName (String fieldName, boolean newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field value using a boolean argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   boolean used to set field value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BOOLEAN.
       */
  void setFieldAsBooleanByIndex (int fieldIndex, boolean newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field value using a byte array argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldName  String name of the field.
       * @params newValue   Byte array used to set the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BYTE_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the byte array does not contain
       *                   a valid value for this field.
       */
  void setFieldAsByteArrayByName (String fieldName, byte[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field value using a byte array argument. If the field is a
       * Switchable Default field, and the use-default flag is set, then
       * this sets the default value.  Otherwise it sets the specific value.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   Byte array used to set the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BYTE_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the byte array does not contain
       *                   a valid value for this field.
       */
  void setFieldAsByteArrayByIndex (int fieldIndex, byte[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field value using a SequenceOfIntegers argument. If the
       * field is a Switchable Default field, and the use-default flag is
       * set, then this sets the default value.  Otherwise it sets the
       * specific value.
       *
       * @params fieldName  String name of the field.
       * @params newValue   A SequenceOfIntegers (array of 32-bit integers)
       *                    used to set field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the integer array does not contain
       *                   a valid value for this field.
       */
  void setFieldAsIntArrayByName (String fieldName, int[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field value using a SequenceOfIntegers argument. If the
       * field is a Switchable Default field, and the use-default flag is
       * set, then this sets the default value.  Otherwise it sets the
       * specific value.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   A SequenceOfIntegers (array of 32-bit integers)
       *                    used to set field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the integer array does not contain
       *                   a valid value for this field.
       */
  void setFieldAsIntArrayByIndex (int fieldIndex, int[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field value using an integer argument.
       *
       * @params fieldName  String name of the field.
       * @params newValue   32-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32, INT32_MAP or INT32_RANGE.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setSpecificValueAsIntByName (String fieldName, int newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Sets the field value using an integer argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   32-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32, INT32_MAP or INT32_RANGE.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setSpecificValueAsIntByIndex (int fieldIndex, int newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Sets the named field value using a 64-bit integer argument.
       *
       * @params fieldName  String name of the field.
       * @params newValue   64-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT64.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setSpecificValueAsLongByName (String fieldName, long newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Sets the named field value using a 64-bit integer argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   64-bit integer containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT64.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setSpecificValueAsLongByIndex (int fieldIndex, long newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Sets the field value using a string argument.
       *
       * @params fieldName String name of the field.
       * @params newValue  String containing the new value for the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadValueException
       *                   Thrown if the string cannot be parsed to
       *                   a valid value for this field.
       */
  void setSpecificValueAsStringByName (String fieldName, String newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Sets the field value using a string argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue  String containing the new value for the field.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadValueException
       *                   Thrown if the string cannot be parsed to
       *                   a valid value for this field.
       */
  void setSpecificValueAsStringByIndex (int fieldIndex, String newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Set the field using a DualString argument.
       *
       * @param fieldName  String name of the field.
       * @params newValue  DualString containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the isReference method returns false.
       * @throws FieldBadValueException
       *                   Thrown if the _internal_ string cannot be parsed to
       *                   a valid value for this field.
       */
  void setSpecificValueAsReferenceByName (String fieldName, com.Metaswitch.MVS.Corba.DualString newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Set the field using a DualString argument.
       *
       * @param fieldIndex Integer index of the field.
       * @params newValue  DualString containing the new field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the isReference method returns false.
       * @throws FieldBadValueException
       *                   Thrown if the _internal_ string cannot be parsed to
       *                   a valid value for this field.
       */
  void setSpecificValueAsReferenceByIndex (int fieldIndex, com.Metaswitch.MVS.Corba.DualString newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field value using a boolean argument.
       *
       * @params fieldName  String name of the field.
       * @params newValue   boolean used to set field value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BOOLEAN.
       */
  void setSpecificValueAsBooleanByName (String fieldName, boolean newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field value using a boolean argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   boolean used to set field value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BOOLEAN.
       */
  void setSpecificValueAsBooleanByIndex (int fieldIndex, boolean newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field value using a byte array argument.
       *
       * @params fieldName  String name of the field.
       * @params newValue   Byte array used to set the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BYTE_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the byte array does not contain
       *                   a valid value for this field.
       */
  void setSpecificValueAsByteArrayByName (String fieldName, byte[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field value using a byte array argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   Byte array used to set the field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BYTE_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the byte array does not contain
       *                   a valid value for this field.
       */
  void setSpecificValueAsByteArrayByIndex (int fieldIndex, byte[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field value using a SequenceOfIntegers argument.
       *
       * @params fieldName  String name of the field.
       * @params newValue   A SequenceOfIntegers (array of 32-bit integers)
       *                    used to set field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the integer array does not contain
       *                   a valid value for this field.
       */
  void setSpecificValueAsIntArrayByName (String fieldName, int[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field value using a SequenceOfIntegers argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   A SequenceOfIntegers (array of 32-bit integers)
       *                    used to set field value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the integer array does not contain
       *                   a valid value for this field.
       */
  void setSpecificValueAsIntArrayByIndex (int fieldIndex, int[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field's default value using an 32-bit integer argument.
       *
       * @params fieldName  String name of the field.
       * @params newValue   32-bit integer used to set the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setDefaultAsIntByName (String fieldName, int newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Sets the field's default value using an 32-bit integer argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   32-bit integer used to set the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32, INT32_MAP, INT32_RANGE.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setDefaultAsIntByIndex (int fieldIndex, int newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Sets the field's default value using a 64-bit integer argument.
       *
       * @params fieldName  String name of the field.
       * @params newValue   64-bit integer used to set the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT64.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setDefaultAsLongByName (String fieldName, long newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Sets the field's default value using a 64-bit integer argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue   64-bit integer used to set the default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT64.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setDefaultAsLongByIndex (int fieldIndex, long newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Sets the field's default value using a string argument.
       *
       * @params fieldName String name of the field.
       * @params newValue  String containing the new value for the default
       *                   value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadValueException
       *                   Thrown if the string cannot be parsed to
       *                   a valid value for this field.
       */
  void setDefaultAsStringByName (String fieldName, String newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Sets the field's default value using a string argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue  String containing the new value for the default
       *                   value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadValueException
       *                   Thrown if the string cannot be parsed to
       *                   a valid value for this field.
       */
  void setDefaultAsStringByIndex (int fieldIndex, String newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException;

  /**
       * Set the field's default value using a DualString argument.
       *
       * @param fieldName  String name of the field.
       * @params newValue  DualString containing the field's default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the isReference method returns false.
       * @throws FieldBadValueException
       *                   Thrown if the _internal_ string cannot be parsed to
       *                   a valid value for this field.
       */
  void setDefaultAsReferenceByName (String fieldName, com.Metaswitch.MVS.Corba.DualString newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Set the field's default value using a DualString argument.
       *
       * @param fieldIndex Integer index of the field.
       * @params newValue  DualString containing the field's default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if fieldIndex is not the index of a field in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the isReference method returns false.
       * @throws FieldBadValueException
       *                   Thrown if the _internal_ string cannot be parsed to
       *                   a valid value for this field.
       */
  void setDefaultAsReferenceByIndex (int fieldIndex, com.Metaswitch.MVS.Corba.DualString newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field's default value using a boolean argument.
       *
       * @params fieldName String name of the field.
       * @params newValue  Boolean used to set the field's default value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BOOLEAN.
       */
  void setDefaultAsBooleanByName (String fieldName, boolean newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field's default value using a boolean argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue  Boolean used to set the field's default value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BOOLEAN.
       */
  void setDefaultAsBooleanByIndex (int fieldIndex, boolean newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field's default value using a byte array argument.
       *
       * @params fieldName String name of the field.
       * @params newValue  Byte array used to set the field's default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BYTE_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setDefaultAsByteArrayByName (String fieldName, byte[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field's default value using a byte array argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue  Byte array used to set the field's default value.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: BYTE_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setDefaultAsByteArrayByIndex (int fieldIndex, byte[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field's default value using a SequenceOfIntegers argument.
       *
       * @params fieldName String name of the field.
       * @params newValue  Byte array used to set the field's default value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setDefaultAsIntArrayByName (String fieldName, int[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the field's default value using a SequenceOfIntegers argument.
       *
       * @params fieldIndex Integer index of the field.
       * @params newValue  Byte array used to set the field's default value
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       * @throws FieldBadTypeException
       *                   Thrown if the field is not of one of the
       *                   following types: INT32_ARRAY.
       * @throws FieldBadValueException
       *                   Thrown if the new value is not
       *                   a valid value for this field.
       */
  void setDefaultAsIntArrayByIndex (int fieldIndex, int[] newValue) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadValueException, com.Metaswitch.MVS.Corba.FieldBadTypeException;

  /**
       * Sets the modification flag for all registered fields to the state
       * provided.  When any field mutator method is successfully invoked the
       * isModified flag is set to true.
       *
       * @param state      Boolean state for all field's isModified flag.
       *                   Settings this to false means all fields will return
       *                   false from the isModified method.
       */
  void setModified (boolean state);

  /**
       * Sets the modification flag for an individual field.  When this field's
       * value is set the modification flag is set to true.
       *
       * @param fieldName  String name of the field.
       * @param state      Boolean state for the field's isModified flag.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  void setFieldModifiedByName (String fieldName, boolean state) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Sets the modification flag for an individual field.  When this field's
       * value is set the modification flag is set to true.
       *
       * @param fieldIndex Integer index of the field.
       * @param state      Boolean state for the field's isModified flag.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered in
       *                   the Settings.
       */
  void setFieldModifiedByIndex (int fieldIndex, boolean state) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Sets the use-default flag for this field.  If the use-default flag
       * is set and this is a Switchable Default field, then the default value
       * will be set and returned by the setFieldAs*() and getFieldAs*() methods.
       * Otherwise, the specific value will be set and returned as normal.
       *
       * @param fieldName  String name of the field.
       *
       * @param useDefault If true, then the use-default flag is set
       *                   otherwise it is unset.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  void setUseDefaultFlagByName (String fieldName, boolean useDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Sets the use-default flag for this field.  If the use-default flag
       * is set and this is a Switchable Default field, then the default value
       * will be set and returned by the setFieldAs*() and getFieldAs*() methods.
       * Otherwise, the specific value will be set and returned as normal.
       *
       * @param fieldIndex Integer index of the field.
       *
       * @param useDefault If true, then the use-default FLAG is set
       *                   otherwise it is unset.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  void setUseDefaultFlagByIndex (int fieldIndex, boolean useDefault) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Sets the clause selection for this field.  If this field is a start-of-
       * clause field and the clauseIsSelected parameter is set to true, then
       * this and all fields up to the end-of-clause field are valid (unless
       * restrictions apply).
       *
       * See also isStartOfClauseByName(), isEndOfClauseByName and
       * getClauseIsSelectedByName().
       *
       * @param fieldName  String name of the field.
       *
       * @param clauseIsSelected Boolean state for the fields clause-selected flag.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  void setClauseIsSelectedByName (String fieldName, boolean clauseIsSelected) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Sets the clause selection for this field.  If this field is a start-of-
       * clause field and the clauseIsSelected parameter is set to true, then
       * this and all fields up to the end-of-clause field are valid (unless
       * restrictions apply).
       *
       * See also isStartOfClauseByIndex(), isEndOfClauseByIndex and
       * getClauseIsSelectedByIndex().
       *
       * @param fieldIndex Integer index of the field.
       *
       * @param clauseIsSelected Boolean state for the fields clause-selected flag.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  void setClauseIsSelectedByIndex (int fieldIndex, boolean clauseIsSelected) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Sets the group entry selection for this field.  If this field is an
       * exclusive group entry and the entryIsSelected parameter is set to true,
       * then this field becomes the selected entry in the group and all other
       * entries in the group will be automatically deselected.  If this field is
       * an exclusive group entry and the entryIsSelected parameter is set to
       * false, then this field will be deselected.
       *
       * Only the selected member of an exclusive group is valid at any one time.
       *
       * See also isExclusiveGroupEntryByName() and
       * getGroupEntryIsSelectedByName().
       *
       * @param fieldName  String name of the field.
       *
       * @param entryIsSelected Boolean state for the fields
       *                        group-entry-selected flag.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  void setGroupEntryIsSelectedByName (String fieldName, boolean entryIsSelected) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Sets the group entry selection for this field.  If this field is an
       * exclusive group entry and the entryIsSelected parameter is set to true,
       * then this field becomes the selected entry in the group and all other
       * entries in the group will be automatically deselected.  If this field is
       * an exclusive group entry and the entryIsSelected parameter is set to
       * false, then this field will be deselected.
       *
       * Only the selected member of an exclusive group is valid at any one time.
       *
       * See also isExclusiveGroupEntryByIndex() and
       * getGroupEntryIsSelectedByIndex().
       *
       * @param fieldIndex Integer index of the field.
       *
       * @param entryIsSelected Boolean state for the fields
       *                        group-entry-selected flag.
       *
       * @throws FieldNameOrIndexNotFoundException
       *                   Thrown if the specified field is not registered
       *                   in the Settings.
       */
  void setGroupEntryIsSelectedByIndex (int fieldIndex, boolean entryIsSelected) throws com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException;

  /**
       * Reads field configuration information from a byte array.
       *
       * @param  buffer    An octet array representation of the Settings object,
       *                   as produced by the write() method.
       *
       * @throws ReadWriteSettingsException
       *                   Thrown if an error occured reading the
       *                   object from an octet array.
       */
  void read (byte[] buffer) throws com.Metaswitch.MVS.Corba.ReadWriteSettingsException;
} // interface SettingsUserInterfaceOperations
