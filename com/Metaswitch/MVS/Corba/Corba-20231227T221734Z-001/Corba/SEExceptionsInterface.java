package com.Metaswitch.MVS.Corba;


/**
* com/Metaswitch/MVS/Corba/SEExceptionsInterface.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from SEExceptions.idl
* Thursday, June 18, 2020 8:33:02 PM CDT
*/


//-----------------------------------------------------------------------------
public interface SEExceptionsInterface extends SEExceptionsInterfaceOperations, org.omg.CORBA.Object, org.omg.CORBA.portable.IDLEntity 
{

  /**
   * Error not described by any other return code.
   */
  public static final int RC_GEN_ERROR = (int)(2);

  /**
   * A field value specified is not valid.
   */
  public static final int RC_WRONG_VALUE = (int)(3);

  /**
   * A field value specified is not legal because of the values of some
   * other fields.
   */
  public static final int RC_INCONSISTENT_VALUE = (int)(4);

  /**
   * This request could not be processed due to resource failure.
   */
  public static final int RC_RESOURCE_UNAVAILABLE = (int)(5);

  /**
   * The SE has been deleted.
   */
  public static final int RC_NO_SUCH_OBJECT = (int)(6);

  /**
   * Indicates an internal error in the EMS Server or MetaSwitch.
   */
  public static final int RC_AGENT_ERROR = (int)(8);

  /**
   * A request has been rejected because the system is not ready.  The
   * request should be retried.
   */
  public static final int RC_STARTUP_IN_PROGRESS = (int)(11);

  /**
   * Indicates that the MetaSwitch has been updated in such a way as to
   * invalidate the object.
   */
  public static final int RC_EMS_SYSTEM_UPDATED = (int)(13);

  /**
   * Indicates that the logged in Client Session has expired.
   */
  public static final int RC_LOGIN_EXPIRED = (int)(101);

  /**
   * Indicates that the logged in User or application has insufficient privileges
   * to perform the requested operation.
   */
  public static final int RC_INSUFFICIENT_PRIVILEGES = (int)(102);

  /**
   * Indicates that the User or application has not logged in.
   */
  public static final int RC_NOT_LOGGED_IN = (int)(103);

  /**
   * Indicates that operation failed because it took too long and a lock
   * (whether acquired implicitly or explicitly) has timed out.
   */
  public static final int RC_LOCK_TIMEOUT = (int)(104);

  /**
   * The connection to the primary MetaSwutch instance is not currently active.
   */
  public static final int RC_EMS_ELEMENT_UNAVAILABLE = (int)(201);

  /**
   * The MetaSwitch has been deleted from the EMS's configuration.
   */
  public static final int RC_EMS_ELEMENT_DELETED = (int)(202);

  /**
   * The EMS is shutting down.
   */
  public static final int RC_EMS_SHUTTING_DOWN = (int)(203);

  /**
   * The EMS Server is not / no longer the primary EMS for managing this
   * MetaSwitch possibly because another EMS has take over as primary.
   */
  public static final int RC_EMS_NOT_PRIMARY_EMS = (int)(204);

  /**
   * Communication between the EMS Server and MetaSwitch took too long and was
   * timed out.
   */
  public static final int RC_EMS_TIME_OUT = (int)(205);

  /**
   * Indicates a failure due to memory shortage on the EMS Server.
   */
  public static final int RC_EMS_RESOURCE_UNAVAILABLE = (int)(206);

  /**
   * Failure in the transport layer between the EMS Server and MetaSwitch.
   */
  public static final int RC_EMS_MTL_FAILURE = (int)(207);

  /**
   * MetaSwitch failover occurred and the request was lost.
   */
  public static final int RC_EMS_SYNC_ERROR = (int)(208);

  /**
   * The response returned by the MetaSwitch could not be interpreted by the EMS.
   */
  public static final int RC_EMS_READ_STRUCT_FAILURE = (int)(209);

  /**
   * Indicates that the EMS Server has rejected the request because memory
   * usage has exceeded its configured threshold.
   */
  public static final int RC_EMS_MEM_RSRCE_SHORTAGE = (int)(210);

  /**
   * Indicates a failure due to the MetaSwitch being in read-only mode.
   */
  public static final int RC_EMS_NE_IS_READ_ONLY = (int)(211);

  /**
   * Indicates that the system is temporarily unavailable, probably due to an
   * SNMP connection failure.
   */
  public static final int RC_EMS_SYSTEM_UNAVAILABLE = (int)(212);

  /**
   * Indicates that the Session Controller is temporarily unavailable, probably
   * due to a connection failure.
   */
  public static final int RC_EMS_JSON_UNAVAILABLE = (int)(213);

  /**
   * Indicates that an error occurred on the Session Controller while processing
   * this request.
   */
  public static final int RC_EMS_JSON_OP_FAILED = (int)(214);

  /**
   * Indicates that a field value is inconsistent with the values of some other
   * field(s).
   */
  public static final int RC_EMS_JSON_INCNSTNT_VALUES = (int)(215);

  /**
   * Indicates that there is an inconsistency between the start after element
   * name supplied on a get next elements request and the supplied filter for the
   * find operation.
   */
  public static final int RC_FOO_NAME_FILTER_MISMATCH = (int)(400);

  /**
   * Indicates that there is a problem with the start after element name supplied
   * on a find operation get next elements request such that enumeration cannot
   * continue.
   *
   * In a find enumeration, the server may need to attach to the element
   * indicated by the start after element name so that it can "find its place" in
   * the enumeration and return the correct elements.  If the server cannot
   * determine this information (e.g.  the element indicated by the start after
   * element name no longer exists) an ElementOperationFailedException will be
   * thrown with this return code.
   *
   * It may be possible to recover from this situation by making a further get
   * next elements request by supplying a different start after element name, for
   * example the element that returned immediately before the original start
   * after element.
   */
  public static final int RC_FOO_CANT_CONT_ENUMERATION = (int)(401);

  /**
   * Indicates that the specified MetaSwitch filter refers to a MetaSwitch which
   * does not exist.
   */
  public static final int RC_FOO_META_FILTER_DELETED = (int)(402);

  /**
   * Indicates that the specified MetaSwitch filter refers to a MetaSwitch which
   * is currently unavailable.
   */
  public static final int RC_FOO_META_FILTER_UNAVAIL = (int)(403);

  /**
   * A required field is missing.  Used in conjunction with the erroredField.
   */
  public static final int ES_REQD_FIELD_MISSING = (int)(0x00000001);

  /**
   * A supplied field is always read-only.  Used in conjunction with the
   * erroredField.
   */
  public static final int ES_FIELD_READ_ONLY = (int)(0x00000002);

  /**
   * A supplied field is not writeable.  The field is not read-only, nor is it
   * not writeable because of the current activation state, but is not writeable
   * for some other reason.
   *
   * For example, the field is only present in one National Variant, and
   * configuration indicates that a different National Variant is to be used.
   *
   * Used in conjunction with the erroredField.
   */
  public static final int ES_FIELD_NOT_WRITEABLE = (int)(0x00000003);

  /**
   * Applies to integer fields with a range.  A supplied field has a value
   * which is too small.  Used in conjunction with the erroredField.
   */
  public static final int ES_VALUE_TOO_SMALL = (int)(0x00000004);

  /**
   * Applies to integer fields with a range.  A supplied field has a value
   * which is too big.  Used in conjunction with the erroredField.
   */
  public static final int ES_VALUE_TOO_BIG = (int)(0x00000005);

  /**
   * A supplied field has an invalid value.  Used in conjunction with the
   * erroredField.
   */
  public static final int ES_INVALID_VALUE = (int)(0x00000006);

  /**
   * The field must have a unique value within the table.  Used
   * in conjunction with the erroredField.
   */
  public static final int ES_VALUE_NOT_UNIQUE = (int)(0x00000007);

  /**
   * The field is not consistent with other fields in this SE or in other SEs
   * of this type or even SEs of another type.
   *
   * This subcode is supplemented by comprehensive logs of what the
   * inconsistency is, and what action is required to correct it.
   *
   * The erroredField optionally indicates one of the inconsistent objects.
   */
  public static final int ES_INCONSISTENT_VALUES = (int)(0x00000008);

  /**
   * The specified field setting is not consistent with the setting of fields
   * in the parent SE.
   *
   * Used in conjunction with the erroredField.
   */
  public static final int ES_INCONSISTENT_WITH_PARENT = (int)(0x00000009);

  /**
   * The specified value setting is not consistent with the currently set
   * value. This field can only accept a limited sequence of its valid values.
   *
   * For example, if a field has three possible values A, B, and C, and starts
   * with value A, it may not be valid to move directly to C. B must be set
   * first and then transitioned to C.
   *
   * Used in conjunction with the erroredField.
   */
  public static final int ES_INCONSISTENT_SEQUENCE = (int)(0x0000000A);

  /**
   * The string format is not recognized.  This is used for string fields
   * where the information is encoded using a distinct syntax, but where the
   * value's sequence of characters can not be interpreted by the product.
   * Used in conjunction with the erroredField.
   */
  public static final int ES_INVALID_FORMAT = (int)(0x0000000B);

  /**
   * A supplied field cannot have its value changed because of the current
   * activation status.  Used in conjunction with the erroredField.
   */
  public static final int ES_INVALID_ROW_STATE = (int)(0x0000000C);

  /**
   * A supplied field cannot have its value changed because of the current
   * activation status.  Used in conjunction with the erroredField.
   */
  public static final int ES_INVALID_OPER_STATE = (int)(0x0000000D);

  /**
   * The activation state cannot be changed because the current
   * activation state is effectively 'waiting for parent' or 'waiting for
   * dependent'.  This occurs when the activation state in the product is 'down'
   * or 'activation failed'.
   *
   * For example, some SEs cannot accept a disable action when activated because
   * they would auto-activate if a parent or dependent SE became active.
   */
  public static final int ES_WAITING_FOR_PARENT = (int)(0x0000000E);

  /**
   * The action is not supported.  For this subcode, the erroredField is
   * not used.
   */
  public static final int ES_ACTION_NOT_SUPPORTED = (int)(0x0000000F);

  /**
   * The SE does not exist.  For this subcode, the erroredField is not
   * used.  This subcode is not be used to
   * indicate that an SE is missing for any SE other than one for which this
   * request was intended.
   */
  public static final int ES_ROW_MISSING = (int)(0x00000010);

  /**
   * The parent SE is missing.
   * For this subcode, the erroredField field is not used.
   */
  public static final int ES_PARENT_MIB_MISSING = (int)(0x00000011);

  /**
   * The action cannot be performed due to the state of the parent SE.
   * For this subcode, the erroredField field is not used.
   */
  public static final int ES_INVALID_PARENT_MIB_STATE = (int)(0x00000012);

  /**
   * A required child or referenced SE is missing.  For this subcode, the
   * erroredField is not used.
   */
  public static final int ES_DEPENDENT_MIB_MISSING = (int)(0x00000013);

  /**
   * A required child or referenced SE exists but is in the wrong state (for
   * example, disabled).  For this subcode, the erroredField is
   * not used.
   */
  public static final int ES_DEPENDENT_MIB_STATE = (int)(0x00000014);

  /**
   * Failure to allocate memory.  Types of 'memory' include buffers, handles
   * and control blocks.  For this subcode, the erroredField is not used.
   */
  public static final int ES_MEMORY_ALLOCATION = (int)(0x00000015);

  /**
   * Failure to allocate a resource (for example, no free TCP/IP socket).  For
   * this subcode, the erroredField is not used.
   */
  public static final int ES_RESOURCE_ALLOCATION = (int)(0x00000016);

  /**
   * A resource is missing (for example, no TCP/IP network).  For this
   * subcode, the erroredField is not used.
   */
  public static final int ES_RESOURCE_MISSING = (int)(0x00000017);

  /**
   * A resource is in the wrong state (for example, the TCP/IP network is not
   * enabled).  For this subcode, the erroredField is not used.
   */
  public static final int ES_RESOURCE_STATE = (int)(0x00000018);

  /**
   * The SE is read-only and cannot accept sets.  For this subcode, the
   * erroredField is not used.
   */
  public static final int ES_ROW_READ_ONLY = (int)(0x00000019);

  /**
   * Internal system error.
   */
  public static final int ES_INT_BAD_OID_LENGTH = (int)(0x0000001A);

  /**
   * Internal system error.
   */
  public static final int ES_INT_BAD_DATA_LENGTH = (int)(0x0000001B);

  /**
   * Internal system error.
   */
  public static final int ES_INT_TEST_NOT_SUPPORTED = (int)(0x0000001C);

  /**
   * Internal system error.
   */
  public static final int ES_INT_FAMILY_NOT_DEFINED = (int)(0x0000001D);

  /**
   * The requested action is already in progress.  Wait for the action to
   * complete, and then retry the action if required.  For this subcode, the
   * erroredField is not used.
   */
  public static final int ES_ALREADY_IN_PROGRESS = (int)(0x0000001E);

  /**
   * Only one instance of this SE type is supported, and an instance
   * already exists.  For this subcode, the erroredField is not used.
   */
  public static final int ES_ONLY_ONE_INSTANCE_ALLWD = (int)(0x0000001F);

  /**
   * The requested action is not supported while child SEs exist.  For
   * example, a particular parent object cannot be deleted until all child
   * objects have been deleted.  For this subcode, the erroredField is not
   * used.
   */
  public static final int ES_DEPENDENT_MIB_EXISTS = (int)(0x00000020);

  /**
   * The operation cannot be performed because another SE is referencing this
   * SE.  For example, it may not be valid to delete an SE if a field in a
   * second SE has a value which references the first SE. For this subcode,
   * the erroredField is not used
   */
  public static final int ES_REFERENCED = (int)(0x00000021);

  /**
   * Applies to fields of TYPE_INT32_MAPPING. The value supplied is not one
   * of the declared values.  If the supplied value is one of those declared
   * but the value is invalid because of the value of another field within the
   * SE then RC_INCONS_NOT_IN_GROUP should be used instead. Used in
   * conjunction with the erroredField.
   */
  public static final int ES_VALUE_NOT_IN_GROUP = (int)(0x00000022);

  /**
   * A mandatory field is not present.  Used in conjunction
   * with the erroredField.
   */
  public static final int ES_MANDATORY_FIELD_MISSING = (int)(0x00000023);

  /**
   * The field is not consistent with other fields in this SE
   *
   * This subcode is supplemented by comprehensive logs of what the
   * inconsistency is, and what action is required to correct it. However, if
   * possible a more specific subcode should be used that more tightly defines
   * the inconsistency without resort to logs.
   *
   * The erroredField optionally indicates one of the inconsistent objects.
   */
  public static final int ES_INCONSISTENT_WITH_SELF = (int)(0x00000024);

  /**
   * The field is not consistent with other SEs of the same type.
   *
   * This subcode is supplemented by comprehensive logs of what the
   * inconsistency is, and what action is required to correct it. However, if
   * possible a more specific subcode should be used that more tightly defines
   * the inconsistency without resort to logs.
   *
   * The erroredField optionally indicates one of the inconsistent objects.
   */
  public static final int ES_INCONSISTENT_WITH_SAME = (int)(0x00000025);

  /**
   * The field is not consistent with other SEs of a different SE type.
   *
   * This subcode is supplemented by comprehensive logs of what the
   * inconsistency is, and what action is required to correct it. However, if
   * possible a more specific subcode should be used that more tightly defines
   * the inconsistency without resort to logs.
   *
   * The erroredField optionally indicates one of the inconsistent objects.
   */
  public static final int ES_INCONSISTENT_WITH_OTHER = (int)(0x00000026);

  /**
   * Applies to fields of TYPE_INT32_MAPPING.  The value supplied is one of
   * the declared values but the value is invalid because of the value of
   * another field within the se.  Used in conjunction with the erroredField.
   */
  public static final int ES_INCONS_NOT_IN_GROUP = (int)(0x00000027);

  /**
   * Applies to integer fields. The value supplied is within the range
   * declared by the SE, but the value is smaller than that
   * permitted because of the value of another field within the SE.
   * For example, because of a field defining an alternative variant.
   * Used in conjunction with the erroredField.
   */
  public static final int ES_INCONS_TOO_SMALL = (int)(0x00000028);

  /**
   * Applies to integer fields. The value supplied is within the range
   * declared by the SE, but the value is greater than that
   * permitted because of the value of another field within the SE.
   * For example, because of a field defining an alternative variant.
   * Used in conjunction with the erroredField.
   */
  public static final int ES_INCONS_TOO_BIG = (int)(0x00000029);

  /**
   * The value of the requested status is supported but not valid because of the
   * current actual status value.  For this subcode, the erroredField is
   * not used.
   */
  public static final int ES_ROW_STATE_CHANGE_OPER = (int)(0x0000002A);

  /**
   * The indices specify an SE that already exists.
   * For this subcode, the erroredField is not used.
   */
  public static final int ES_ROW_ALREADY_EXISTS = (int)(0x0000002B);

  /**
   * The exposed version of the system has changed.
   */
  public static final int ES_SW_VERSION_CHANGED = (int)(0x0000002F);

  /**
   * The system ID has changed.
   */
  public static final int ES_SYSTEM_ID_CHANGED = (int)(0x00000030);

  /**
   * Indicates that the Log database is unavailable.
   */
  public static final int ES_LOG_DATABASE_UNAVAILABLE = (int)(0x00000031);

  /**
   * Indicates that the requested Log is unavailable.
   */
  public static final int ES_LOG_UNAVAILABLE = (int)(0x00000032);

  /**
   * Indicates that the details used by this User to login have changed and so
   * the client session has been terminated.
   */
  public static final int ES_LOGIN_DETAILS_CHANGED = (int)(0x00010000);

  /**
   * Indicates that the client session has timed out or that the EMS Server
   * has restarted. In both cases the User must obtain a new client session
   * by logging in again.
   */
  public static final int ES_RELOGIN_REQUIRED = (int)(0x00020000);
} // interface SEExceptionsInterface
