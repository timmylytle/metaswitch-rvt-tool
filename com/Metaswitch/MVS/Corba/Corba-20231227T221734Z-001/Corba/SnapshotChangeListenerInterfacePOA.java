package com.Metaswitch.MVS.Corba;


/**
* com/Metaswitch/MVS/Corba/SnapshotChangeListenerInterfacePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from SnapshotChangeListenerInterface.idl
* Thursday, June 18, 2020 8:33:05 PM CDT
*/

public abstract class SnapshotChangeListenerInterfacePOA extends org.omg.PortableServer.Servant
 implements com.Metaswitch.MVS.Corba.SnapshotChangeListenerInterfaceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("newSnapshotAvailable", new java.lang.Integer (0));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
     * Called by the SEAccess to notify the implementing object of a change in
     * the SE's state.
     *
     * @param source     SEAccessInterface with which this
     *                   SnapshotChangeListenerInterface was registered.
     * @param fundamental  If true, any outstanding changes to the
     *                   SettingsUserInterface object currently held by the
     *                   SEAccessInterface user, will be rejected with
     *                   ElementChangedException if an action is performed.
     *                   This is because another user has significantly changed
     *                   the SE's state.  If false, actions may be performed
     *                   without an calling getSnapshot.
     **/
       case 0:  // SnapshotChangeListenerInterface/newSnapshotAvailable
       {
         com.Metaswitch.MVS.Corba.SEAccessInterface source = com.Metaswitch.MVS.Corba.SEAccessInterfaceHelper.read (in);
         boolean fundamental = in.read_boolean ();
         this.newSnapshotAvailable (source, fundamental);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:SnapshotChangeListenerInterface:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public SnapshotChangeListenerInterface _this() 
  {
    return SnapshotChangeListenerInterfaceHelper.narrow(
    super._this_object());
  }

  public SnapshotChangeListenerInterface _this(org.omg.CORBA.ORB orb) 
  {
    return SnapshotChangeListenerInterfaceHelper.narrow(
    super._this_object(orb));
  }


} // class SnapshotChangeListenerInterfacePOA
