package com.Metaswitch.MVS.Corba;


/**
* com/Metaswitch/MVS/Corba/_SEAccessInterfaceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from SEAccessInterface.idl
* Thursday, June 18, 2020 8:33:02 PM CDT
*/


/**
 * The SEAccessInterface is the primary interface for navigating the tree of
 * SE objects and managing individual SEs.
 */
public class _SEAccessInterfaceStub extends org.omg.CORBA.portable.ObjectImpl implements com.Metaswitch.MVS.Corba.SEAccessInterface
{


  /**
   * Associates this SEAccessInterface with the SE specified by name.
   *
   * @param name  The string identifier of an SE.  This string must be a valid
   *              elementName as returned by getElements or getNextElements.
   *
   * @throws InvalidNameException  Thrown if the structure of the name string
   *              is not valid.
   * @throws AlreadyAttachedException  Thrown if attachTo or attachToNew has
   *              already successfully been called on this SEAccessInterface.
   * @throws ElementDeletedException  Thrown if the SE specified by name does
   *              not exist or is deleted during this method invocation.
   * @throws ElementOperationFailedException  See SEExceptions.idl.
   */
  public void attachTo (String name) throws com.Metaswitch.MVS.Corba.InvalidNameException, com.Metaswitch.MVS.Corba.AlreadyAttachedException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("attachTo", true);
                $out.write_string (name);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:InvalidNameException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidNameExceptionHelper.read ($in);
                else if (_id.equals ("IDL:AlreadyAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.AlreadyAttachedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                attachTo (name        );
            } finally {
                _releaseReply ($in);
            }
  } // attachTo


  /**
   * As per attachTo, but supply indices and type rather than an elementName.
   *
   * @param indices  The indices uniquely identifying an SE of the specified
   *              type.
   * @param elementType  The type of SE which is to be attached to.
   *
   * @throws BadIndicesException  Thrown if the indices supplied do not
   *              represent a valid element of the specified type.
   * @throws AlreadyAttachedException  Thrown if attachTo or attachToNew has
   *              already successfully been called on this SEAccessInterface.
   * @throws ElementDeletedException  Thrown if the SE specified by name does
   *              not exist or is deleted during this method invocation.
   * @throws ElementOperationFailedException  See SEExceptions.idl.
   */
  public void attachToWithIndices (String[] indices, String elementType) throws com.Metaswitch.MVS.Corba.BadIndicesException, com.Metaswitch.MVS.Corba.InvalidElementTypeException, com.Metaswitch.MVS.Corba.AlreadyAttachedException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("attachToWithIndices", true);
                com.Metaswitch.MVS.Corba.SequenceOfIndicesHelper.write ($out, indices);
                $out.write_string (elementType);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BadIndicesException:1.0"))
                    throw com.Metaswitch.MVS.Corba.BadIndicesExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidElementTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidElementTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:AlreadyAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.AlreadyAttachedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                attachToWithIndices (indices, elementType        );
            } finally {
                _releaseReply ($in);
            }
  } // attachToWithIndices


  /**
   * Creates a new SE and associate this SEAccessInterface with that SE.
   *
   * @params parentOrOurName  Either the name of the parent SE of which the
   *                          new SE should be a child or the fully
   *                          qualified name of the object to be created.
   * @params elementType      The type of SE which is to be created.
   *
   * @throws ElementDeletedException  Thrown if the parent of the
   *                   to-be-created SE does not exist or is deleted during
   *                   this method invocation.
   * @throws CreationFailedException  See SEExceptions.idl.
   * @throws ElementOperationFailedException  See SEExceptions.idl.
   * @throws InvalidElementTypeException  Thrown if the elementType is not
   *                   a known child type of the parent SE.
   * @throws ElementUnavailableException
   *                   Thrown if the EMS Server is unable to communicate
   *                   with the MetaSwitch.
   * @throws AlreadyAttachedException  Thrown if attachTo or attachToNew has
   *              already successfully been called on this SEAccessInterface.
   */
  public void attachToNew (String parentOrOurName, String elementType) throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.CreationFailedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.InvalidElementTypeException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.AlreadyAttachedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("attachToNew", true);
                $out.write_string (parentOrOurName);
                $out.write_string (elementType);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:CreationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.CreationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidElementTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidElementTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:AlreadyAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.AlreadyAttachedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                attachToNew (parentOrOurName, elementType        );
            } finally {
                _releaseReply ($in);
            }
  } // attachToNew


  /**
   * As per attachToNew, but supply indices and type rather than an
   * elementName.
   *
   * @param parentIndices  The indices uniquely identifying the parent SE of
   *              which the new SE should be a child.
   * @param elementType    The type of SE which is to be created.
   *
   * @throws BadIndicesException  Thrown if the indices supplied do not
   *              represent a valid element of the specified type.
   * @throws ElementDeletedException  Thrown if the parent of the
   *                   to-be-created SE does not exist or is deleted during
   *                   this method invocation.
   * @throws CreationFailedException  See SEExceptions.idl.
   * @throws ElementOperationFailedException  See SEExceptions.idl.
   * @throws InvalidElementTypeException  Thrown if the elementType is not
   *                   a known child type of the parent SE.
   * @throws ElementUnavailableException
   *                   Thrown if the EMS Server is unable to communicate
   *                   with the MetaSwitch.
   * @throws AlreadyAttachedException  Thrown if attachTo or attachToNew has
   *              already successfully been called on this SEAccessInterface.
   */
  public void attachToNewWithIndices (String[] parentIndices, String elementType) throws com.Metaswitch.MVS.Corba.BadIndicesException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.CreationFailedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.InvalidElementTypeException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.AlreadyAttachedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("attachToNewWithIndices", true);
                com.Metaswitch.MVS.Corba.SequenceOfIndicesHelper.write ($out, parentIndices);
                $out.write_string (elementType);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BadIndicesException:1.0"))
                    throw com.Metaswitch.MVS.Corba.BadIndicesExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:CreationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.CreationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidElementTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidElementTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:AlreadyAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.AlreadyAttachedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                attachToNewWithIndices (parentIndices, elementType        );
            } finally {
                _releaseReply ($in);
            }
  } // attachToNewWithIndices


  /**
   * Performs the action specified by the actionID on the SE.
   *
   * @param actionID  Identifier of the action to invoke.  One of the actionIDs
   *                  listed in the allActions field of the SEProperties of
   *                  this SE.
   * @return  String that will either be zero-length or contain a fully
   *          qualified SE elementName or contains a URL.  When an
   *          elementName is returned, it is intended that the element
   *          specified becomes the "focus" of subsequent processing by the
   *          User.  For example, if an action is performed on a Task object
   *          the SE name returned is the next SE that needs to be processed
   *          in this work flow.  If a URL is returned, this can be passed
   *          to a Web Browser.
   *
   * @throws  ElementDeletedException  See SEExceptions.idl.
   * @throws  NotAttachedException     See SEExceptions.idl.
   * @throws  ElementAlreadyLockedException
   *                                   See SEExceptions.idl.
   * @throws  ElementChangedException  Thrown if another SEAccessInterface
   *                 has altered the SE's state since this SEAccessInterface
   *                 last called getSnapshot.
   * @throws  ElementOperationFailedException  See SEExceptions.idl.
   * @throws  LockTimeoutException  Thrown if this SEAccessInterface has
   *                 locked the SE but then it takes more than the lock
   *                 timeout time to complete this action.  If a LockTimeout
   *                 is received the client should not attempt to unlock this
   *                 SEAccessInterface but should perform a getSnapshot and,
   *                 if chosen, retry the processing.
   * @throws  ElementUnavailableException  See SEExceptions.idl.
   * @throws  ElementBrokenException  See SEExceptions.idl.
   * @throws  SettingsFieldException  Thrown if this is an APPLY action and
   *                 one or more of the fields contains a value that is not
   *                 valid.
   * @throws  UnknownActionException  Thrown if the specified action is
   *                 not supported by this SE under any circumstance.  All
   *                 supported actions are listed in the SEProperties object
   *                 returned on attachment.
   * @throws  ActionNotEnabledException  Thrown if the action is supported by
   *                 this SE under some circumstances but not currently.  For
   *                 example, if an SE is active invoking the activate action
   *                 would throw an ActionNotEnabledException.
   */
  public String doAction (int actionID) throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.NotAttachedException, com.Metaswitch.MVS.Corba.ElementAlreadyLockedException, com.Metaswitch.MVS.Corba.ElementChangedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.LockTimeoutException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException, com.Metaswitch.MVS.Corba.SettingsFieldException, com.Metaswitch.MVS.Corba.ActionNotEnabledException, com.Metaswitch.MVS.Corba.UnknownActionException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("doAction", true);
                $out.write_long (actionID);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NotAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NotAttachedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementAlreadyLockedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementAlreadyLockedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementChangedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementChangedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:LockTimeoutException:1.0"))
                    throw com.Metaswitch.MVS.Corba.LockTimeoutExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementBrokenException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementBrokenExceptionHelper.read ($in);
                else if (_id.equals ("IDL:SettingsFieldException:1.0"))
                    throw com.Metaswitch.MVS.Corba.SettingsFieldExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ActionNotEnabledException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ActionNotEnabledExceptionHelper.read ($in);
                else if (_id.equals ("IDL:UnknownActionException:1.0"))
                    throw com.Metaswitch.MVS.Corba.UnknownActionExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return doAction (actionID        );
            } finally {
                _releaseReply ($in);
            }
  } // doAction


  /**
   * Gets the name of this SE objects parent SE.
   *
   * This will only return a valid name when we have successfully attached to
   * the element and a snapshot obtained.
   *
   * @return  String containing the name of the parent SE.
   *
   * @throws  ElementDeletedException  See SEExceptions.idl.
   * @throws  NotAttachedException     See SEExceptions.idl.
   */
  public String getParent () throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.NotAttachedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getParent", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NotAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NotAttachedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getParent (        );
            } finally {
                _releaseReply ($in);
            }
  } // getParent


  /**
   * Gets the indices of the currently attached SE.
   *
   * @return  A sequence of indices that together with the element type
   *          uniquely identifies the currently attached SE.
   */
  public String[] getIndices ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getIndices", true);
                $in = _invoke ($out);
                String $result[] = com.Metaswitch.MVS.Corba.SequenceOfIndicesHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getIndices (        );
            } finally {
                _releaseReply ($in);
            }
  } // getIndices


  /**
   * Obtains the SE type from its name.  This method does not require this
   * SEAccessInterface to be associated with any SE.  The type returned is
   * entirely a function of the elementName provided.
   *
   * @param elementName  String containing an SE's elementName.
   *
   * @return  String containing the SE's type.
   *
   * @throws  InvalidNameException  Thrown if the elementName provided is not
   *                                a valid SE name.
   */
  public String getTypeFromName (String elementName) throws com.Metaswitch.MVS.Corba.InvalidNameException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTypeFromName", true);
                $out.write_string (elementName);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:InvalidNameException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidNameExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTypeFromName (elementName        );
            } finally {
                _releaseReply ($in);
            }
  } // getTypeFromName


  /**
   * This method provides the main entry point for discovering the structure
   * of the tree of SE types supported by the EMS.
   *
   * This method has two distinct behaviours.  If the SEA is attached, it
   * returns an SEProperties object defining non-mutable characteristics of
   * this SE including the type of any children it can have.  Else if the
   * SEAccess is not attached, it returns an SEProperties object
   * defining the same characteristics of the top-level object that
   * represents the root of the SE tree.
   *
   * @return  SEProperties object defining non-mutable characteristics
   * of an SE.
   *
   * @throws ElementUnavailableException      See SEExceptions.idl.
   * @throws ElementOperationFailedException  See SEExceptions.idl.
   * @throws ElementDeletedException          See SEExceptions.idl.
   */
  public com.Metaswitch.MVS.Corba.SEProperties getSEProperties () throws com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.ElementDeletedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSEProperties", true);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.SEProperties $result = com.Metaswitch.MVS.Corba.SEPropertiesHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSEProperties (        );
            } finally {
                _releaseReply ($in);
            }
  } // getSEProperties


  /**
   * Indicates which entry in the sequence of filters encapsulates the
   * the attached SE.  A filter encapsulates a range of SEs.  For example,
   * when enumerating EMS Subscriber objects, each filter specifies a number
   * range of 1000 subscriber numbers.  Filters can be returned from
   * getElements, getNextElements and getPossibleValues.
   *
   * @param  filters Sequence of strings containing the filter that is
   *                 potentially this SE's parent.
   *
   * @return Index of the filter in the filters sequence that encapsulates this
   *         SE.  If no filter encapsulates this SE, then -1 is returned.
   *
   * @throws ElementUnavailableException   See SEExceptions.idl.
   * @throws ElementBrokenException        See SEExceptions.idl.
   * @throws ElementDeletedException        See SEExceptions.idl.
   * @throws NotAttachedException          See SEExceptions.idl.
   * @throws InvalidFilterException        See SEExceptions.idl.
   */
  public int indexOfFilter (String[] filters) throws com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.NotAttachedException, com.Metaswitch.MVS.Corba.InvalidFilterException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("indexOfFilter", true);
                com.Metaswitch.MVS.Corba.SequenceOfNamesHelper.write ($out, filters);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementBrokenException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementBrokenExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NotAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NotAttachedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidFilterException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidFilterExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return indexOfFilter (filters        );
            } finally {
                _releaseReply ($in);
            }
  } // indexOfFilter


  /**
   * Enumerates SEs that are children of this SE.
   *
   * For more information on the 'filters' mentioned below see the "MetaSwitch
   * Class 5 Softswitch: Integration and Customization manual".
   *
   * @param childType  The type of child SE to return.
   * @param filter     A filter string returned from a previous invocation of
   *                   this method.  If no filter is required supply a
   *                   zero-length string.  Set to the UNIVERSAL_FILTER
   *                   to mandate that elements are returned rather than
   *                   filters.
   * @param maxElements  The maximum number of Elements to return.
   * @param out numReturnedElements  Integer holder that contains the actual
   *                   number Elements returned.
   * @param out more       Boolean holder that indicates whether there are more
   *                   Elements to return, but which were not returned because
   *                   of the value of maxElements.  If true, invoke the
   *                   getNextElements method to return them.
   * @param out returnedFilters  Boolean holder that indicates whether the
   *                   Elements returned are filters or the string identifiers
   *                   of actual SEs.
   *
   * @return  A sequence of Element objects.  Elements contain an elementName
   *          and a displayName.  The interpretation of these depends on the
   *          returnedFilters flag.  If returnedFilters is false then
   *          the elementName refers to a valid, queryable SE and the
   *          displayName is either an NLS string or an emptyString.  Else if
   *          the returnedFilters is true then the elementName is not a
   *          queryable SE but the displayName is always a valid NLS string.
   *          If returnedFilters is true, the Element is a 'wildcard'
   *          representing a number of elements.  To obtain the Elements
   *          representing actual SEs invoke the getNextElements method
   *          supplying the filter as a parameter.
   *
   * @throws ElementDeletedException          See SEExceptions.idl.
   * @throws ElementOperationFailedException  See SEExceptions.idl.
   * @throws InvalidFilterException           Thrown if the value supplied for
   *          the filter parameter is not a valid filter.  A filter returned by
   *          this method for the same childType is always valid.
   * @throws NotAttachedException             The SEAccessInterface does not
   *          have to be attached to query children, but if it is not attached,
   *          then the children are those of the top-level SE representing the
   *          root of the SE tree.
   * @throws NameUnknownException             Thrown if the creation of
   *          this SE is not complete.  In other words, this
   *          SEAccessInterface's attachToNew method has been called
   *          successfully but doAction(APPLY) has not been successfully
   *          invoked.
   * @throws ElementUnavailableException      See SEExceptions.idl.
   */
  public com.Metaswitch.MVS.Corba.Element[] getElements (String childType, String filter, int maxElements, org.omg.CORBA.IntHolder numReturnedElements, org.omg.CORBA.BooleanHolder more, org.omg.CORBA.BooleanHolder returnedFilters) throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.InvalidFilterException, com.Metaswitch.MVS.Corba.NotAttachedException, com.Metaswitch.MVS.Corba.NameUnknownException, com.Metaswitch.MVS.Corba.ElementUnavailableException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getElements", true);
                $out.write_string (childType);
                $out.write_string (filter);
                $out.write_long (maxElements);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.Element $result[] = com.Metaswitch.MVS.Corba.SequenceOfElementsHelper.read ($in);
                numReturnedElements.value = $in.read_long ();
                more.value = $in.read_boolean ();
                returnedFilters.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidFilterException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidFilterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NotAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NotAttachedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NameUnknownException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NameUnknownExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getElements (childType, filter, maxElements, numReturnedElements, more, returnedFilters        );
            } finally {
                _releaseReply ($in);
            }
  } // getElements


  /**
   * Enumerates the next series of child elements of this SE.  See the
   * getElements comment above.
   *
   * @param childType   See getElements.
   * @param startAfterElementName
   *                    An elementName from an Element returned by a previous
   *                    invocation of this method or getElements. The
   *                    enumeration returned by this method invocation will
   *                    contain Elements "after" the one specified by this
   *                    parameter. This method guarantees to return the
   *                    Elements in a fixed order; any two objects will always
   *                    be placed in the same order. Note that the element
   *                    specified by this parameter does not necessarily have
   *                    to exist any more: if the SE specified has been deleted
   *                    it will not affect this enumeration for most objects.
   *                    However, for some objects a deleted startAfterElement
   *                    (when the filter is not the universal SE filter) will
   *                    result in an operation failed exception to avoid
   *                    repeating or skipping elements.
   * @param filter      See getElements.
   * @param maxElements
   *                    See getElements.
   * @param out         numReturnedElements See getElements.
   * @param out         more See getElements.
   * @param out         returnedFilters See getElements.
   *
   * @return See        getElements.
   *
   * @throws ElementDeletedException
   *                    See SEExceptions.idl.
   * @throws ElementOperationFailedException
   *                    See SEExceptions.idl.
   * @throws InvalidFilterException
   *                    Thrown if the value supplied for the filter parameter
   *                    is not a valid filter. A filter returned by this method
   *                    for the same childType is always valid.
   * @throws InvalidNameException
   *                    Thrown if the startAfterElementName is not a valid SE
   *                    elementName. Any elementName returned by getElements or
   *                    getNextElements, including filter names, is valid.
   * @throws NotAttachedException
   *                    The SEAccessInterface does not have to be attached to
   *                    query children, but if it is not attached, then the
   *                    children are those of the top-level SE representing the
   *                    root of the SE tree.
   * @throws NameUnknownException
   *                    Thrown if the creation of this SE is not complete. In
   *                    other words, this SEAccessInterface's attachToNew
   *                    method has been called successfully but doAction(APPLY)
   *                    has not been successfully invoked.
   * @throws ElementUnavailableException
   *                    See SEExceptions.idl.
   */
  public com.Metaswitch.MVS.Corba.Element[] getNextElements (String childType, String startAfterElementName, String filter, int maxElements, org.omg.CORBA.IntHolder numReturnedElements, org.omg.CORBA.BooleanHolder more, org.omg.CORBA.BooleanHolder returnedFilters) throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.InvalidFilterException, com.Metaswitch.MVS.Corba.InvalidNameException, com.Metaswitch.MVS.Corba.NotAttachedException, com.Metaswitch.MVS.Corba.NameUnknownException, com.Metaswitch.MVS.Corba.ElementUnavailableException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getNextElements", true);
                $out.write_string (childType);
                $out.write_string (startAfterElementName);
                $out.write_string (filter);
                $out.write_long (maxElements);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.Element $result[] = com.Metaswitch.MVS.Corba.SequenceOfElementsHelper.read ($in);
                numReturnedElements.value = $in.read_long ();
                more.value = $in.read_boolean ();
                returnedFilters.value = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidFilterException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidFilterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidNameException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidNameExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NotAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NotAttachedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NameUnknownException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NameUnknownExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getNextElements (childType, startAfterElementName, filter, maxElements, numReturnedElements, more, returnedFilters        );
            } finally {
                _releaseReply ($in);
            }
  } // getNextElements


  /**
   * Attempt to gain exclusive read and write access to the SE.
   *
   * CAUTION: Client applications should avoid using this method if possible.
   * This is because the lock method can have unexpected consequences.  For
   * example locking a parent SE may also cause its children to be locked.
   * If the application had already locked the children a deadlock could occur.
   * The precise locking behaviour is specific to each SE type and may even
   * vary with the configuration of individual SE instances.
   *
   * The exclusive access gained by this method invocation can be forcibly
   * broken by another SEAccessInterface after a fixed timeout period of 30
   * seconds.  This ensures that no client application can permanently lock the
   * system either through bad behavior or if the application unexpectedly
   * terminates.
   *
   * Invoke the unlock method to release the lock.
   *
   * @throws ElementDeletedException        See SEExceptions.idl.
   * @throws NotAttachedException           See SEExceptions.idl.
   * @throws ElementAlreadyLockedException  See SEExceptions.idl.
   * @throws ElementBrokenException         See SEExceptions.idl.
   * @throws ElementUnavailableException    See SEExceptions.idl.
   */
  public void lock () throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.NotAttachedException, com.Metaswitch.MVS.Corba.ElementAlreadyLockedException, com.Metaswitch.MVS.Corba.ElementBrokenException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementOperationFailedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("lock", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NotAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NotAttachedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementAlreadyLockedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementAlreadyLockedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementBrokenException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementBrokenExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                lock (        );
            } finally {
                _releaseReply ($in);
            }
  } // lock


  /**
   * Releases the exclusive read and write access obtained by invoking the
   * lock method.
   *
   * @throws ElementDeletedException      See SEExceptions.idl.
   * @throws NotAttachedException         See SEExceptions.idl.
   * @throws ElementNotLockedException    See SEExceptions.idl.
   * @throws ElementBrokenException       See SEExceptions.idl.
   * @throws ElementUnavailableException  See SEExceptions.idl.
   * @throws LockTimeoutException         See SEExceptions.idl.
   */
  public void unlock () throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.NotAttachedException, com.Metaswitch.MVS.Corba.ElementNotLockedException, com.Metaswitch.MVS.Corba.ElementBrokenException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.LockTimeoutException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("unlock", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NotAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NotAttachedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementNotLockedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementNotLockedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementBrokenException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementBrokenExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:LockTimeoutException:1.0"))
                    throw com.Metaswitch.MVS.Corba.LockTimeoutExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                unlock (        );
            } finally {
                _releaseReply ($in);
            }
  } // unlock


  /**
   * Captures an instantaneous "snapshot" of the SE's state.  This snapshot is
   * then accessed by calling getSnapshot.
   *
   * The takeSnapshot request is an explicit request to obtain the latest
   * snapshot information.  A takeSnapshot invocation is implicitly performed
   * after an attachTo, attachToNew or doAction method invocation: so there is
   * no need to call takeSnapshot after any of these method invocations, simply
   * call getSnapshot.
   *
   * @throws ElementDeletedException          See SEExceptions.idl.
   * @throws NotAttachedException             See SEExceptions.idl.
   * @throws ElementOperationFailedException  See SEExceptions.idl.
   * @throws LockTimeoutException             See SEExceptions.idl.
   */
  public void takeSnapshot () throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.NotAttachedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.LockTimeoutException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("takeSnapshot", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NotAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NotAttachedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:LockTimeoutException:1.0"))
                    throw com.Metaswitch.MVS.Corba.LockTimeoutExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                takeSnapshot (        );
            } finally {
                _releaseReply ($in);
            }
  } // takeSnapshot


  /**
   * Obtains the "snapshot" of the SE's state captured by the last explicit or
   * implicit takeSnapshot invocation.
   *
   * @param out enabledActions  Sequence of integers listing the action
   *                            identifiers of those actions currently enabled
   *                            on this SE.
   * @param out name            String identifier of this SE if available.
   *                            If the name is not currently available then a
   *                            zero-length string is returned.  The name is
   *                            not available until the SE has been
   *                            successfully and fully created.
   * @param out displayName     String containing the displayable form of this
   *                            SE's name if available.  If the name is not
   *                            not currently available then a zero-length
   *                            string is returned.
   * @param out references      Sequence of Reference objects describing other
   *                            SEs referenced by this SE.  A reference is
   *                            where a field specifies the name of another SE.
   *                            For example, the Signaling Gateway SE has a
   *                            Signaling Point Timer Profile field that
   *                            references the name of a particular Signaling
   *                            Point Time Profile SE instance.
   *
   * @return                    SettingsUserInterface providing access to this
   *                            SE's configuration fields. This settings object
   *                            reference is valid for the life time of the
   *                            SEAccessInterface.  To synchronize the state of
   *                            information accessed through this interface
   *                            with the current state of the SE call
   *                            takeSnapshot.  To set the locally altered
   *                            settings in the SE call doAction(APPLY).
   *
   * @throws ElementDeletedException      See SEExceptions.idl.
   * @throws NotAttachedException         See SEExceptions.idl.
   * @throws ElementUnavailableException  See SEExceptions.idl.  If this
   *                            exception is thrown the client application can
   *                            obtain a partially complete snapshot by calling
   *                            the getPartialSnapshot method.
   * @throws ElementBrokenException       See SEExceptions.idl.  If this
   *                            exception is thrown the client application can
   *                            obtain a partially complete snapshot by calling
   *                            the getPartialSnapshot method.

   */
  public com.Metaswitch.MVS.Corba.SettingsUserInterface getSnapshot (com.Metaswitch.MVS.Corba.SequenceOfIntegersHolder enabledActions, org.omg.CORBA.StringHolder name, org.omg.CORBA.StringHolder displayName, com.Metaswitch.MVS.Corba.SequenceOfReferencesHolder references) throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.NotAttachedException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSnapshot", true);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.SettingsUserInterface $result = com.Metaswitch.MVS.Corba.SettingsUserInterfaceHelper.read ($in);
                enabledActions.value = com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.read ($in);
                name.value = $in.read_string ();
                displayName.value = $in.read_string ();
                references.value = com.Metaswitch.MVS.Corba.SequenceOfReferencesHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NotAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NotAttachedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementBrokenException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementBrokenExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSnapshot (enabledActions, name, displayName, references        );
            } finally {
                _releaseReply ($in);
            }
  } // getSnapshot


  /**
   *
   * Obtains the "snapshot" of the SE's state captured by the last explicit or
   * implicit takeSnapshot invocation.
   *
   * @return                    See getSnapshot
   *
   * @throws ElementDeletedException      See SEExceptions.idl.
   * @throws NotAttachedException         See SEExceptions.idl.
   * @throws ElementUnavailableException  See SEExceptions.idl.  If this
   *                            exception is thrown the client application can
   *                            obtain a partially complete snapshot by calling
   *                            the getPartialSnapshot method.
   * @throws ElementBrokenException       See SEExceptions.idl.  If this
   *                            exception is thrown the client application can
   *                            obtain a partially complete snapshot by calling
   *                            the getPartialSnapshot method.

   */
  public com.Metaswitch.MVS.Corba.SettingsUserInterface getSnapshot_Settings () throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.NotAttachedException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSnapshot_Settings", true);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.SettingsUserInterface $result = com.Metaswitch.MVS.Corba.SettingsUserInterfaceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NotAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NotAttachedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementBrokenException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementBrokenExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSnapshot_Settings (        );
            } finally {
                _releaseReply ($in);
            }
  } // getSnapshot_Settings


  /**
   *
   * Obtains the "snapshot" of the SE display and element name captured by the
   * last explicit or implicit takeSnapshot invocation.
   *
   * @return DualString
   *                    providing access to this SE display and element name
   *
   * @throws ElementDeletedException
   *                    See SEExceptions.idl.
   * @throws NotAttachedException
   *                    See SEExceptions.idl.
   * @throws ElementUnavailableException
   *                    See SEExceptions.idl. If this exception is thrown the
   *                    client application can obtain a partially complete
   *                    snapshot by calling the getPartialSnapshot method.
   * @throws ElementBrokenException
   *                    See SEExceptions.idl. If this exception is thrown the
   *                    client application can obtain a partially complete
   *                    snapshot by calling the getPartialSnapshot method.

   */
  public com.Metaswitch.MVS.Corba.DualString getSnapshot_Element () throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.NotAttachedException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.ElementBrokenException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSnapshot_Element", true);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.DualString $result = com.Metaswitch.MVS.Corba.DualStringHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NotAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NotAttachedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementBrokenException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementBrokenExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSnapshot_Element (        );
            } finally {
                _releaseReply ($in);
            }
  } // getSnapshot_Element


  /**
   * Obtains the "snapshot" of the SE's state captured by the last explicit or
   * implicit takeSnapshot invocation.  This method should only be called
   * after getSnapshot threw an ElementUnavailableException or an
   * ElementBrokenException.  The snapshot returned represents the best effort
   * attempt to get the current SE's state.
   *
   * @param out enabledActions        See getSnapshot.
   * @param out name                  See getSnapshot.
   * @param out displayName           See getSnapshot.
   * @param out references            See getSnapshot.
   *
   * @return                          See getSnapshot.
   *
   * @throws ElementDeletedException  See SEExceptions.idl.
   * @throws NotAttachedException     See SEExceptions.idl.
   */
  public com.Metaswitch.MVS.Corba.SettingsUserInterface getPartialSnapshot (com.Metaswitch.MVS.Corba.SequenceOfIntegersHolder enabledActions, org.omg.CORBA.StringHolder name, org.omg.CORBA.StringHolder displayName, com.Metaswitch.MVS.Corba.SequenceOfReferencesHolder references) throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.NotAttachedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPartialSnapshot", true);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.SettingsUserInterface $result = com.Metaswitch.MVS.Corba.SettingsUserInterfaceHelper.read ($in);
                enabledActions.value = com.Metaswitch.MVS.Corba.SequenceOfIntegersHelper.read ($in);
                name.value = $in.read_string ();
                displayName.value = $in.read_string ();
                references.value = com.Metaswitch.MVS.Corba.SequenceOfReferencesHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NotAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NotAttachedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPartialSnapshot (enabledActions, name, displayName, references        );
            } finally {
                _releaseReply ($in);
            }
  } // getPartialSnapshot


  /**
   *
   * Obtains the "snapshot" of the SE's state captured by the last explicit or
   * implicit takeSnapshot invocation.  This method should only be called
   * after getSnapshot threw an ElementUnavailableException or an
   * ElementBrokenException.  The snapshot returned represents the best effort
   * attempt to get the current SE's state.
   *
   * @param out enabledActions        See getSnapshot.
   * @param out name                  See getSnapshot.
   * @param out displayName           See getSnapshot.
   * @param out references            See getSnapshot.
   *
   * @return                          See getSnapshot.
   *
   * @throws ElementDeletedException  See SEExceptions.idl.
   * @throws NotAttachedException     See SEExceptions.idl.
   */
  public com.Metaswitch.MVS.Corba.SettingsUserInterface getPartialSnapshot_Settings () throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.NotAttachedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPartialSnapshot_Settings", true);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.SettingsUserInterface $result = com.Metaswitch.MVS.Corba.SettingsUserInterfaceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NotAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NotAttachedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPartialSnapshot_Settings (        );
            } finally {
                _releaseReply ($in);
            }
  } // getPartialSnapshot_Settings


  /**
   * Adds a listener so that it is notified of any changes to the SE's state.
   * Only a single object can be listening at any one time.
   *
   * @param listener   SnapshotChangeListenerInterface to be notified
   *                   of changes in the SE's state.
   *
   * @throws TooManySnapshotChangeListenersException  Thrown if a listener has
   *                   already registered on this SEAccessInterface.
   * @throws ElementDeletedException      See SEExceptions.idl.
   * @throws NotAttachedException         See SEExceptions.idl.
   * @throws ElementUnavailableException  See SEExceptions.idl.
   */
  public void addSnapshotChangeListener (com.Metaswitch.MVS.Corba.SnapshotChangeListenerInterface listener) throws com.Metaswitch.MVS.Corba.TooManySnapshotChangeListenersException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.NotAttachedException, com.Metaswitch.MVS.Corba.ElementUnavailableException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("addSnapshotChangeListener", true);
                com.Metaswitch.MVS.Corba.SnapshotChangeListenerInterfaceHelper.write ($out, listener);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:TooManySnapshotChangeListenersException:1.0"))
                    throw com.Metaswitch.MVS.Corba.TooManySnapshotChangeListenersExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NotAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NotAttachedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                addSnapshotChangeListener (listener        );
            } finally {
                _releaseReply ($in);
            }
  } // addSnapshotChangeListener


  /**
   * Remove the listener registered on addSnapshotChangeListener.
   *
   * @throws NoSnapshotChangeListenersException  Thrown if no listener is
   *                   currently registered on this SEAccessInterface.
   * @throws ElementDeletedException      See SEExceptions.idl.
   * @throws NotAttachedException         See SEExceptions.idl.
   * @throws ElementUnavailableException  See SEExceptions.idl.
   */
  public void removeSnapshotChangeListener () throws com.Metaswitch.MVS.Corba.NoSnapshotChangeListenersException, com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.NotAttachedException, com.Metaswitch.MVS.Corba.ElementUnavailableException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("removeSnapshotChangeListener", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:NoSnapshotChangeListenersException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NoSnapshotChangeListenersExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NotAttachedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NotAttachedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                removeSnapshotChangeListener (        );
            } finally {
                _releaseReply ($in);
            }
  } // removeSnapshotChangeListener


  /**
   * Destroys this SEAccessInterface.  All SEAccessInterface references
   * returned by the SEAccessInterfaceFactory must be destroyed by calling
   * this method.  If the client application terminates unexpectedly or
   * loses connectivity with the EMS Server, the EMS Server will recover the
   * memory allocated to the SEAccessInterface instance.  However, unless the
   * destroy method is called, memory cannot be recovered while the client
   * session is logged in.
   */
  public void destroy ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("destroy", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                destroy (        );
            } finally {
                _releaseReply ($in);
            }
  } // destroy


  /**
   *
   * Searches for the first instance of the specified element type below this
   * SEAccessInterface in the OML tree and returns an SEAccessInterface
   * attached to that element.
   *
   * @return                    SEAccessInterface providing access to the
   *                            first element of the specified type found
   *                            under this SEAccessInterface.
   *
   * @param in type             Type of element to search for
   *
   * @throws ElementDeletedException          See SEExceptions.idl.
   * @throws ElementOperationFailedException  See SEExceptions.idl.
   * @throws NameUnknownException             Thrown if the creation of
   *          this SE is not complete.  In other words, this
   *          SEAccessInterface's attachToNew method has been called
   *          successfully but doAction(APPLY) has not been successfully
   *          invoked.
   * @throws ElementUnavailableException      See SEExceptions.idl.
   *
   */
  public com.Metaswitch.MVS.Corba.SEAccessInterface findElement (String type) throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.NameUnknownException, com.Metaswitch.MVS.Corba.ElementUnavailableException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("findElement", true);
                $out.write_string (type);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.SEAccessInterface $result = com.Metaswitch.MVS.Corba.SEAccessInterfaceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NameUnknownException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NameUnknownExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return findElement (type        );
            } finally {
                _releaseReply ($in);
            }
  } // findElement


  /**
   *
   * Searches for the next instance of the specified element type below this
   * SEAccessInterface in the OML tree and returns an SEAccessInterface
   * attached to that element.
   *
   * @return SEAccessInterface
   *                    providing access to the next element of the specified
   *                    type found under this SEAccessInterface.
   *
   * @param in type     Type of element to search for
   * @param in startAfterElementName
   *                    An elementName from an Element
   *                    returned by a previous invocation of this method or
   *                    getElements. The enumeration returned by this method
   *                    invocation will contain Elements "after" the one
   *                    specified by this parameter.
   *
   * @throws ElementDeletedException
   *                    See SEExceptions.idl.
   * @throws ElementOperationFailedException
   *                    See SEExceptions.idl.
   * @throws NameUnknownException
   *                    Thrown if the creation of this SE is not complete. In
   *                    other words, this SEAccessInterface's attachToNew
   *                    method has been called successfully but doAction(APPLY)
   *                    has not been successfully invoked.
   * @throws ElementUnavailableException
   *                    See SEExceptions.idl.
   *
   */
  public com.Metaswitch.MVS.Corba.SEAccessInterface findNextElement (String type, String startAfterElementName) throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.NameUnknownException, com.Metaswitch.MVS.Corba.ElementUnavailableException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("findNextElement", true);
                $out.write_string (type);
                $out.write_string (startAfterElementName);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.SEAccessInterface $result = com.Metaswitch.MVS.Corba.SEAccessInterfaceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NameUnknownException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NameUnknownExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return findNextElement (type, startAfterElementName        );
            } finally {
                _releaseReply ($in);
            }
  } // findNextElement


  /**
   *
   * Searches for the first instance of the specified element type below this
   * SEAccessInterface in the OML tree, with the specified String field set to
   * the specified value, and returns an SEAccessInterface
   * attached to that element.
   *
   * @return                    SEAccessInterface providing access to the
   *                            first element of the specified type found
   *                            under this SEAccessInterface.
   *
   * @param in type             Type of element to search for
   * @param in fieldName        Field name of the element to match
   * @param in fieldValue       Value of the field to match
   *
   * @throws ElementDeletedException          See SEExceptions.idl.
   * @throws ElementOperationFailedException  See SEExceptions.idl.
   * @throws NameUnknownException             Thrown if the creation of
   *          this SE is not complete.  In other words, this
   *          SEAccessInterface's attachToNew method has been called
   *          successfully but doAction(APPLY) has not been successfully
   *          invoked.
   * @throws ElementUnavailableException      See SEExceptions.idl.
   * @throws FieldNameOrIndexNotFoundException
   *                   Thrown when fieldName could not be mapped to the
   *                   name of a field in the settings for the type
   *                   of SEAccessInterface to be returned.
   *
   */
  public com.Metaswitch.MVS.Corba.SEAccessInterface findElementWithStringField (String type, String fieldName, String fieldValue) throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.NameUnknownException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("findElementWithStringField", true);
                $out.write_string (type);
                $out.write_string (fieldName);
                $out.write_string (fieldValue);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.SEAccessInterface $result = com.Metaswitch.MVS.Corba.SEAccessInterfaceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NameUnknownException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NameUnknownExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return findElementWithStringField (type, fieldName, fieldValue        );
            } finally {
                _releaseReply ($in);
            }
  } // findElementWithStringField


  /**
   *
   * Searches for the first instance of the specified element type below this
   * SEAccessInterface in the OML tree, with the specified String field set to
   * the specified value, and returns an SEAccessInterface
   * attached to that element.
   *
   * @return                    SEAccessInterface providing access to the
   *                            first element of the specified type found
   *                            under this SEAccessInterface.
   *
   * @param in type             Type of element to search for
   * @param in startAfterElementName
   *                            An elementName from an Element
   *                            returned by a previous invocation of this method or
   *                            getElements. The enumeration returned by this method
   *                            invocation will contain Elements "after" the one
   *                            specified by this parameter.
   * @param in fieldName        Field name of the element to match
   * @param in fieldValue       Value of the field to match
   *
   * @throws ElementDeletedException          See SEExceptions.idl.
   * @throws ElementOperationFailedException  See SEExceptions.idl.
   * @throws NameUnknownException             Thrown if the creation of
   *          this SE is not complete.  In other words, this
   *          SEAccessInterface's attachToNew method has been called
   *          successfully but doAction(APPLY) has not been successfully
   *          invoked.
   * @throws ElementUnavailableException      See SEExceptions.idl.
   * @throws FieldNameOrIndexNotFoundException
   *                   Thrown when fieldName could not be mapped to the
   *                   name of a field in the settings for the type
   *                   of SEAccessInterface to be returned.
   *
   */
  public com.Metaswitch.MVS.Corba.SEAccessInterface findNextElementWithStringField (String type, String startAfterElementName, String fieldName, String fieldValue) throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.NameUnknownException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("findNextElementWithStringField", true);
                $out.write_string (type);
                $out.write_string (startAfterElementName);
                $out.write_string (fieldName);
                $out.write_string (fieldValue);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.SEAccessInterface $result = com.Metaswitch.MVS.Corba.SEAccessInterfaceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NameUnknownException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NameUnknownExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return findNextElementWithStringField (type, startAfterElementName, fieldName, fieldValue        );
            } finally {
                _releaseReply ($in);
            }
  } // findNextElementWithStringField


  /**
   *
   * Searches for the first instance of the specified element type below this
   * SEAccessInterface in the OML tree, with the specified Int field set to
   * the specified value, and returns an SEAccessInterface
   * attached to that element.
   *
   * @return                    SEAccessInterface providing access to the
   *                            first element of the specified type found
   *                            under this SEAccessInterface.
   *
   * @param in type             Type of element to search for
   * @param in fieldName        Field name of the element to match
   * @param in fieldValue       Value of the field to match
   *
   * @throws ElementDeletedException          See SEExceptions.idl.
   * @throws ElementOperationFailedException  See SEExceptions.idl.
   * @throws NameUnknownException             Thrown if the creation of
   *          this SE is not complete.  In other words, this
   *          SEAccessInterface's attachToNew method has been called
   *          successfully but doAction(APPLY) has not been successfully
   *          invoked.
   * @throws ElementUnavailableException      See SEExceptions.idl.
   * @throws FieldNameOrIndexNotFoundException
   *                   Thrown when fieldName could not be mapped to the
   *                   name of a field in the settings for the type
   *                   of SEAccessInterface to be returned.
   * @throws FieldBadTypeException
   *                   Thrown when the field is not of one of the
   *                   following types: INT32, INT32_MAP, INT32_RANGE  and
   *                   INT32_ARRAY field types.
   *
   */
  public com.Metaswitch.MVS.Corba.SEAccessInterface findElementWithIntField (String type, String fieldName, int fieldValue) throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.NameUnknownException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("findElementWithIntField", true);
                $out.write_string (type);
                $out.write_string (fieldName);
                $out.write_long (fieldValue);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.SEAccessInterface $result = com.Metaswitch.MVS.Corba.SEAccessInterfaceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NameUnknownException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NameUnknownExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return findElementWithIntField (type, fieldName, fieldValue        );
            } finally {
                _releaseReply ($in);
            }
  } // findElementWithIntField


  /**
   *
   * Searches for the first instance of the specified element type below this
   * SEAccessInterface in the OML tree, with the specified Int field set to
   * the specified value, and returns an SEAccessInterface
   * attached to that element.
   *
   * @return                    SEAccessInterface providing access to the
   *                            first element of the specified type found
   *                            under this SEAccessInterface.
   *
   * @param in type             Type of element to search for
   * @param in startAfterElementName
   *                            An elementName from an Element
   *                            returned by a previous invocation of this method or
   *                            getElements. The enumeration returned by this method
   *                            invocation will contain Elements "after" the one
   *                            specified by this parameter.
   * @param in fieldName        Field name of the element to match
   * @param in fieldValue       Value of the field to match
   *
   * @throws ElementDeletedException          See SEExceptions.idl.
   * @throws ElementOperationFailedException  See SEExceptions.idl.
   * @throws NameUnknownException             Thrown if the creation of
   *          this SE is not complete.  In other words, this
   *          SEAccessInterface's attachToNew method has been called
   *          successfully but doAction(APPLY) has not been successfully
   *          invoked.
   * @throws ElementUnavailableException      See SEExceptions.idl.
   * @throws FieldNameOrIndexNotFoundException
   *                   Thrown when fieldName could not be mapped to the
   *                   name of a field in the settings for the type
   *                   of SEAccessInterface to be returned.
   * @throws FieldBadTypeException
   *                   Thrown when the field is not of one of the
   *                   following types: INT32, INT32_MAP, INT32_RANGE  and
   *                   INT32_ARRAY field types.
   *
   */
  public com.Metaswitch.MVS.Corba.SEAccessInterface findNextElementWithIntField (String type, String startAfterElementName, String fieldName, int fieldValue) throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.NameUnknownException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundException, com.Metaswitch.MVS.Corba.FieldBadTypeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("findNextElementWithIntField", true);
                $out.write_string (type);
                $out.write_string (startAfterElementName);
                $out.write_string (fieldName);
                $out.write_long (fieldValue);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.SEAccessInterface $result = com.Metaswitch.MVS.Corba.SEAccessInterfaceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NameUnknownException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NameUnknownExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldNameOrIndexNotFoundException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldNameOrIndexNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FieldBadTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.FieldBadTypeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return findNextElementWithIntField (type, startAfterElementName, fieldName, fieldValue        );
            } finally {
                _releaseReply ($in);
            }
  } // findNextElementWithIntField


  /**
   *
   * Searches for the first instance of the parent type for the specified
   * element type below this SEAccessInterface in the OML tree, creates
   * a new SE of the specified type below that parent, and returns an
   * SEAccessInterface attached to that element.
   *
   * @return                    SEAccessInterface providing access to the
   *                            newly create SE of the specified type.
   *
   * @param in type             Type of element to create
   *
   * @throws ElementDeletedException          See SEExceptions.idl.
   * @throws ElementOperationFailedException  See SEExceptions.idl.
   * @throws NameUnknownException             Thrown if the creation of
   *          this SE is not complete.  In other words, this
   *          SEAccessInterface's attachToNew method has been called
   *          successfully but doAction(APPLY) has not been successfully
   *          invoked.
   * @throws ElementUnavailableException      See SEExceptions.idl.
   * @throws InvalidElementTypeException  Thrown if the type is not
   *                                      a valid child type.
   * @throws CreationFailedException  See SEExceptions.idl.
   *
   */
  public com.Metaswitch.MVS.Corba.SEAccessInterface createElement (String type) throws com.Metaswitch.MVS.Corba.ElementDeletedException, com.Metaswitch.MVS.Corba.ElementOperationFailedException, com.Metaswitch.MVS.Corba.NameUnknownException, com.Metaswitch.MVS.Corba.ElementUnavailableException, com.Metaswitch.MVS.Corba.InvalidElementTypeException, com.Metaswitch.MVS.Corba.CreationFailedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createElement", true);
                $out.write_string (type);
                $in = _invoke ($out);
                com.Metaswitch.MVS.Corba.SEAccessInterface $result = com.Metaswitch.MVS.Corba.SEAccessInterfaceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ElementDeletedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementDeletedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementOperationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementOperationFailedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:NameUnknownException:1.0"))
                    throw com.Metaswitch.MVS.Corba.NameUnknownExceptionHelper.read ($in);
                else if (_id.equals ("IDL:ElementUnavailableException:1.0"))
                    throw com.Metaswitch.MVS.Corba.ElementUnavailableExceptionHelper.read ($in);
                else if (_id.equals ("IDL:InvalidElementTypeException:1.0"))
                    throw com.Metaswitch.MVS.Corba.InvalidElementTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:CreationFailedException:1.0"))
                    throw com.Metaswitch.MVS.Corba.CreationFailedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return createElement (type        );
            } finally {
                _releaseReply ($in);
            }
  } // createElement

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:SEAccessInterface:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _SEAccessInterfaceStub
