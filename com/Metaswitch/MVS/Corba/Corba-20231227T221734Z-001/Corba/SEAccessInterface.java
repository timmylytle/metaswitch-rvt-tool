package com.Metaswitch.MVS.Corba;


/**
* com/Metaswitch/MVS/Corba/SEAccessInterface.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from SEAccessInterface.idl
* Thursday, June 18, 2020 8:33:02 PM CDT
*/


/**
 * The SEAccessInterface is the primary interface for navigating the tree of
 * SE objects and managing individual SEs.
 */
public interface SEAccessInterface extends SEAccessInterfaceOperations, org.omg.CORBA.Object, org.omg.CORBA.portable.IDLEntity 
{

  /**
   * Defines the value to supply as the filter parameter to getNextElements and
   * getElements methods to mandate that elements are returned rather than
   * filters.
   */
  public static final String UNIVERSAL_FILTER = "*";

  /**
   * Defines the value to supply as the filter parameter to getNextElements and
   * getElements methods to mandate that elements are returned rather than
   * filters, AND that the elements do not have to be direct children of the
   * base element (i.e. will return grand-children etc).
   **/
  public static final String UNIVERSAL_RELATIVE_FILTER = "**";

  /**
   * If the IS_READABLE bit is set then the User has permission to read the
   * object or field.
   */
  public static final int IS_READABLE = (int)(0x01);

  /**
   * If the IS_WRITEABLE bit is set then the User has permission to write to
   * the object or field, or perform the action.
   */
  public static final int IS_WRITEABLE = (int)(0x02);

  /**
   * If the IS_VISIBLE bit is set then the User has permission to view the
   * object or field.  Visibility is a recommendation in addition to
   * readability. A user can have permission to read a field but the visibility
   * can indicate that the field is not relevent to the particular variant
   * configured.
   */
  public static final int IS_VISIBLE = (int)(0x04);

  /**
   * Constant defining the bits in the accessFlagsByGroup and
   * accessFlagsByState fields that pertain to readability.
   */
  public static final long ACCESS_READ_BITS = (long)(0x5555555555555555L);

  /**
   * Constant defining the bits in the accessFlagsByGroup and accessFlagsByState
   * fields that pertain to writeability.
   */
  public static final long ACCESS_WRITE_BITS = (long)(-6148914691236517206L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the workflow administration.
   */
  public static final long GROUP_WKFLOW_ADMIN = (long)(0x0000000000000003L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the workflows group A.
   */
  public static final long GROUP_WKFLOW_GROUP_A = (long)(0x000000000000000CL);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the workflows group B.
   */
  public static final long GROUP_WKFLOW_GROUP_B = (long)(0x0000000000000030L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the workflows group C.
   */
  public static final long GROUP_WKFLOW_GROUP_C = (long)(0x00000000000000C0L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the Logs.
   */
  public static final long GROUP_LOGS = (long)(0x000000000000C000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the Hardware configuration.
   */
  public static final long GROUP_HARDWARE_CONFIG = (long)(0x0000000000030000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability by the Routing configuration.
   */
  public static final long GROUP_ROUTING_CONFIG = (long)(0x00000000000C0000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the System configuration.
   */
  public static final long GROUP_SYSTEM_CONFIG = (long)(0x0000000000300000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability by the Network configuration.
   */
  public static final long GROUP_NETWORK_CONFIG = (long)(0x0000000000C00000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability by the Subscriber configuration.
   */
  public static final long GROUP_SUBSCRIBER_CONFIG = (long)(0x0000000003000000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability by the Sensitive configuration.
   */
  public static final long GROUP_SENSITIVE_CONFIG = (long)(0x000000000C000000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability by the Diagnostics.
   */
  public static final long GROUP_DIAGNOSTICS = (long)(0x0000000030000000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability by the EMS User administration.
   */
  public static final long GROUP_EMS_USER_ADMIN = (long)(0x00000000C0000000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability by the Billing/Craft User administration.
   */
  public static final long GROUP_BILL_CRAFT_USER_ADMIN = (long)(0x0000000300000000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the Subscriber-related Route Verification Tests.
   */
  public static final long GROUP_SUBSCRIBER_ROUTE_TESTING = (long)(0x0000000C00000000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the Lawful Interception configuration.
   */
  public static final long GROUP_LAWFUL_INTERCEPTION_CONFIG = (long)(0x0000003000000000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the User Defined 1 configuration.
   */
  public static final long GROUP_USER_DEFINED_1 = (long)(0x000000C000000000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the User Defined 2 configuration.
   */
  public static final long GROUP_USER_DEFINED_2 = (long)(0x0000030000000000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the User Defined 3 configuration.
   */
  public static final long GROUP_USER_DEFINED_3 = (long)(0x00000C0000000000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the User Defined 4 configuration.
   */
  public static final long GROUP_USER_DEFINED_4 = (long)(0x0000300000000000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the User Defined 5 configuration.
   */
  public static final long GROUP_USER_DEFINED_5 = (long)(0x0000C00000000000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the Perimeta configuration.
   */
  public static final long GROUP_PERIMETA_CONFIG = (long)(0x0003000000000000L);

  /**
   * Constant defining the bits in the accessFlagsByGroup fields that pertain to
   * read/writeability in the Beta configuration.
   */
  public static final long GROUP_BETA_CONFIG = (long)(0x000C000000000000L);

  /**
   * Constant defining the bits in the actionImpactFlags field to indicate
   * that performing a specific action might result in the children of the SE
   * changing.  If this bit is not set,  the children will not change as a
   * direct result of performing the action (although for some SE types, it is
   * always possible that they may change at any time regardless of the actions
   * being performed on the SE).  If this bit is set, it is likely that the
   * children will change when the action is performed, so the client
   * application is advised to re-query the children when the action completes
   * if it is currently interested in the child objects.
   */
  public static final int CHILDREN_MAY_CHANGE = (int)(0x01);

  /**
   * Constant defining the bits in the actionImpactFlags field to indicate
   * that performing a specific action might result in all descendants of
   * the SE changing.  If this bit is not set, the descendants will not change
   * as a direct result of performing the action (although for some SE types,
   * it is always possible that they may change at any time regardless of the
   * actions being performed on the SE).  If this bit is set, it is likely that
   * the descendants will change when the action is performed, so the client
   * application is advised to re-query all of the descendants when the action
   * completes if it is currently interested in the child objects.
   */
  public static final int ALL_DESCENDANTS_MAY_CHANGE = (int)(0x02);

  /**
   * Constant defining the bits in the actionImpactFlags field to indicate
   * that performing a specific action does not result in any changes being
   * made to the SE.  If this bit is set, the SE will not change
   * as a direct result of performing the action (although for some SE types,
   * it is always possible that they may change at any time regardless of the
   * actions being performed on the SE).
   */
  public static final int DOES_NOT_CHANGE_SE = (int)(0x04);

  /**
   * Constant defining the bits in the typeFlags field to indicate that SEs of
   * this type are temporary, and only exist whilst the user is working with
   * them.
   */
  public static final int SE_IS_TEMPORARY = (int)(0x01);

  /**
   * Constant defining the bits in the typeFlags field to indicate that
   * on objects of this type, a warning will be displayed, telling users to
   * make changes on MetaView Web, rather than MetaView Explorer.
   */
  public static final int MV_WEB_WARNING = (int)(0x02);
} // interface SEAccessInterface
